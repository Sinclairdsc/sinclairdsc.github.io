{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon.jpg","path":"images/apple-touch-icon.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16.jpg","path":"images/favicon-16x16.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32.jpg","path":"images/favicon-32x32.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo-old.svg","path":"images/logo-old.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/head.jpg","path":"images/head.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"source/assets/blogImg/QQ.JPG","path":"assets/blogImg/QQ.JPG","modified":0,"renderable":0},{"_id":"source/assets/blogImg/alipay.JPG","path":"assets/blogImg/alipay.JPG","modified":0,"renderable":0},{"_id":"source/assets/blogImg/favicon.ico","path":"assets/blogImg/favicon.ico","modified":0,"renderable":0},{"_id":"source/assets/blogImg/favicon_备用1.ico","path":"assets/blogImg/favicon_备用1.ico","modified":0,"renderable":0},{"_id":"source/assets/blogImg/favicon_备用2.ico","path":"assets/blogImg/favicon_备用2.ico","modified":0,"renderable":0},{"_id":"source/assets/blogImg/head.jpg","path":"assets/blogImg/head.jpg","modified":0,"renderable":0},{"_id":"source/assets/blogImg/head_备用1.jpg","path":"assets/blogImg/head_备用1.jpg","modified":0,"renderable":0},{"_id":"source/assets/blogImg/head_备用2.png","path":"assets/blogImg/head_备用2.png","modified":0,"renderable":0},{"_id":"source/assets/blogImg/red_128px_1162122_easyicon.net.ico","path":"assets/blogImg/red_128px_1162122_easyicon.net.ico","modified":0,"renderable":0},{"_id":"source/assets/blogImg/wechat.jpg","path":"assets/blogImg/wechat.jpg","modified":0,"renderable":0},{"_id":"source/assets/blogImg/wechatpay.JPG","path":"assets/blogImg/wechatpay.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/170721.jpg","path":"assets/images/170721.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/170827.jpg","path":"assets/images/170827.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/170912_1.JPG","path":"assets/images/170912_1.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/170912_2.JPG","path":"assets/images/170912_2.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/170912_3.JPG","path":"assets/images/170912_3.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/170912_4.JPG","path":"assets/images/170912_4.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/170912_5.JPG","path":"assets/images/170912_5.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/170912_7.JPG","path":"assets/images/170912_7.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/170912_6.JPG","path":"assets/images/170912_6.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/170913_1.JPG","path":"assets/images/170913_1.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/170913_2.JPG","path":"assets/images/170913_2.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/170913_3.JPG","path":"assets/images/170913_3.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/170913_4.JPG","path":"assets/images/170913_4.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/170913_5.JPG","path":"assets/images/170913_5.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/170918_1.JPG","path":"assets/images/170918_1.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/170918_2.JPG","path":"assets/images/170918_2.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/170918_3.JPG","path":"assets/images/170918_3.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/170918_4.JPG","path":"assets/images/170918_4.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/170918_5.JPG","path":"assets/images/170918_5.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/170918_6.JPG","path":"assets/images/170918_6.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/170918_7.JPG","path":"assets/images/170918_7.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/170919_1.JPG","path":"assets/images/170919_1.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/170919_10.JPG","path":"assets/images/170919_10.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/170919_2.JPG","path":"assets/images/170919_2.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/170919_3.JPG","path":"assets/images/170919_3.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/170919_4.JPG","path":"assets/images/170919_4.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/170919_5.JPG","path":"assets/images/170919_5.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/170919_6.JPG","path":"assets/images/170919_6.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/170919_7.JPG","path":"assets/images/170919_7.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/170919_8.JPG","path":"assets/images/170919_8.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/170919_9.JPG","path":"assets/images/170919_9.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/170921_1.JPG","path":"assets/images/170921_1.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/170921_2.JPG","path":"assets/images/170921_2.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/170921_3.JPG","path":"assets/images/170921_3.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/170921_4.JPG","path":"assets/images/170921_4.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/171008.JPG","path":"assets/images/171008.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/171205.jpg","path":"assets/images/171205.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/170921_5.JPG","path":"assets/images/170921_5.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/170928.JPG","path":"assets/images/170928.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/171225.jpg","path":"assets/images/171225.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/180114_1.jpg","path":"assets/images/180114_1.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/180211_1.jpg","path":"assets/images/180211_1.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/180114_2.jpg","path":"assets/images/180114_2.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/180211_2.jpg","path":"assets/images/180211_2.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/180211_3.jpg","path":"assets/images/180211_3.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/180211_4.jpg","path":"assets/images/180211_4.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/180211_6.jpg","path":"assets/images/180211_6.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/180316.jpg","path":"assets/images/180316.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/180211_5.jpg","path":"assets/images/180211_5.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/180416.jpg","path":"assets/images/180416.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/180504_1.jpg","path":"assets/images/180504_1.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/180504_2.jpg","path":"assets/images/180504_2.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/180524_1.jpg","path":"assets/images/180524_1.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/180504_3.jpg","path":"assets/images/180504_3.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/180524_2.jpg","path":"assets/images/180524_2.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/180524_3.jpg","path":"assets/images/180524_3.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/180524_4.jpg","path":"assets/images/180524_4.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/180605_1.jpg","path":"assets/images/180605_1.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/180605_2.jpg","path":"assets/images/180605_2.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/180605_3.jpg","path":"assets/images/180605_3.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/180605_4.jpg","path":"assets/images/180605_4.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/181128.jpg","path":"assets/images/181128.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/181231.jpg","path":"assets/images/181231.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/190328_1.jpg","path":"assets/images/190328_1.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/190328_2.jpg","path":"assets/images/190328_2.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/190328_3.jpg","path":"assets/images/190328_3.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/190328_4.jpg","path":"assets/images/190328_4.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/190329_2.jpg","path":"assets/images/190329_2.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/190329_1.jpg","path":"assets/images/190329_1.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/191224_1.jpg","path":"assets/images/191224_1.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/191224_10.jpg","path":"assets/images/191224_10.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/191224_12.jpg","path":"assets/images/191224_12.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/191224_13.jpg","path":"assets/images/191224_13.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/191224_11.jpg","path":"assets/images/191224_11.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/191224_14.jpg","path":"assets/images/191224_14.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/191224_2.jpg","path":"assets/images/191224_2.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/191224_3.jpg","path":"assets/images/191224_3.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/191224_4.jpg","path":"assets/images/191224_4.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/191224_5.jpg","path":"assets/images/191224_5.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/191224_6.jpg","path":"assets/images/191224_6.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/191224_7.jpg","path":"assets/images/191224_7.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/191224_8.jpg","path":"assets/images/191224_8.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/191224_9.jpg","path":"assets/images/191224_9.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/200102_1.png","path":"assets/images/200102_1.png","modified":0,"renderable":0},{"_id":"source/assets/images/200102_2.jpg","path":"assets/images/200102_2.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/200102_3.jpg","path":"assets/images/200102_3.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/200113_1.jpg","path":"assets/images/200113_1.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/200113_2.jpg","path":"assets/images/200113_2.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/200113_5.jpg","path":"assets/images/200113_5.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/200113_4.jpg","path":"assets/images/200113_4.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/200630_1.jpg","path":"assets/images/200630_1.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/200113_3.jpg","path":"assets/images/200113_3.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/200630_2.jpg","path":"assets/images/200630_2.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/200630_3.jpg","path":"assets/images/200630_3.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/200630_4.jpg","path":"assets/images/200630_4.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/211121_2.jpg","path":"assets/images/211121_2.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/211121_1.jpg","path":"assets/images/211121_1.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/211121_3.jpg","path":"assets/images/211121_3.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/211128_1.jpg","path":"assets/images/211128_1.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/211128_2.jpg","path":"assets/images/211128_2.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/220225_1.jpg","path":"assets/images/220225_1.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/220225_2.jpg","path":"assets/images/220225_2.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/220225_3.jpg","path":"assets/images/220225_3.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/220225_4.jpg","path":"assets/images/220225_4.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/220423_1.JPG","path":"assets/images/220423_1.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/220423_2.JPG","path":"assets/images/220423_2.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/220423_3.JPG","path":"assets/images/220423_3.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/220423_4.JPG","path":"assets/images/220423_4.JPG","modified":0,"renderable":0},{"_id":"source/assets/images/220225_5.jpg","path":"assets/images/220225_5.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/220225_6.jpg","path":"assets/images/220225_6.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/images/apple-touch-icon-old.jpg","path":"images/apple-touch-icon-old.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-old.jpg","path":"images/favicon-16x16-old.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-old.jpg","path":"images/favicon-32x32-old.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/head-old.jpg","path":"images/head-old.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"67bdf4baf0e664c1ce9e76de203eea9228bf0b01","modified":1610791812000},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1636189850069},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1636189850069},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1636189850069},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1636189850084},{"_id":"themes/next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1636189850084},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1636189850084},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1636189850084},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1636189850084},{"_id":"themes/next/_config.yml","hash":"2758d7c21167eeaac70777b16b1bb80c90b90606","modified":1657203804704},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1636189850084},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1636189850084},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1636189850256},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1636189850069},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1636189850069},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1636189850069},{"_id":"themes/next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1636189850069},{"_id":"themes/next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1636189850069},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1636189850069},{"_id":"themes/next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1636189850069},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1636189850069},{"_id":"themes/next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1636189850069},{"_id":"themes/next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1636189850069},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1636189850069},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1636189850084},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1636189850084},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1636189850084},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1636189850084},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1636189850084},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1636189850084},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1636189850084},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1636189850084},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1636189850084},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1636189850084},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1636189850084},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1636189850084},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1636189850100},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1636189850100},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1636189850100},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1636189850100},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1636189850100},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1636189850100},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1636189850100},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1636189850100},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1636189850100},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1636189850100},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1636189850100},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1636189850100},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1636189850100},{"_id":"themes/next/languages/tr.yml","hash":"c4e9ab7e047ae13a19f147c6bec163c3ba2c6898","modified":1636189850100},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1636189850100},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1636189850100},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1636189850100},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1636189850100},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1636189850100},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1636189850100},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1636189850256},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1636189850256},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1636189850256},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1636189850256},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1636189850256},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1636189850256},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1636189850256},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1636189850069},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1636189850069},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1636189850069},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1636189850069},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1636189850084},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1636189850084},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1636189850084},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1636189850084},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1636189850084},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1636189850084},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1636189850084},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1636189850084},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1636189850084},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1636189850084},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1636189850084},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1636189850084},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1636189850084},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1636189850100},{"_id":"themes/next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1636189850100},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1636189850100},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1636189850100},{"_id":"themes/next/layout/_partials/footer.swig","hash":"e031914c98f082d918ece4c35fdd0a5be1c4e845","modified":1636189850100},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1636189850115},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1636189850115},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1636189850240},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1636189850240},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1636189850240},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1636189850240},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1636189850240},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1636189850240},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1636189850240},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1636189850240},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1636189850240},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1636189850240},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1636189850256},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1636189850256},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1636189850256},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1636189850256},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1636189850256},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1636189850256},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1636189850256},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1636189850256},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1636189850256},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1636189850256},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1636189850256},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1636189850256},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1636189850256},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1636189850256},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1636189850256},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1636189850272},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1636189850272},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1636189850272},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1636189850272},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1636189850272},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1636189850272},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1636189850287},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1636189850303},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1636189850303},{"_id":"themes/next/source/images/apple-touch-icon-next.jpg","hash":"91d59fb84dd0258a0ac5eca45a7786dfcfce015e","modified":1650701423703},{"_id":"themes/next/source/images/apple-touch-icon.jpg","hash":"d48ea313c710f0e5190760784417c435296c4382","modified":1657202881553},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1636189850303},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1636189850303},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1636189850303},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1636189850303},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1636189850303},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1636189850303},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1636189850303},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1636189850303},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1636189850303},{"_id":"themes/next/source/images/favicon-16x16.jpg","hash":"ee29e3d134cb96d90b392cdd793200443207e61b","modified":1657202760538},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1636189850303},{"_id":"themes/next/source/images/head-old.png","hash":"e2107695797699c0d67d34129d9d28f7e8cc094f","modified":1642492609352},{"_id":"themes/next/source/images/favicon-32x32.jpg","hash":"9ad35dff4fcda11145ebc96504b37364bd77c1fb","modified":1657202707959},{"_id":"themes/next/source/images/logo-old.svg","hash":"1cfa1d03f2589196b41fe82642ae6fba6350ba29","modified":1650701926711},{"_id":"themes/next/source/images/logo.svg","hash":"89fa1ef3066562802f2172e2760947c435fcbe61","modified":1657203060334},{"_id":"themes/next/source/images/head.jpg","hash":"abcddbba6ea37b3fd248d4c9afc06eff039d0315","modified":1656493260337},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1636189850319},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1636189850319},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1636189850319},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1636189850319},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1636189850319},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1636189850319},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1636189850319},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1636189850100},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1636189850100},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1636189850100},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1636189850100},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1636189850100},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1636189850115},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1636189850115},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1636189850115},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1636189850115},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1636189850225},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1636189850225},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1636189850225},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1636189850115},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1636189850115},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1636189850115},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1636189850115},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1636189850115},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1636189850225},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1636189850240},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1636189850240},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1636189850240},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1636189850240},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1636189850240},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1636189850240},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1636189850240},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1636189850240},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1636189850240},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1636189850240},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1636189850240},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1636189850240},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1636189850240},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1636189850240},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1636189850240},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1636189850240},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1636189850240},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1636189850240},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1636189850240},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1636189850240},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1636189850240},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1636189850240},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1636189850256},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1636189850256},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1636189850256},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1636189850256},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1636189850256},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1636189850256},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1636189850256},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1636189850256},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1636189850256},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1636189850256},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1636189850256},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1636189850256},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1636189850256},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1636189850256},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1636189850256},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1636189850256},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1636189850256},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1636189850256},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1636189850303},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1636189850256},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1636189850303},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1636189850303},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1636189850303},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1636189850303},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1636189850319},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1636189850319},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1636189850319},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1636189850319},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1636189850272},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1636189850272},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1636189850272},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1636189850272},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1636189850287},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1636189850287},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1636189850287},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1636189850287},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1636189850287},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1636189850287},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1636189850287},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1636189850287},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1636189850287},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1636189850287},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1636189850303},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1636189850303},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1636189850303},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1636189850303},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1636189850303},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1636189850303},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1636189850303},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1636189850303},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1636189850303},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1636189850303},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1636189850303},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1636189850303},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1636189850303},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1636189850303},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1636189850303},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1636189850303},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1636189850303},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1636189850303},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1636189850319},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1636189850319},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1636189850272},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1636189850272},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1636189850272},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1636189850272},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1636189850272},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1636189850272},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1636189850272},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1636189850272},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1636189850272},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1636189850272},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1636189850272},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1636189850272},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1636189850272},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1636189850272},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1636189850272},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1636189850272},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1636189850272},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1636189850272},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1636189850272},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1636189850272},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1636189850272},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1636189850272},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1636189850272},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1636189850272},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1636189850272},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1636189850272},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1636189850287},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1636189850287},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1636189850287},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1636189850287},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1636189850287},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1636189850287},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1636189850287},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1636189850287},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1636189850287},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1636189850287},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1636189850287},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1636189850287},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1636189850287},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1636189850287},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1636189850287},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1636189850287},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1636189850287},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1636189850287},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1636189850287},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1636189850287},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1636189850287},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1636189850287},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1636189850287},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1636189850287},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1636189850287},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1636189850287},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1636189850319},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1636189850319},{"_id":"public/2022/06/19/hello-world/index.html","hash":"5070e987d24b5c214e6ca2e015bb76f20a8e5057","modified":1655622037870},{"_id":"public/archives/index.html","hash":"0f553dcb00b17dc4a87c7aa6bef2e7831820228c","modified":1657203953046},{"_id":"public/archives/2022/index.html","hash":"7c1fcb3108e086c6bd0313268cf554bdd1b5e2d5","modified":1657203953046},{"_id":"public/archives/2022/06/index.html","hash":"0dee4d3deb780e9c2cd5a18781f2e6b288088a47","modified":1655622037870},{"_id":"public/index.html","hash":"645ccc2ccf3ca11d15196610024538506808f51a","modified":1657203953046},{"_id":"public/images/apple-touch-icon-next.jpg","hash":"91d59fb84dd0258a0ac5eca45a7786dfcfce015e","modified":1655621633626},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1655621633626},{"_id":"public/images/apple-touch-icon.jpg","hash":"d48ea313c710f0e5190760784417c435296c4382","modified":1657203148340},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1655621633626},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1655621633626},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1655621633626},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1655621633626},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1655621633626},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1655621633626},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1655621633626},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1655621633626},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1655621633626},{"_id":"public/images/favicon-16x16.jpg","hash":"ee29e3d134cb96d90b392cdd793200443207e61b","modified":1657203148340},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1655621633626},{"_id":"public/images/favicon-32x32.jpg","hash":"9ad35dff4fcda11145ebc96504b37364bd77c1fb","modified":1657203148340},{"_id":"public/images/head-old.png","hash":"e2107695797699c0d67d34129d9d28f7e8cc094f","modified":1655621633626},{"_id":"public/images/logo-old.svg","hash":"1cfa1d03f2589196b41fe82642ae6fba6350ba29","modified":1657203148340},{"_id":"public/images/logo.svg","hash":"89fa1ef3066562802f2172e2760947c435fcbe61","modified":1657203148340},{"_id":"public/images/head.jpg","hash":"abcddbba6ea37b3fd248d4c9afc06eff039d0315","modified":1657203148340},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1655621633626},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1655621633626},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1655621633626},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1655621633626},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1655621633626},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1655621633626},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1655621633626},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1655621633626},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1655621633626},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1655621633626},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1655621633626},{"_id":"public/css/main.css","hash":"fd4974f14306915f338997ee2280e2bd64af1b8e","modified":1655621633626},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1655621633626},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1655621633626},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1655621633626},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1655621633626},{"_id":"source/_posts/Excel函数-OFFSET.md","hash":"25781a8166a88bcf6ba63680bbeaa607976ed1ce","modified":1650703686713},{"_id":"source/_posts/GitHub简易指南.md","hash":"eb9bf8f78471ba61eca868e4c4c3cfe7a6dc92b6","modified":1638111092174},{"_id":"source/_posts/Hexo-Github博客搭建过程记录.md","hash":"fe99e930316df005ed4a3c778b49fb00f0d50adc","modified":1638110970332},{"_id":"source/_posts/Hyper-V中Manjaro-KDE的部分配置.md","hash":"fea65241768ac9c20573626925730a141c50992e","modified":1638111078701},{"_id":"source/_posts/VBA编程学习-子过程应用（排序）.md","hash":"cdb013e6f2fa8a7f7fcc4c70f2e2cf9e03b2aa71","modified":1646195328427},{"_id":"source/_posts/VBA编程学习-录制宏.md","hash":"8c8e5f75e509e4c361a08f6e0a1eeffbce0c627a","modified":1645771951371},{"_id":"source/_posts/一些常用MatLab画图指令.md","hash":"fe98972b0d28ce13908ce2b3ec9e2132949e2a6c","modified":1638110983477},{"_id":"source/_posts/三层交换机简单配置-VLAN模式.md","hash":"5719f01fa82c5a4c2877c4a072e29b7b82b55ef9","modified":1646194987297},{"_id":"source/_posts/修改SSH登陆端口及密码.md","hash":"b8c63d190eacd8fff9274a941a326128f5ac0d4d","modified":1638110990980},{"_id":"source/_posts/卸载顽固软件用得上.md","hash":"dfd211f0a8eebd3a97d4a5ec7b934624414e988f","modified":1638111002889},{"_id":"source/_posts/安全栅.md","hash":"f682790148454e2f6d0013daceae28f28b28047e","modified":1610791812000},{"_id":"source/_posts/三层交换机简单配置-网关模式.md","hash":"d3559cc9aba44281c945de60afb498fd7edf6fb6","modified":1646195019438},{"_id":"source/_posts/SS加速KCPTun篇.md","hash":"648b4260e65c8c7eda2c43136b6e361b65eaacfe","modified":1638111055488},{"_id":"source/_posts/Shadowsocks搭建.md","hash":"c39471f003298b75c874a0f475956aa9e7267afd","modified":1638111071945},{"_id":"source/_posts/工业现场信号传输.md","hash":"3996ed454b34e518a7691a62aff729d6a870e296","modified":1610791812000},{"_id":"source/_posts/更换Hexo博客部署方式.md","hash":"8ef216fc295f49554768bcba6f590037c96a2bc5","modified":1638110977594},{"_id":"source/_posts/笔记-吴恩达deeplearning之三.md","hash":"8a4c4e06b033b1675f3b80dfb0f79a4bc40be20b","modified":1638110930062},{"_id":"source/_posts/笔记-吴恩达deeplearning之二.md","hash":"f070b35ce266f2272053cbfe3d8ed0220712980f","modified":1638110937930},{"_id":"source/_posts/笔记-吴恩达deeplearning之一.md","hash":"79807ff4ccdf1a87aea2d96c1cba54ea5e714940","modified":1638110944005},{"_id":"source/_posts/笔记-吴恩达deeplearning之五.md","hash":"45bb3391778fb493fc7443551b06afcc031b7548","modified":1638110955297},{"_id":"source/_posts/笔记-吴恩达deeplearning之四.md","hash":"5e6cfb4c81f36cc713a66bf2b44455c9a6406b78","modified":1638110922524},{"_id":"source/_posts/粒子群算法.md","hash":"06706ab70a32e0312ade5ce956f9c4c96fc55808","modified":1610791812000},{"_id":"source/_posts/笔记-吴恩达deeplearning之六.md","hash":"afaa2ed37f35964a670ade6b3477839623f84467","modified":1638110962997},{"_id":"source/_posts/系统托管McAfee小图标消失的处理.md","hash":"066711eb1f44be67e1361a7382c6e20264cd37d0","modified":1638111010306},{"_id":"source/_posts/经验模态分解.md","hash":"e79fc4f7f810c723c1cd0fc5085ed2527dbc43a5","modified":1610791812000},{"_id":"source/_posts/给Hexo添加Valine评论.md","hash":"2cbef5b18df3f27c8f692ec5fcdba670ae085843","modified":1638111033912},{"_id":"source/_posts/纵横交叉算法.md","hash":"0403122fad90a451c26d8413f853b2d2b34e6371","modified":1636329642554},{"_id":"source/_posts/通过WinPE修改计算机本地密码.md","hash":"200670ef470fc53d04d98f979883c78782a9d43d","modified":1638111017281},{"_id":"source/tags/index.md","hash":"fa03903381c0445a3b3ef3bc3255bbedc2ba0da7","modified":1637499274159},{"_id":"source/assets/blogImg/favicon.ico","hash":"b4bcaec99ebc7a102c2eccf90e05f1de7cda4dd7","modified":1610791812000},{"_id":"source/assets/blogImg/alipay.JPG","hash":"0b92ee2b7e8c0700abf4abe8d78ee79ac37d2bf3","modified":1610791812000},{"_id":"source/assets/blogImg/QQ.JPG","hash":"e4128c8ef4d949d0820a0c4eabde523a720e56b3","modified":1610791812000},{"_id":"source/assets/blogImg/head.jpg","hash":"57cc5278336631e66f90e58b26854e2e0f0bb8b9","modified":1610791812000},{"_id":"source/assets/blogImg/head_备用1.jpg","hash":"896580189a34d6bd17f000c773514e123e33c7d6","modified":1610791812000},{"_id":"source/assets/blogImg/favicon_备用2.ico","hash":"987a51b152d7adec9bec94f53e21be3f5517d820","modified":1610791812000},{"_id":"source/assets/blogImg/head_备用2.png","hash":"728a44546b9dd84f07cef4e17e26fee9f4b0cf4e","modified":1610791812000},{"_id":"source/assets/blogImg/red_128px_1162122_easyicon.net.ico","hash":"987a51b152d7adec9bec94f53e21be3f5517d820","modified":1610791812000},{"_id":"source/assets/blogImg/wechat.jpg","hash":"1cdc9a93b4da7727deb8706259917814d8ec6ecd","modified":1610791812000},{"_id":"source/assets/images/170721.jpg","hash":"2a0480a57423ae41d6c513ad2100e7f09e736a29","modified":1610791812000},{"_id":"source/assets/blogImg/wechatpay.JPG","hash":"5b7ea0e080c1c4ca44030010bee662c9a00b335c","modified":1610791812000},{"_id":"source/assets/images/170912_1.JPG","hash":"f9938c54924482dfb501e544c9265c6c7bea791a","modified":1610791812000},{"_id":"source/assets/images/170912_2.JPG","hash":"65ff216c701cfeac34ae783567fb933936d781fd","modified":1610791812000},{"_id":"source/assets/images/170827.jpg","hash":"f672a50b7a6b2a014c40ca46bd90b78779387205","modified":1610791812000},{"_id":"source/assets/images/170912_3.JPG","hash":"bb90a6eedd04721ee452f066e4b7a68fb33dce73","modified":1610791812000},{"_id":"source/assets/images/170912_5.JPG","hash":"a8265213d3ac5d2825fa09ed94c83f6a241cba9b","modified":1610791812000},{"_id":"source/assets/images/170912_6.JPG","hash":"9885e326758e69c8e78d1b44d92cfee7857e8ad0","modified":1610791812000},{"_id":"source/assets/images/170912_7.JPG","hash":"c2a2300fb3aacbaa2ad9f8d7c310822256a476d0","modified":1610791812000},{"_id":"source/assets/images/170912_4.JPG","hash":"5cdb0457e3bfdec0933af8069a407a9095d28a30","modified":1610791812000},{"_id":"source/assets/images/170913_1.JPG","hash":"69385c588d3565fe9ec1c6542cb4796af11a3329","modified":1610791812000},{"_id":"source/assets/images/170913_4.JPG","hash":"f9e1d2eaed7c792d332a6ad215cc6c7d16108fec","modified":1610791812000},{"_id":"source/assets/images/170913_2.JPG","hash":"6a83b379f75400c3df04ea4cb8a8db46dd4e6ffa","modified":1610791812000},{"_id":"source/assets/images/170913_3.JPG","hash":"3d0ba6d1bc0510fb5d8b2c079af32da912800a6f","modified":1610791812000},{"_id":"source/assets/images/170918_2.JPG","hash":"9c628c70e00820f9566e197f4986ded2469fff7f","modified":1610791812000},{"_id":"source/assets/images/170918_3.JPG","hash":"58be668cfba9465a62a4c0b61cff8e2efeb55a4f","modified":1610791812000},{"_id":"source/assets/images/170913_5.JPG","hash":"25f214b3084d018ec56786c40ee38c0f7abf2be3","modified":1610791812000},{"_id":"source/assets/images/170918_1.JPG","hash":"2759b79f0a249a076f87b7cd03bf757992b8da91","modified":1610791812000},{"_id":"source/assets/images/170918_4.JPG","hash":"780cc0b7705430c7b84a4764040cd46b8d64ed2a","modified":1610791812000},{"_id":"source/assets/images/170918_6.JPG","hash":"fb6c7c5e2a1b6e2de262048952e348ec92d71418","modified":1610791812000},{"_id":"source/assets/images/170918_5.JPG","hash":"d53424a6f9680892c8e99cc679893d150b9468df","modified":1610791812000},{"_id":"source/assets/images/170918_7.JPG","hash":"fe220d429da58b191491089e6ef0ba0e6d608f4e","modified":1610791812000},{"_id":"source/assets/images/170919_3.JPG","hash":"574059fbd2b806b93a9d547a775ee2da21e3a5b5","modified":1610791812000},{"_id":"source/assets/images/170919_2.JPG","hash":"06b76f181a75e9703947a840c09971acbf7819a0","modified":1610791812000},{"_id":"source/assets/images/170919_1.JPG","hash":"b17ecd298b7f6891cf5c5d958f8f9ab9899b40a0","modified":1610791812000},{"_id":"source/assets/images/170919_10.JPG","hash":"1ef10e0113d2606e350597e0337ba6cc9759035a","modified":1610791812000},{"_id":"source/assets/images/170919_6.JPG","hash":"d1c0891e5a99b73f95828cdbf058fc65c19792d0","modified":1610791812000},{"_id":"source/assets/images/170919_5.JPG","hash":"986dde17faba23d32bd40d64d3c5a9f5c900b831","modified":1610791812000},{"_id":"source/assets/images/170919_7.JPG","hash":"b1124fe3f9911acd0f977119fe345bfaf40c974b","modified":1610791812000},{"_id":"source/assets/images/170919_4.JPG","hash":"a2a8f98d27e569c3d87abebc363551e64b921691","modified":1610791812000},{"_id":"source/assets/images/170919_8.JPG","hash":"4eb3946ea4d78960afd293b77f072ced9bbcdf8a","modified":1610791812000},{"_id":"source/assets/images/170919_9.JPG","hash":"192da5529da32f140d15d744269dda55a1c5fb0d","modified":1610791812000},{"_id":"source/assets/images/170921_1.JPG","hash":"86d4c62d748c76d43b5ee56d87283cafefe03699","modified":1610791812000},{"_id":"source/assets/images/170921_2.JPG","hash":"2903bc7354b27af014aeb912eb6cf8d94ca619c6","modified":1610791812000},{"_id":"source/assets/images/170921_4.JPG","hash":"ad22c4137e10135a82e024cc8151a1a1c4cad8b4","modified":1610791812000},{"_id":"source/assets/images/171008.JPG","hash":"1b1b93b94b07a226a626c87e096423caaed9235a","modified":1610791812000},{"_id":"source/assets/images/170921_3.JPG","hash":"e54e14a3deab9c1ed9878aff628f001020e9a570","modified":1610791812000},{"_id":"source/assets/images/170928.JPG","hash":"f9ff594445a61a26a3700eb2a746ea3efa85308a","modified":1610791812000},{"_id":"source/assets/images/170921_5.JPG","hash":"d435995e870581059dff640d2577b444032ec07f","modified":1610791812000},{"_id":"source/assets/images/180114_1.jpg","hash":"4e7e349e4a9bc150703e3b073052ad98820f2250","modified":1610791812000},{"_id":"source/assets/images/171225.jpg","hash":"c86441a4d492bdd95f287f86b046078babd3c41b","modified":1610791812000},{"_id":"source/assets/images/180211_1.jpg","hash":"3d72f8c38813056a099a487cd32006fc85f39f9c","modified":1610791812000},{"_id":"source/assets/images/180211_2.jpg","hash":"2bca6a2ff5ae2f7c151fcd916852c764a3e61474","modified":1610791812000},{"_id":"source/assets/images/180211_3.jpg","hash":"c17416b24bc6827f91f96d55d34cc6333b49e6ee","modified":1610791812000},{"_id":"source/assets/images/180211_6.jpg","hash":"81968eaed44e8d0baa40e0a1c998c79c1ae314da","modified":1610791812000},{"_id":"source/assets/images/180211_4.jpg","hash":"ca64e55fced73f901d7660f1080b1e6614737da7","modified":1610791812000},{"_id":"source/assets/images/180316.jpg","hash":"9a300adb7c33e8e6898c2efadc8e28a599bb01ca","modified":1610791812000},{"_id":"source/assets/images/180211_5.jpg","hash":"71d201e792f5d87207a07d06568d7219946cb4f0","modified":1610791812000},{"_id":"source/assets/images/180504_1.jpg","hash":"00b78847f6f1c3edf3909bcf04b5ec9ab9a531d3","modified":1610791812000},{"_id":"source/assets/images/180416.jpg","hash":"0e3c0bdfc9b14b7a4f8c33e8d3469a650d6bfe96","modified":1610791812000},{"_id":"source/assets/images/180504_2.jpg","hash":"c82ea8714ae188d389d755ce7c49311b6bacc9be","modified":1610791812000},{"_id":"source/assets/images/180524_1.jpg","hash":"0e3c0bdfc9b14b7a4f8c33e8d3469a650d6bfe96","modified":1610791812000},{"_id":"source/assets/images/180504_3.jpg","hash":"752f25236bf701e00e93f2b11c13e3f9813bdfae","modified":1610791812000},{"_id":"source/assets/images/180524_4.jpg","hash":"184617a098d2967c9b09cfa9ff7cf52d7c84a07a","modified":1610791812000},{"_id":"source/assets/images/180524_3.jpg","hash":"7ef6bc77f1855b9413be24ec5e71564aac60925c","modified":1610791812000},{"_id":"source/assets/images/180524_2.jpg","hash":"3e55972a5a3f6aea8e405a832e2e7e8c0c7ff362","modified":1610791812000},{"_id":"source/assets/images/180605_1.jpg","hash":"0e3c0bdfc9b14b7a4f8c33e8d3469a650d6bfe96","modified":1610791812000},{"_id":"source/assets/images/180605_4.jpg","hash":"c8f1eb6410bd737b8ac7e1bc91ffe3d9de3cb6d5","modified":1610791812000},{"_id":"source/assets/images/180605_3.jpg","hash":"b29d5c4eabdcb32cdb8aa71cc090f9cb2ea48439","modified":1610791812000},{"_id":"source/assets/images/180605_2.jpg","hash":"cfc4e51c3973cafcefb298d1a48e5c7167d2c1df","modified":1610791812000},{"_id":"source/assets/images/181128.jpg","hash":"0e33eb51848bf366736e2b5b92dbef1d55865f7e","modified":1610791812000},{"_id":"source/assets/images/190328_2.jpg","hash":"4b8879db7393948f4f0d2b2c3c27dad7c51cad21","modified":1610791812000},{"_id":"source/assets/images/190328_3.jpg","hash":"cd28c0ad7630fa7b4a1d5dce9f82f0514ae01feb","modified":1610791812000},{"_id":"source/assets/images/190329_2.jpg","hash":"201f9a6ad69d5bd53223a398bcb467233ecb4573","modified":1610791812000},{"_id":"source/assets/images/191224_1.jpg","hash":"3f21a2472926a2fb777655254202e55bf6d5cd6e","modified":1610791812000},{"_id":"source/assets/images/191224_12.jpg","hash":"20ed992c63162586948b01ef67cfe1e15b521a71","modified":1610791812000},{"_id":"source/assets/images/191224_13.jpg","hash":"d287fa4e9876c4ab04e67188059fe13915311f07","modified":1610791812000},{"_id":"source/assets/images/191224_10.jpg","hash":"1e156d958beb9c4390cb57fcb79437a7ef5200de","modified":1610791812000},{"_id":"source/assets/images/191224_14.jpg","hash":"2301d0040279a7a5d62865cb755a7afffb6d00f0","modified":1610791812000},{"_id":"source/assets/images/191224_11.jpg","hash":"4bf84fc8331595d308a39bdaf25097c55977e09c","modified":1610791812000},{"_id":"source/assets/images/191224_3.jpg","hash":"8c96c513777c0418b1144353c2f1df746092f004","modified":1610791812000},{"_id":"source/assets/images/191224_2.jpg","hash":"82794be98c5f8f1a57fd7032fcb9812ba20e7c36","modified":1610791812000},{"_id":"source/assets/images/191224_5.jpg","hash":"ad75537a3304e90cd4afec7ecfbac4cee1d2c448","modified":1610791812000},{"_id":"source/assets/images/191224_4.jpg","hash":"e77af8514b553b1507fe8b1c736eaa913077d877","modified":1610791812000},{"_id":"source/assets/images/191224_6.jpg","hash":"20ed992c63162586948b01ef67cfe1e15b521a71","modified":1610791812000},{"_id":"source/assets/images/191224_7.jpg","hash":"6587f9744cc6bfd07a661dfe96ea9f47d45395e2","modified":1610791812000},{"_id":"source/assets/images/191224_9.jpg","hash":"8c96c513777c0418b1144353c2f1df746092f004","modified":1610791812000},{"_id":"source/assets/images/191224_8.jpg","hash":"3b963c1590c2053fe97d8102044869fa28c50c25","modified":1610791812000},{"_id":"source/assets/images/200102_2.jpg","hash":"20fef3fbfe50177e11d95607f94ea55302d7d6ae","modified":1610791812000},{"_id":"source/assets/images/200102_3.jpg","hash":"ba8079c3a88f5cfc8889a24382e098aec54e7727","modified":1610791812000},{"_id":"source/assets/images/200113_1.jpg","hash":"9f7ab3f381e655ba3b6eeae4ed06c98eca4f7556","modified":1610791812000},{"_id":"source/assets/images/200113_2.jpg","hash":"bc65b3af5ec50c9fe95321d4fd167c6fe166f5d4","modified":1610791812000},{"_id":"source/assets/images/200113_5.jpg","hash":"edf202525bcf19e4b9e6ee3d61c8183694536c15","modified":1610791812000},{"_id":"source/assets/images/200113_4.jpg","hash":"123e4dc943b340ccc08176fcbfab747f8f62e528","modified":1610791812000},{"_id":"source/assets/images/200113_3.jpg","hash":"ca4974b16d2df111fe77e14c88fc9d618e76c3d1","modified":1610791812000},{"_id":"source/assets/images/200630_2.jpg","hash":"b3c59f556930acb3cdff83f9d9cffbc8351ee9a5","modified":1610791812000},{"_id":"source/assets/images/200630_3.jpg","hash":"7c7cd3a894d034a48bae72c7eefa22fc568dfa0a","modified":1610791812000},{"_id":"source/assets/images/200630_4.jpg","hash":"776043aac795bdc49c724684a86a91e5adfd65a4","modified":1610791812000},{"_id":"source/assets/images/220225_1.jpg","hash":"3a41a9a1868ddc3586be798e99fb8c7682821e00","modified":1645768605801},{"_id":"source/assets/images/220423_1.JPG","hash":"98c87f759345b74ceb34541224be612029f78906","modified":1650696310238},{"_id":"source/assets/images/220225_4.jpg","hash":"b4e1bb936fe09eb0dfa48be251af21fca7ecf29f","modified":1645768726956},{"_id":"source/assets/images/220225_2.jpg","hash":"305a5a5e72f91c07134757e4866bb07bcf7b4d82","modified":1645746718761},{"_id":"source/assets/images/220225_3.jpg","hash":"b987454228f97be0ff755f1113090d71b1c30346","modified":1645768672368},{"_id":"source/assets/images/220423_4.JPG","hash":"c32ab87199e062baaf58806f7ddbc23a943173a0","modified":1650698889715},{"_id":"source/assets/images/220423_2.JPG","hash":"323d014a9d971681bf40e485d319fae272521736","modified":1650697435413},{"_id":"source/assets/images/220423_3.JPG","hash":"4db5ef6cc0bd4104944b726ed0a66c5677413194","modified":1650698862192},{"_id":"source/assets/images/220225_5.jpg","hash":"d7c1c013d2986d18b0383df116810e0856bd02bb","modified":1645768826265},{"_id":"source/assets/images/220225_6.jpg","hash":"a77a70abd8a86fe974e080022562ecbaadbadd91","modified":1645768870515},{"_id":"source/assets/blogImg/favicon_备用1.ico","hash":"46d9774f8f06725ba615f17a7e037fbe10bbb74c","modified":1610791812000},{"_id":"source/assets/images/171205.jpg","hash":"519e5f558f1a96b46553c8d46465b31df50bf9ad","modified":1610791812000},{"_id":"source/assets/images/180114_2.jpg","hash":"26fe68c70a60e36c004e92d6ff99683558d6d43c","modified":1610791812000},{"_id":"source/assets/images/181231.jpg","hash":"ab97eafc29702869befeca640c68ae1c5dcc65a1","modified":1610791812000},{"_id":"source/assets/images/190328_1.jpg","hash":"e1e2035946962b59817515ffee3b0d8631cbc00b","modified":1610791812000},{"_id":"source/assets/images/190329_1.jpg","hash":"d6d445f99b879bb58b785e6098b5682a97a1cfa1","modified":1610791812000},{"_id":"source/assets/images/190328_4.jpg","hash":"8e32d00d413f25b3c7cdd795206053ecf95e398e","modified":1610791812000},{"_id":"source/assets/images/200630_1.jpg","hash":"e319fec3b3e774ace2a8017f52bcd333fff711f5","modified":1610791812000},{"_id":"source/assets/images/211121_2.jpg","hash":"2cc291da36bcafd0cee9d5a61b634f096276cf4f","modified":1637496846288},{"_id":"source/assets/images/211121_1.jpg","hash":"15867c3751e3e102e0378db8a5c44508cc7337c0","modified":1637496121350},{"_id":"source/assets/images/211121_3.jpg","hash":"806c94d26c96b26233f3760699f5d3c4c25da404","modified":1637497179220},{"_id":"source/assets/images/211128_1.jpg","hash":"a1032a86803c86b9e1401da0a5a1e379591f95a1","modified":1638104191805},{"_id":"source/assets/images/211128_2.jpg","hash":"721a5c001ad07981f14eacf343720680b14fc59d","modified":1638104706337},{"_id":"source/assets/images/200102_1.png","hash":"af239f08ad0f1d83d8fd192652d032068b977fcb","modified":1610791812000},{"_id":"public/tags/index.html","hash":"6dad9bb22efa2edeea0cd711512269c12cbd14e2","modified":1657203953046},{"_id":"public/2020/06/30/系统托管McAfee小图标消失的处理/index.html","hash":"fc21fe3d2504d5bf5b1d597078fca9f4d6d3f89f","modified":1657203953046},{"_id":"public/2020/06/29/更换Hexo博客部署方式/index.html","hash":"1c82079cf5d87d2587142b4d1aa69fd7b378da16","modified":1657203953046},{"_id":"public/2020/01/02/通过WinPE修改计算机本地密码/index.html","hash":"9d3ee0965c98d06389afa11c0f78f81c9d9dbb84","modified":1657203953046},{"_id":"public/2019/12/23/工业现场信号传输/index.html","hash":"835ddaf1351d735e4dcd58ff7bbbb28959b012f9","modified":1657203953046},{"_id":"public/2017/07/10/hello-world/index.html","hash":"ca87b3e0fd06b5708e0db616d691073ea5992d3a","modified":1657203953046},{"_id":"public/archives/page/3/index.html","hash":"a77f5cd4ae7f929217aab71246d68c2863833188","modified":1657203953046},{"_id":"public/archives/2017/index.html","hash":"d8b6423e258438cf4f05fa1af3fd945e7524b4a2","modified":1657203953046},{"_id":"public/archives/2017/07/index.html","hash":"57b09e65206ae4e2a8ab782a39efd41ca4e95cf7","modified":1657203953046},{"_id":"public/archives/2017/09/index.html","hash":"8a9ebe4676c99f115c0e521ca71431c3ce150e2c","modified":1657203953046},{"_id":"public/archives/2018/index.html","hash":"caf449306ef017b41a5d275189b053332a0cde1a","modified":1657203953046},{"_id":"public/archives/2018/02/index.html","hash":"c847bc330dd75a3d44402f50b79665822efb8a6d","modified":1657203953046},{"_id":"public/archives/2018/03/index.html","hash":"d55a0b6f04ac4d8018f3ba40d1010c95e111cb68","modified":1657203953046},{"_id":"public/archives/2018/04/index.html","hash":"42e8962b5ddf6ecac571f1d354aef45a6100bdba","modified":1657203953046},{"_id":"public/archives/2018/05/index.html","hash":"d04d231b90165c8d69f0c77907145acadca40149","modified":1657203953046},{"_id":"public/archives/2018/06/index.html","hash":"aeaff261f64a4779ee3be6b901d741c81670001d","modified":1657203953046},{"_id":"public/archives/2019/index.html","hash":"edecf0f3ef40b439fc68698fac3f9dae74bf1eb7","modified":1657203953046},{"_id":"public/archives/2019/03/index.html","hash":"c0d30f98b225a2307524993c1546d23914ea1b7d","modified":1657203953046},{"_id":"public/archives/2019/12/index.html","hash":"33a7495ccc7ff8f95bd5c80aa40632089d86459f","modified":1657203953046},{"_id":"public/archives/2020/index.html","hash":"f62431ae3c422c67fb5bf7e74ae767547c0e2524","modified":1657203953046},{"_id":"public/archives/2020/01/index.html","hash":"0bd3e37f160792ecbc557f364510351fe6c92b5f","modified":1657203953046},{"_id":"public/archives/2020/06/index.html","hash":"3ebea6446eac632f75a04bef313094e727db11d3","modified":1657203953046},{"_id":"public/archives/2020/12/index.html","hash":"3557ca565fe0183b8980dc52578c106f54755e62","modified":1657203953046},{"_id":"public/archives/2021/index.html","hash":"4b69604267058d348d3442ce50ca5540aea62b3f","modified":1657203953046},{"_id":"public/archives/2021/11/index.html","hash":"7216e723b373e841ef54da957d6b1ba6d31bb147","modified":1657203953046},{"_id":"public/archives/2022/02/index.html","hash":"37c61aba843301dcb11c98a74c7b0888e2361201","modified":1657203953046},{"_id":"public/archives/2022/03/index.html","hash":"364d125f265d229e3da8b6f9a165b8f6ea6d39ab","modified":1657203953046},{"_id":"public/archives/2022/04/index.html","hash":"9fa68cac83808f42007fc975caedd69f84a39299","modified":1657203953046},{"_id":"public/tags/教程/index.html","hash":"6ec7fb2064a36cc554b7a556d19d9ba511059fc0","modified":1657203953046},{"_id":"public/tags/GitHub/index.html","hash":"59f4a0328f8ab805168f5068943a22b96d0cc806","modified":1657203953046},{"_id":"public/tags/Hexo/index.html","hash":"a04e0a6cc76f78149b931311881428d091b38559","modified":1657203953046},{"_id":"public/tags/Manjaro/index.html","hash":"6acc97c05de821485ff04691f6730cbf1f75c8e4","modified":1657203953046},{"_id":"public/tags/shadowsock/index.html","hash":"9a3b93ea8b283b9af160e19c0f79ce389bd9e999","modified":1657203953046},{"_id":"public/tags/VBA/index.html","hash":"3d75c0546d35acd369375dcf9c6acfef145ff29f","modified":1657203953046},{"_id":"public/tags/MatLab/index.html","hash":"ab76578926309b4ee807bed1959e969050348bc0","modified":1657203953046},{"_id":"public/tags/交换机/index.html","hash":"31708375626e4abb70dab5ec659c357e49e2d853","modified":1657203953046},{"_id":"public/tags/VPS/index.html","hash":"daff1735d02610737d53efd210664b01626464a3","modified":1657203953046},{"_id":"public/tags/Windows/index.html","hash":"2c24344d29a899b4471c0ac7af49db1c659d152e","modified":1657203953046},{"_id":"public/tags/工程/index.html","hash":"f4dfe825b746b4136bd24bb9ac338b61f0617687","modified":1657203953046},{"_id":"public/tags/深度学习/index.html","hash":"b9eb4c5bca2bf333063e2d95a13ff7f7a46763f0","modified":1657203953046},{"_id":"public/tags/算法/index.html","hash":"0925e2b14d24de8a9a0e0459af07f832f544266a","modified":1657203953046},{"_id":"public/tags/McAfee/index.html","hash":"30f7c0d8c37b870cfafd8d420b6b10dbe57e4667","modified":1657203953046},{"_id":"public/2022/04/23/Excel函数-OFFSET/index.html","hash":"b0c24051dd8fc9f0724e57c27ad48368302ab389","modified":1657203953046},{"_id":"public/2022/03/02/VBA编程学习-子过程应用（排序）/index.html","hash":"e8453a6be1f81e34431bf94480a8d56c4786c06b","modified":1657203953046},{"_id":"public/2022/02/25/VBA编程学习-录制宏/index.html","hash":"ecbf8a0451f0978a47bbe00deb82477b63ecdc8a","modified":1657203953046},{"_id":"public/2021/11/28/三层交换机简单配置-VLAN模式/index.html","hash":"3f0e52d5e9298bed7508750b98e2ff2a7c841b8c","modified":1657203953046},{"_id":"public/2021/11/21/三层交换机简单配置-网关模式/index.html","hash":"dd8fc6eab10fc51fe2eb2142afea0169b29fa873","modified":1657203953046},{"_id":"public/2020/12/18/Hyper-V中Manjaro-KDE的部分配置/index.html","hash":"89535ebe0d51241b0a8f6deafe1aabacd425a9e0","modified":1657203953046},{"_id":"public/2020/01/13/给Hexo添加Valine评论/index.html","hash":"9a6e44dcbb31a9c3da7077142088fa9540facc4c","modified":1657203953046},{"_id":"public/2020/01/11/卸载顽固软件用得上/index.html","hash":"1fd5c3d8aed5d7abc53e3663ec067862c0ddec91","modified":1657203953046},{"_id":"public/2019/12/24/安全栅/index.html","hash":"edc16886a3015692c31d19f2de6f5f9d633399b3","modified":1657203953046},{"_id":"public/2019/03/29/修改SSH登陆端口及密码/index.html","hash":"8bb48534e9e4e8fd85c21ff153646857506a35ca","modified":1657203953046},{"_id":"public/2019/03/28/Shadowsocks搭建/index.html","hash":"0335e55182aa2550684182858b83411fc9553533","modified":1657203953046},{"_id":"public/2018/06/05/粒子群算法/index.html","hash":"cb0f32cd0276d82364c44ac39684959c798cb48a","modified":1657203953046},{"_id":"public/2018/05/24/纵横交叉算法/index.html","hash":"4a7af777d129f4e2967def8e11111b94384d5746","modified":1657203953046},{"_id":"public/2018/05/04/SS加速KCPTun篇/index.html","hash":"88fbf51325fd1e8ada4f495c83f3dde57ce9076a","modified":1657203953046},{"_id":"public/2018/04/16/经验模态分解/index.html","hash":"1f0642efbd772d1e30564a4c4d0b06e26a1d7ced","modified":1657203953046},{"_id":"public/2018/03/16/GitHub简易指南/index.html","hash":"acfbf0f58efb5895405124c8ef9fa57600927994","modified":1657203953046},{"_id":"public/2018/02/11/一些常用MatLab画图指令/index.html","hash":"ee201746f807964151c142dbe5a7a1c295687238","modified":1657203953046},{"_id":"public/2017/09/28/笔记-吴恩达deeplearning之六/index.html","hash":"2a05b86cd33f42fc551024185d3b997ff8f13cf8","modified":1657203953046},{"_id":"public/2017/09/21/笔记-吴恩达deeplearning之五/index.html","hash":"cc4b55a84dcba8ba3d61c6230cf8c81962deacf9","modified":1657203953046},{"_id":"public/2017/09/19/笔记-吴恩达deeplearning之四/index.html","hash":"58c09da62cceddf740d7700152f6180ae41cc88e","modified":1657203953046},{"_id":"public/2017/09/18/笔记-吴恩达deeplearning之三/index.html","hash":"00df9ff9915d65a55a00832e48bfe7a692b5029e","modified":1657203953046},{"_id":"public/2017/09/13/笔记-吴恩达deeplearning之二/index.html","hash":"7ef71e06e138cddb4cb4b20e4757730a9fa590ee","modified":1657203953046},{"_id":"public/2017/09/12/笔记-吴恩达deeplearning之一/index.html","hash":"e6627e8dc6cfe07013511f9d6736dc3ba34d996a","modified":1657203953046},{"_id":"public/2017/07/11/Hexo-Github博客搭建过程记录/index.html","hash":"922c57cc7d612ee44647048a1f3fd55178987485","modified":1657203953046},{"_id":"public/archives/page/2/index.html","hash":"a37a3393e0bfb2b81be3b5038b2674d3c37d224d","modified":1657203953046},{"_id":"public/page/2/index.html","hash":"780a6e51c1c6d8635b8cdaaa22614e49e75618f5","modified":1657203953046},{"_id":"public/page/3/index.html","hash":"12c4ab9299fec2bbbbd7a856b6ae15c94cbc8f6b","modified":1657203953046},{"_id":"public/assets/blogImg/QQ.JPG","hash":"e4128c8ef4d949d0820a0c4eabde523a720e56b3","modified":1655622236336},{"_id":"public/assets/blogImg/favicon.ico","hash":"b4bcaec99ebc7a102c2eccf90e05f1de7cda4dd7","modified":1655622236336},{"_id":"public/assets/blogImg/alipay.JPG","hash":"0b92ee2b7e8c0700abf4abe8d78ee79ac37d2bf3","modified":1655622236336},{"_id":"public/assets/blogImg/favicon_备用2.ico","hash":"987a51b152d7adec9bec94f53e21be3f5517d820","modified":1655622236336},{"_id":"public/assets/blogImg/head.jpg","hash":"57cc5278336631e66f90e58b26854e2e0f0bb8b9","modified":1655622236336},{"_id":"public/assets/blogImg/head_备用1.jpg","hash":"896580189a34d6bd17f000c773514e123e33c7d6","modified":1655622236336},{"_id":"public/assets/blogImg/red_128px_1162122_easyicon.net.ico","hash":"987a51b152d7adec9bec94f53e21be3f5517d820","modified":1655622236336},{"_id":"public/assets/blogImg/head_备用2.png","hash":"728a44546b9dd84f07cef4e17e26fee9f4b0cf4e","modified":1655622236336},{"_id":"public/assets/blogImg/wechat.jpg","hash":"1cdc9a93b4da7727deb8706259917814d8ec6ecd","modified":1655622236336},{"_id":"public/assets/images/170721.jpg","hash":"2a0480a57423ae41d6c513ad2100e7f09e736a29","modified":1655622236336},{"_id":"public/assets/images/170827.jpg","hash":"f672a50b7a6b2a014c40ca46bd90b78779387205","modified":1655622236336},{"_id":"public/assets/images/170912_2.JPG","hash":"65ff216c701cfeac34ae783567fb933936d781fd","modified":1655622236336},{"_id":"public/assets/images/170912_1.JPG","hash":"f9938c54924482dfb501e544c9265c6c7bea791a","modified":1655622236336},{"_id":"public/assets/images/170912_5.JPG","hash":"a8265213d3ac5d2825fa09ed94c83f6a241cba9b","modified":1655622236336},{"_id":"public/assets/blogImg/wechatpay.JPG","hash":"5b7ea0e080c1c4ca44030010bee662c9a00b335c","modified":1655622236336},{"_id":"public/assets/images/170912_3.JPG","hash":"bb90a6eedd04721ee452f066e4b7a68fb33dce73","modified":1655622236336},{"_id":"public/assets/images/170912_4.JPG","hash":"5cdb0457e3bfdec0933af8069a407a9095d28a30","modified":1655622236336},{"_id":"public/assets/images/170912_6.JPG","hash":"9885e326758e69c8e78d1b44d92cfee7857e8ad0","modified":1655622236336},{"_id":"public/assets/images/170912_7.JPG","hash":"c2a2300fb3aacbaa2ad9f8d7c310822256a476d0","modified":1655622236336},{"_id":"public/assets/images/170913_1.JPG","hash":"69385c588d3565fe9ec1c6542cb4796af11a3329","modified":1655622236336},{"_id":"public/assets/images/170913_2.JPG","hash":"6a83b379f75400c3df04ea4cb8a8db46dd4e6ffa","modified":1655622236336},{"_id":"public/assets/images/170913_3.JPG","hash":"3d0ba6d1bc0510fb5d8b2c079af32da912800a6f","modified":1655622236336},{"_id":"public/assets/images/170913_4.JPG","hash":"f9e1d2eaed7c792d332a6ad215cc6c7d16108fec","modified":1655622236336},{"_id":"public/assets/images/170913_5.JPG","hash":"25f214b3084d018ec56786c40ee38c0f7abf2be3","modified":1655622236336},{"_id":"public/assets/images/170918_1.JPG","hash":"2759b79f0a249a076f87b7cd03bf757992b8da91","modified":1655622236336},{"_id":"public/assets/images/170918_2.JPG","hash":"9c628c70e00820f9566e197f4986ded2469fff7f","modified":1655622236336},{"_id":"public/assets/images/170918_6.JPG","hash":"fb6c7c5e2a1b6e2de262048952e348ec92d71418","modified":1655622236336},{"_id":"public/assets/images/170918_7.JPG","hash":"fe220d429da58b191491089e6ef0ba0e6d608f4e","modified":1655622236336},{"_id":"public/assets/images/170918_4.JPG","hash":"780cc0b7705430c7b84a4764040cd46b8d64ed2a","modified":1655622236336},{"_id":"public/assets/images/170918_3.JPG","hash":"58be668cfba9465a62a4c0b61cff8e2efeb55a4f","modified":1655622236336},{"_id":"public/assets/images/170919_1.JPG","hash":"b17ecd298b7f6891cf5c5d958f8f9ab9899b40a0","modified":1655622236336},{"_id":"public/assets/images/170919_4.JPG","hash":"a2a8f98d27e569c3d87abebc363551e64b921691","modified":1655622236336},{"_id":"public/assets/images/170918_5.JPG","hash":"d53424a6f9680892c8e99cc679893d150b9468df","modified":1655622236336},{"_id":"public/assets/images/170919_2.JPG","hash":"06b76f181a75e9703947a840c09971acbf7819a0","modified":1655622236336},{"_id":"public/assets/images/170919_3.JPG","hash":"574059fbd2b806b93a9d547a775ee2da21e3a5b5","modified":1655622236336},{"_id":"public/assets/images/170919_10.JPG","hash":"1ef10e0113d2606e350597e0337ba6cc9759035a","modified":1655622236336},{"_id":"public/assets/images/170919_5.JPG","hash":"986dde17faba23d32bd40d64d3c5a9f5c900b831","modified":1655622236336},{"_id":"public/assets/images/170919_7.JPG","hash":"b1124fe3f9911acd0f977119fe345bfaf40c974b","modified":1655622236336},{"_id":"public/assets/images/170921_3.JPG","hash":"e54e14a3deab9c1ed9878aff628f001020e9a570","modified":1655622236336},{"_id":"public/assets/images/170921_1.JPG","hash":"86d4c62d748c76d43b5ee56d87283cafefe03699","modified":1655622236336},{"_id":"public/assets/images/170921_2.JPG","hash":"2903bc7354b27af014aeb912eb6cf8d94ca619c6","modified":1655622236336},{"_id":"public/assets/images/170919_9.JPG","hash":"192da5529da32f140d15d744269dda55a1c5fb0d","modified":1655622236336},{"_id":"public/assets/images/170919_8.JPG","hash":"4eb3946ea4d78960afd293b77f072ced9bbcdf8a","modified":1655622236336},{"_id":"public/assets/images/170919_6.JPG","hash":"d1c0891e5a99b73f95828cdbf058fc65c19792d0","modified":1655622236336},{"_id":"public/assets/images/171008.JPG","hash":"1b1b93b94b07a226a626c87e096423caaed9235a","modified":1655622236336},{"_id":"public/assets/images/170921_5.JPG","hash":"d435995e870581059dff640d2577b444032ec07f","modified":1655622236336},{"_id":"public/assets/images/170928.JPG","hash":"f9ff594445a61a26a3700eb2a746ea3efa85308a","modified":1655622236336},{"_id":"public/assets/images/170921_4.JPG","hash":"ad22c4137e10135a82e024cc8151a1a1c4cad8b4","modified":1655622236336},{"_id":"public/assets/images/180114_1.jpg","hash":"4e7e349e4a9bc150703e3b073052ad98820f2250","modified":1655622236336},{"_id":"public/assets/images/171225.jpg","hash":"c86441a4d492bdd95f287f86b046078babd3c41b","modified":1655622236336},{"_id":"public/assets/images/180211_1.jpg","hash":"3d72f8c38813056a099a487cd32006fc85f39f9c","modified":1655622236336},{"_id":"public/assets/images/180211_2.jpg","hash":"2bca6a2ff5ae2f7c151fcd916852c764a3e61474","modified":1655622236336},{"_id":"public/assets/images/180211_6.jpg","hash":"81968eaed44e8d0baa40e0a1c998c79c1ae314da","modified":1655622236336},{"_id":"public/assets/images/180211_3.jpg","hash":"c17416b24bc6827f91f96d55d34cc6333b49e6ee","modified":1655622236336},{"_id":"public/assets/images/180211_4.jpg","hash":"ca64e55fced73f901d7660f1080b1e6614737da7","modified":1655622236336},{"_id":"public/assets/images/180316.jpg","hash":"9a300adb7c33e8e6898c2efadc8e28a599bb01ca","modified":1655622236336},{"_id":"public/assets/images/180211_5.jpg","hash":"71d201e792f5d87207a07d06568d7219946cb4f0","modified":1655622236336},{"_id":"public/assets/images/180416.jpg","hash":"0e3c0bdfc9b14b7a4f8c33e8d3469a650d6bfe96","modified":1655622236336},{"_id":"public/assets/images/180504_2.jpg","hash":"c82ea8714ae188d389d755ce7c49311b6bacc9be","modified":1655622236336},{"_id":"public/assets/images/180524_1.jpg","hash":"0e3c0bdfc9b14b7a4f8c33e8d3469a650d6bfe96","modified":1655622236336},{"_id":"public/assets/images/180504_1.jpg","hash":"00b78847f6f1c3edf3909bcf04b5ec9ab9a531d3","modified":1655622236336},{"_id":"public/assets/images/180504_3.jpg","hash":"752f25236bf701e00e93f2b11c13e3f9813bdfae","modified":1655622236336},{"_id":"public/assets/images/180524_3.jpg","hash":"7ef6bc77f1855b9413be24ec5e71564aac60925c","modified":1655622236336},{"_id":"public/assets/images/180524_4.jpg","hash":"184617a098d2967c9b09cfa9ff7cf52d7c84a07a","modified":1655622236336},{"_id":"public/assets/images/180605_1.jpg","hash":"0e3c0bdfc9b14b7a4f8c33e8d3469a650d6bfe96","modified":1655622236336},{"_id":"public/assets/images/180605_2.jpg","hash":"cfc4e51c3973cafcefb298d1a48e5c7167d2c1df","modified":1655622236336},{"_id":"public/assets/images/180524_2.jpg","hash":"3e55972a5a3f6aea8e405a832e2e7e8c0c7ff362","modified":1655622236336},{"_id":"public/assets/images/180605_4.jpg","hash":"c8f1eb6410bd737b8ac7e1bc91ffe3d9de3cb6d5","modified":1655622236336},{"_id":"public/assets/images/181128.jpg","hash":"0e33eb51848bf366736e2b5b92dbef1d55865f7e","modified":1655622236336},{"_id":"public/assets/images/180605_3.jpg","hash":"b29d5c4eabdcb32cdb8aa71cc090f9cb2ea48439","modified":1655622236336},{"_id":"public/assets/images/190328_2.jpg","hash":"4b8879db7393948f4f0d2b2c3c27dad7c51cad21","modified":1655622236336},{"_id":"public/assets/images/190328_3.jpg","hash":"cd28c0ad7630fa7b4a1d5dce9f82f0514ae01feb","modified":1655622236336},{"_id":"public/assets/images/190329_2.jpg","hash":"201f9a6ad69d5bd53223a398bcb467233ecb4573","modified":1655622236336},{"_id":"public/assets/images/191224_1.jpg","hash":"3f21a2472926a2fb777655254202e55bf6d5cd6e","modified":1655622236336},{"_id":"public/assets/images/191224_10.jpg","hash":"1e156d958beb9c4390cb57fcb79437a7ef5200de","modified":1655622236336},{"_id":"public/assets/images/191224_12.jpg","hash":"20ed992c63162586948b01ef67cfe1e15b521a71","modified":1655622236336},{"_id":"public/assets/images/191224_13.jpg","hash":"d287fa4e9876c4ab04e67188059fe13915311f07","modified":1655622236336},{"_id":"public/assets/images/191224_11.jpg","hash":"4bf84fc8331595d308a39bdaf25097c55977e09c","modified":1655622236336},{"_id":"public/assets/images/191224_14.jpg","hash":"2301d0040279a7a5d62865cb755a7afffb6d00f0","modified":1655622236336},{"_id":"public/assets/images/191224_2.jpg","hash":"82794be98c5f8f1a57fd7032fcb9812ba20e7c36","modified":1655622236336},{"_id":"public/assets/images/191224_3.jpg","hash":"8c96c513777c0418b1144353c2f1df746092f004","modified":1655622236336},{"_id":"public/assets/images/191224_4.jpg","hash":"e77af8514b553b1507fe8b1c736eaa913077d877","modified":1655622236336},{"_id":"public/assets/images/191224_5.jpg","hash":"ad75537a3304e90cd4afec7ecfbac4cee1d2c448","modified":1655622236336},{"_id":"public/assets/images/191224_6.jpg","hash":"20ed992c63162586948b01ef67cfe1e15b521a71","modified":1655622236336},{"_id":"public/assets/images/191224_7.jpg","hash":"6587f9744cc6bfd07a661dfe96ea9f47d45395e2","modified":1655622236336},{"_id":"public/assets/images/191224_8.jpg","hash":"3b963c1590c2053fe97d8102044869fa28c50c25","modified":1655622236336},{"_id":"public/assets/images/200102_2.jpg","hash":"20fef3fbfe50177e11d95607f94ea55302d7d6ae","modified":1655622236336},{"_id":"public/assets/images/191224_9.jpg","hash":"8c96c513777c0418b1144353c2f1df746092f004","modified":1655622236336},{"_id":"public/assets/images/200102_3.jpg","hash":"ba8079c3a88f5cfc8889a24382e098aec54e7727","modified":1655622236336},{"_id":"public/assets/images/200113_5.jpg","hash":"edf202525bcf19e4b9e6ee3d61c8183694536c15","modified":1655622236336},{"_id":"public/assets/images/200113_2.jpg","hash":"bc65b3af5ec50c9fe95321d4fd167c6fe166f5d4","modified":1655622236336},{"_id":"public/assets/images/200113_4.jpg","hash":"123e4dc943b340ccc08176fcbfab747f8f62e528","modified":1655622236336},{"_id":"public/assets/images/200113_1.jpg","hash":"9f7ab3f381e655ba3b6eeae4ed06c98eca4f7556","modified":1655622236336},{"_id":"public/assets/images/200113_3.jpg","hash":"ca4974b16d2df111fe77e14c88fc9d618e76c3d1","modified":1655622236336},{"_id":"public/assets/images/200630_3.jpg","hash":"7c7cd3a894d034a48bae72c7eefa22fc568dfa0a","modified":1655622236336},{"_id":"public/assets/images/200630_4.jpg","hash":"776043aac795bdc49c724684a86a91e5adfd65a4","modified":1655622236336},{"_id":"public/assets/images/200630_2.jpg","hash":"b3c59f556930acb3cdff83f9d9cffbc8351ee9a5","modified":1655622236336},{"_id":"public/assets/images/220225_1.jpg","hash":"3a41a9a1868ddc3586be798e99fb8c7682821e00","modified":1655622236336},{"_id":"public/assets/images/220225_2.jpg","hash":"305a5a5e72f91c07134757e4866bb07bcf7b4d82","modified":1655622236336},{"_id":"public/assets/images/220225_3.jpg","hash":"b987454228f97be0ff755f1113090d71b1c30346","modified":1655622236336},{"_id":"public/assets/images/220423_1.JPG","hash":"98c87f759345b74ceb34541224be612029f78906","modified":1655622236336},{"_id":"public/assets/images/220423_2.JPG","hash":"323d014a9d971681bf40e485d319fae272521736","modified":1655622236336},{"_id":"public/assets/images/220225_4.jpg","hash":"b4e1bb936fe09eb0dfa48be251af21fca7ecf29f","modified":1655622236336},{"_id":"public/assets/images/220423_3.JPG","hash":"4db5ef6cc0bd4104944b726ed0a66c5677413194","modified":1655622236336},{"_id":"public/assets/images/220423_4.JPG","hash":"c32ab87199e062baaf58806f7ddbc23a943173a0","modified":1655622236336},{"_id":"public/assets/images/220225_6.jpg","hash":"a77a70abd8a86fe974e080022562ecbaadbadd91","modified":1655622236336},{"_id":"public/assets/images/220225_5.jpg","hash":"d7c1c013d2986d18b0383df116810e0856bd02bb","modified":1655622236336},{"_id":"public/assets/blogImg/favicon_备用1.ico","hash":"46d9774f8f06725ba615f17a7e037fbe10bbb74c","modified":1655622236336},{"_id":"public/assets/images/171205.jpg","hash":"519e5f558f1a96b46553c8d46465b31df50bf9ad","modified":1655622236336},{"_id":"public/assets/images/180114_2.jpg","hash":"26fe68c70a60e36c004e92d6ff99683558d6d43c","modified":1655622236336},{"_id":"public/assets/images/181231.jpg","hash":"ab97eafc29702869befeca640c68ae1c5dcc65a1","modified":1655622236336},{"_id":"public/assets/images/190328_1.jpg","hash":"e1e2035946962b59817515ffee3b0d8631cbc00b","modified":1655622236336},{"_id":"public/assets/images/190328_4.jpg","hash":"8e32d00d413f25b3c7cdd795206053ecf95e398e","modified":1655622236336},{"_id":"public/assets/images/190329_1.jpg","hash":"d6d445f99b879bb58b785e6098b5682a97a1cfa1","modified":1655622236336},{"_id":"public/assets/images/200630_1.jpg","hash":"e319fec3b3e774ace2a8017f52bcd333fff711f5","modified":1655622236336},{"_id":"public/assets/images/211121_2.jpg","hash":"2cc291da36bcafd0cee9d5a61b634f096276cf4f","modified":1655622236336},{"_id":"public/assets/images/211121_1.jpg","hash":"15867c3751e3e102e0378db8a5c44508cc7337c0","modified":1655622236336},{"_id":"public/assets/images/211121_3.jpg","hash":"806c94d26c96b26233f3760699f5d3c4c25da404","modified":1655622236336},{"_id":"public/assets/images/211128_1.jpg","hash":"a1032a86803c86b9e1401da0a5a1e379591f95a1","modified":1655622236336},{"_id":"public/assets/images/211128_2.jpg","hash":"721a5c001ad07981f14eacf343720680b14fc59d","modified":1655622236336},{"_id":"public/assets/images/200102_1.png","hash":"af239f08ad0f1d83d8fd192652d032068b977fcb","modified":1655622236336},{"_id":"themes/next/source/images/apple-touch-icon-old.jpg","hash":"91d59fb84dd0258a0ac5eca45a7786dfcfce015e","modified":1650701423703},{"_id":"themes/next/source/images/favicon-16x16-old.jpg","hash":"615d7a8da230cc001eb5f8636628f6398804cd3f","modified":1650701557235},{"_id":"themes/next/source/images/favicon-32x32-old.jpg","hash":"335eaeb5062ae488cc91ed1c60681013dd3c4c27","modified":1650701588890},{"_id":"themes/next/source/images/head-old.jpg","hash":"9d91736ef6460a4896f004d1690dc0b7617f9825","modified":1650701322699},{"_id":"public/images/apple-touch-icon-old.jpg","hash":"91d59fb84dd0258a0ac5eca45a7786dfcfce015e","modified":1657203148340},{"_id":"public/images/favicon-16x16-old.jpg","hash":"615d7a8da230cc001eb5f8636628f6398804cd3f","modified":1657203148340},{"_id":"public/images/head-old.jpg","hash":"9d91736ef6460a4896f004d1690dc0b7617f9825","modified":1657203148340},{"_id":"public/images/favicon-32x32-old.jpg","hash":"335eaeb5062ae488cc91ed1c60681013dd3c4c27","modified":1657203148340}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2021-11-07T10:49:08.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-11-07 18:49:08\ntype: \"tags\"\ncomments: false\n---\n","updated":"2021-11-21T12:54:34.159Z","path":"tags/index.html","layout":"page","_id":"cl4kyqfrj000020r586bq33rz","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hello World","date":"2017-07-10T07:32:22.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n<!--more--> \n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2017-07-10 15:32:22\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n<!--more--> \n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2021-01-16T10:10:12.000Z","_id":"cl4kydh3m0000z4r54ziu47jw","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<span id=\"more\"></span> \n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>","more":"<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>"},{"layout":"post","title":"Excel函数-OFFSET","comments":1,"date":"2022-04-23T08:00:52.000Z","_content":"OFFSET函数在[Microsoft说明](https://support.microsoft.com/zh-cn/office/offset-%E5%87%BD%E6%95%B0-c8de19ae-dd79-4b9b-a14e-b4d906d11b66)中的描述为：\n\n>返回对单元格或单元格区域中指定行数和列数的区域的引用。 返回的引用可以是单个单元格或单元格区域。 可以指定要返回的行数和列数。\n\n<!--more-->\n我在有需求把下图左侧这样统一格式，同一纵列的数据，按照下图右侧这样输出，可以方便比对同一科目的数据，通过搜索我发现了如下函数可以实现这一目的。\n```\n  =OFFSET($B$2,(ROW()-1)*5+COLUMN(A:A)-1,)\n```\n\n![](/assets/images/220423_1.JPG)\n这个函数可以这样理解：\n从B2单元格开始，ROW()返回当前行数，COLUMN(A:A)返回1，那么在第1行任意单元格键入该函数，ROW()返回1，相当于OFFSET($B$2,0,0)返回B2自身，向右拖动单元格时，A:A变成B:B，COLUMN(B):B)返回2,相当于OFFSET($B$2,1,0)返回B3，向下拖动单元格时，ROW()返回2，相当于OFFSET($B$2,5,0)返回B7，依次类推。\n\n至此我的目的是实现了，但函数实际语法还是不清楚，为了方便使用，需要了解一下这个OFFSET函数。\n\nOFFSET函数的语法是：OFFSET(reference, rows, cols, [height], [width])\nReference：要基于偏移量的引用。 引用必须引用单元格或相邻单元格区域;否则，OFFSET返回#VALUE！错误值。\nRows：需要左上角单元格引用的向上或向下行数。使用5作为rows参数，可指定引用中的左上角单元格为引用下方的5行。 \nRows 可为正数（这意味着在起始引用的下方）或负数（这意味着在起始引用的上方）。\nCols：需要结果的左上角单元格引用的从左到右的列数。 \n高度：需要返回的引用的行高。Height必须为正数。\n宽度：需要返回的引用的列宽。Width必须为正数。\n\n示例1：\n```\n  =OFFSET($B$2,2,0)\n```\n如下图示例，G4单元格的函数“=OFFSET($B$2,2,0)”指的是取从B2单元格开始，向下2行，向右0列的单元格的值。\n![示例1](/assets/images/220423_2.JPG)\n\n示例2：\n```\n  =OFFSET(B2,0,0,3,2)\n```\n加上后面两个可选参数的话，需要更改一下原始数据，如下图，E2单元格键入的函数“=OFFSET(B2,0,0,3,2)”指的是从B2单元格开始，向下0行，向右0列，取3行2列的值，会发现只是在E2单元格输入函数，但E2:F5单元格都出现了对应的值。\n![示例2](/assets/images/220423_3.JPG)\n\n示例3：\n```\n  =OFFSET($A$2,COLUMN(A1)-1,ROW(A1)-1)\n```\n回到一开始的问题，如下图，在E2单元格键入函数“=OFFSET($A$2,COLUMN(A1)-1,ROW(A1)-1)”中，$A$2相当于固定起始位置，COLUMN(A1)返回1，ROW(A1)返回1，E2单元格返回A2单元格开始，0行0列的值，即“=OFFSET($A$2,0，0）”。\n随着拖拽，右边F2单元格中A1变为A2，即“=OFFSET($A$2,1,0）”，右边E3单元格中A1变为B1，即=OFFSET($A$2,0,1），以此类推。\n![示例3](/assets/images/220423_4.JPG)\n\n以上，关于OFFSET的记录。\n","source":"_posts/Excel函数-OFFSET.md","raw":"---\nlayout: post\ntitle: Excel函数-OFFSET\ncomments: true\ntags:\n  - 教程\ndate: 2022-04-23 16:00:52\n---\nOFFSET函数在[Microsoft说明](https://support.microsoft.com/zh-cn/office/offset-%E5%87%BD%E6%95%B0-c8de19ae-dd79-4b9b-a14e-b4d906d11b66)中的描述为：\n\n>返回对单元格或单元格区域中指定行数和列数的区域的引用。 返回的引用可以是单个单元格或单元格区域。 可以指定要返回的行数和列数。\n\n<!--more-->\n我在有需求把下图左侧这样统一格式，同一纵列的数据，按照下图右侧这样输出，可以方便比对同一科目的数据，通过搜索我发现了如下函数可以实现这一目的。\n```\n  =OFFSET($B$2,(ROW()-1)*5+COLUMN(A:A)-1,)\n```\n\n![](/assets/images/220423_1.JPG)\n这个函数可以这样理解：\n从B2单元格开始，ROW()返回当前行数，COLUMN(A:A)返回1，那么在第1行任意单元格键入该函数，ROW()返回1，相当于OFFSET($B$2,0,0)返回B2自身，向右拖动单元格时，A:A变成B:B，COLUMN(B):B)返回2,相当于OFFSET($B$2,1,0)返回B3，向下拖动单元格时，ROW()返回2，相当于OFFSET($B$2,5,0)返回B7，依次类推。\n\n至此我的目的是实现了，但函数实际语法还是不清楚，为了方便使用，需要了解一下这个OFFSET函数。\n\nOFFSET函数的语法是：OFFSET(reference, rows, cols, [height], [width])\nReference：要基于偏移量的引用。 引用必须引用单元格或相邻单元格区域;否则，OFFSET返回#VALUE！错误值。\nRows：需要左上角单元格引用的向上或向下行数。使用5作为rows参数，可指定引用中的左上角单元格为引用下方的5行。 \nRows 可为正数（这意味着在起始引用的下方）或负数（这意味着在起始引用的上方）。\nCols：需要结果的左上角单元格引用的从左到右的列数。 \n高度：需要返回的引用的行高。Height必须为正数。\n宽度：需要返回的引用的列宽。Width必须为正数。\n\n示例1：\n```\n  =OFFSET($B$2,2,0)\n```\n如下图示例，G4单元格的函数“=OFFSET($B$2,2,0)”指的是取从B2单元格开始，向下2行，向右0列的单元格的值。\n![示例1](/assets/images/220423_2.JPG)\n\n示例2：\n```\n  =OFFSET(B2,0,0,3,2)\n```\n加上后面两个可选参数的话，需要更改一下原始数据，如下图，E2单元格键入的函数“=OFFSET(B2,0,0,3,2)”指的是从B2单元格开始，向下0行，向右0列，取3行2列的值，会发现只是在E2单元格输入函数，但E2:F5单元格都出现了对应的值。\n![示例2](/assets/images/220423_3.JPG)\n\n示例3：\n```\n  =OFFSET($A$2,COLUMN(A1)-1,ROW(A1)-1)\n```\n回到一开始的问题，如下图，在E2单元格键入函数“=OFFSET($A$2,COLUMN(A1)-1,ROW(A1)-1)”中，$A$2相当于固定起始位置，COLUMN(A1)返回1，ROW(A1)返回1，E2单元格返回A2单元格开始，0行0列的值，即“=OFFSET($A$2,0，0）”。\n随着拖拽，右边F2单元格中A1变为A2，即“=OFFSET($A$2,1,0）”，右边E3单元格中A1变为B1，即=OFFSET($A$2,0,1），以此类推。\n![示例3](/assets/images/220423_4.JPG)\n\n以上，关于OFFSET的记录。\n","slug":"Excel函数-OFFSET","published":1,"updated":"2022-04-23T08:48:06.713Z","photos":[],"link":"","_id":"cl4kyqfrx000120r5e62f4ue9","content":"<p>OFFSET函数在<a href=\"https://support.microsoft.com/zh-cn/office/offset-%E5%87%BD%E6%95%B0-c8de19ae-dd79-4b9b-a14e-b4d906d11b66\">Microsoft说明</a>中的描述为：</p>\n<blockquote>\n<p>返回对单元格或单元格区域中指定行数和列数的区域的引用。 返回的引用可以是单个单元格或单元格区域。 可以指定要返回的行数和列数。</p>\n</blockquote>\n<span id=\"more\"></span>\n<p>我在有需求把下图左侧这样统一格式，同一纵列的数据，按照下图右侧这样输出，可以方便比对同一科目的数据，通过搜索我发现了如下函数可以实现这一目的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=OFFSET($B$2,(ROW()-1)*5+COLUMN(A:A)-1,)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/assets/images/220423_1.JPG\"><br>这个函数可以这样理解：<br>从B2单元格开始，ROW()返回当前行数，COLUMN(A:A)返回1，那么在第1行任意单元格键入该函数，ROW()返回1，相当于OFFSET($B$2,0,0)返回B2自身，向右拖动单元格时，A:A变成B:B，COLUMN(B):B)返回2,相当于OFFSET($B$2,1,0)返回B3，向下拖动单元格时，ROW()返回2，相当于OFFSET($B$2,5,0)返回B7，依次类推。</p>\n<p>至此我的目的是实现了，但函数实际语法还是不清楚，为了方便使用，需要了解一下这个OFFSET函数。</p>\n<p>OFFSET函数的语法是：OFFSET(reference, rows, cols, [height], [width])<br>Reference：要基于偏移量的引用。 引用必须引用单元格或相邻单元格区域;否则，OFFSET返回#VALUE！错误值。<br>Rows：需要左上角单元格引用的向上或向下行数。使用5作为rows参数，可指定引用中的左上角单元格为引用下方的5行。<br>Rows 可为正数（这意味着在起始引用的下方）或负数（这意味着在起始引用的上方）。<br>Cols：需要结果的左上角单元格引用的从左到右的列数。<br>高度：需要返回的引用的行高。Height必须为正数。<br>宽度：需要返回的引用的列宽。Width必须为正数。</p>\n<p>示例1：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=OFFSET($B$2,2,0)</span><br></pre></td></tr></table></figure>\n<p>如下图示例，G4单元格的函数“=OFFSET($B$2,2,0)”指的是取从B2单元格开始，向下2行，向右0列的单元格的值。<br><img src=\"/assets/images/220423_2.JPG\" alt=\"示例1\"></p>\n<p>示例2：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=OFFSET(B2,0,0,3,2)</span><br></pre></td></tr></table></figure>\n<p>加上后面两个可选参数的话，需要更改一下原始数据，如下图，E2单元格键入的函数“=OFFSET(B2,0,0,3,2)”指的是从B2单元格开始，向下0行，向右0列，取3行2列的值，会发现只是在E2单元格输入函数，但E2:F5单元格都出现了对应的值。<br><img src=\"/assets/images/220423_3.JPG\" alt=\"示例2\"></p>\n<p>示例3：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=OFFSET($A$2,COLUMN(A1)-1,ROW(A1)-1)</span><br></pre></td></tr></table></figure>\n<p>回到一开始的问题，如下图，在E2单元格键入函数“=OFFSET($A$2,COLUMN(A1)-1,ROW(A1)-1)”中，$A$2相当于固定起始位置，COLUMN(A1)返回1，ROW(A1)返回1，E2单元格返回A2单元格开始，0行0列的值，即“=OFFSET($A$2,0，0）”。<br>随着拖拽，右边F2单元格中A1变为A2，即“=OFFSET($A$2,1,0）”，右边E3单元格中A1变为B1，即=OFFSET($A$2,0,1），以此类推。<br><img src=\"/assets/images/220423_4.JPG\" alt=\"示例3\"></p>\n<p>以上，关于OFFSET的记录。</p>\n","site":{"data":{}},"excerpt":"<p>OFFSET函数在<a href=\"https://support.microsoft.com/zh-cn/office/offset-%E5%87%BD%E6%95%B0-c8de19ae-dd79-4b9b-a14e-b4d906d11b66\">Microsoft说明</a>中的描述为：</p>\n<blockquote>\n<p>返回对单元格或单元格区域中指定行数和列数的区域的引用。 返回的引用可以是单个单元格或单元格区域。 可以指定要返回的行数和列数。</p>\n</blockquote>","more":"<p>我在有需求把下图左侧这样统一格式，同一纵列的数据，按照下图右侧这样输出，可以方便比对同一科目的数据，通过搜索我发现了如下函数可以实现这一目的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=OFFSET($B$2,(ROW()-1)*5+COLUMN(A:A)-1,)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/assets/images/220423_1.JPG\"><br>这个函数可以这样理解：<br>从B2单元格开始，ROW()返回当前行数，COLUMN(A:A)返回1，那么在第1行任意单元格键入该函数，ROW()返回1，相当于OFFSET($B$2,0,0)返回B2自身，向右拖动单元格时，A:A变成B:B，COLUMN(B):B)返回2,相当于OFFSET($B$2,1,0)返回B3，向下拖动单元格时，ROW()返回2，相当于OFFSET($B$2,5,0)返回B7，依次类推。</p>\n<p>至此我的目的是实现了，但函数实际语法还是不清楚，为了方便使用，需要了解一下这个OFFSET函数。</p>\n<p>OFFSET函数的语法是：OFFSET(reference, rows, cols, [height], [width])<br>Reference：要基于偏移量的引用。 引用必须引用单元格或相邻单元格区域;否则，OFFSET返回#VALUE！错误值。<br>Rows：需要左上角单元格引用的向上或向下行数。使用5作为rows参数，可指定引用中的左上角单元格为引用下方的5行。<br>Rows 可为正数（这意味着在起始引用的下方）或负数（这意味着在起始引用的上方）。<br>Cols：需要结果的左上角单元格引用的从左到右的列数。<br>高度：需要返回的引用的行高。Height必须为正数。<br>宽度：需要返回的引用的列宽。Width必须为正数。</p>\n<p>示例1：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=OFFSET($B$2,2,0)</span><br></pre></td></tr></table></figure>\n<p>如下图示例，G4单元格的函数“=OFFSET($B$2,2,0)”指的是取从B2单元格开始，向下2行，向右0列的单元格的值。<br><img src=\"/assets/images/220423_2.JPG\" alt=\"示例1\"></p>\n<p>示例2：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=OFFSET(B2,0,0,3,2)</span><br></pre></td></tr></table></figure>\n<p>加上后面两个可选参数的话，需要更改一下原始数据，如下图，E2单元格键入的函数“=OFFSET(B2,0,0,3,2)”指的是从B2单元格开始，向下0行，向右0列，取3行2列的值，会发现只是在E2单元格输入函数，但E2:F5单元格都出现了对应的值。<br><img src=\"/assets/images/220423_3.JPG\" alt=\"示例2\"></p>\n<p>示例3：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=OFFSET($A$2,COLUMN(A1)-1,ROW(A1)-1)</span><br></pre></td></tr></table></figure>\n<p>回到一开始的问题，如下图，在E2单元格键入函数“=OFFSET($A$2,COLUMN(A1)-1,ROW(A1)-1)”中，$A$2相当于固定起始位置，COLUMN(A1)返回1，ROW(A1)返回1，E2单元格返回A2单元格开始，0行0列的值，即“=OFFSET($A$2,0，0）”。<br>随着拖拽，右边F2单元格中A1变为A2，即“=OFFSET($A$2,1,0）”，右边E3单元格中A1变为B1，即=OFFSET($A$2,0,1），以此类推。<br><img src=\"/assets/images/220423_4.JPG\" alt=\"示例3\"></p>\n<p>以上，关于OFFSET的记录。</p>"},{"layout":"post","title":"GitHub简易指南","comments":1,"date":"2018-03-16T00:46:40.000Z","_content":"![](/assets/images/180316.jpg)\n前几天知名帅哥stormzhang在其公众号共享了一份程序员大礼包，\n即各种教程的PDF文档，其中有一篇《从0开始学习GitHub系列》，\n记录其中的常用命令行指令，以便日后查阅。\n<!--more-->\n## GitHub和Git的区别\nGitHub是一个基于Git的开源代码托管社区，即可以通过Git来将代码上传到GitHub云端，或者将GitHub云端的程序下载到本地进行修改的一个服务。\nGit是一个分布式版本控制器，即一个代码管理工具，用法如同步代码、查看更改、代码还原等。用前需安装。\n\n## Git本地命令\n\n``` bash\n$ git init   #初始化Git仓库\n```\n``` bash\n$ git status   #查看Git仓库当前状态\n```\n``` bash\n$ git add readme.md    #将readme.md文件放入暂存区，等待提交\n```\n``` bash\n$ git commit -m \"first\"    #提交暂存区的文件，并注释为first，-m代表提交信息\n```\n``` bash\n$ git log   #查看所有提交记录\n```\n``` bash\n$ git branch develop   #新建名为develop的分支\n```\n``` bash\n$ git checkout develop   #切换到develop分支\n```\n``` bash\n$ git checkout -b develop   #新建的同时转到develop分支\n```\n``` bash\n$ git merge develop    #将develop分支合并到当前分支\n```\n``` bash\n$ git branch -d develop   #删除develop分支\n```\n``` bash\n$ git branch -D develop   #强制删除develop分支\n```\n``` bash\n$ git tag v1.0   #贴一个名为v1.0的标签\n```\n``` bash\n$ git checkout v1.0   #切换到v1.0标签\n```\n\n## Git同步命令\n``` bash\n$ ssh-keygen -t rsa   #生成密钥\n```\n通过密钥链接本地与GitHub仓库，连按三次回车，生成密钥id_rsa和公钥id_rsa.pub，将公钥添加到GitHub。\n``` bash\ngit config —global user.name \"用户名\"\ngit config —global user.email \"邮箱\"\n```\n设置自己的用户名与邮箱，信息会出现在所有的提交记录里。\n``` bash\n$ git push origin master   #将本地代码推到GitHub中默认分支\n```\n``` bash\n$ git pull origin master   #将GitHub默认分支中代码更新到本地\n```\n``` bash\n$ git diff   #查看当前文件和暂存区文件差异，\n$ git diff <$id1> <$id2>   #比较两次提交之间的差异\n$ git diff <branch1>..<branch2>   #在两个分支之间比较\n$ git diff --staged   #比较暂存区和版本库差异\n```\n``` bash\n$ git stash   #暂存没有提交的代码\n```\n``` bash\n$ git stash list   #查看暂存区记录\n```\n``` bash\n$ git stash   #查看暂存区记录\n```\n``` bash\n$ git stash apply   #还原代码\n```\n``` bash\n$ git stash drop   #删除暂存区记录\n```\n``` bash\n$ git stash clear   #清空所有暂存区记录\n```\n``` bash\n$ git rebase featureA   #合并代码\n```\n\n## GitHub简单用法\n1. 创建仓库；\n2. 下载到本地；\n3. 修改文件；\n4. add到暂存区；\n5. commit提交；\n6. push到GitHub。","source":"_posts/GitHub简易指南.md","raw":"---\nlayout: post\ntitle: GitHub简易指南\ncomments: true\ndate: 2018-03-16 08:46:40\ntags:\n- GitHub\n---\n![](/assets/images/180316.jpg)\n前几天知名帅哥stormzhang在其公众号共享了一份程序员大礼包，\n即各种教程的PDF文档，其中有一篇《从0开始学习GitHub系列》，\n记录其中的常用命令行指令，以便日后查阅。\n<!--more-->\n## GitHub和Git的区别\nGitHub是一个基于Git的开源代码托管社区，即可以通过Git来将代码上传到GitHub云端，或者将GitHub云端的程序下载到本地进行修改的一个服务。\nGit是一个分布式版本控制器，即一个代码管理工具，用法如同步代码、查看更改、代码还原等。用前需安装。\n\n## Git本地命令\n\n``` bash\n$ git init   #初始化Git仓库\n```\n``` bash\n$ git status   #查看Git仓库当前状态\n```\n``` bash\n$ git add readme.md    #将readme.md文件放入暂存区，等待提交\n```\n``` bash\n$ git commit -m \"first\"    #提交暂存区的文件，并注释为first，-m代表提交信息\n```\n``` bash\n$ git log   #查看所有提交记录\n```\n``` bash\n$ git branch develop   #新建名为develop的分支\n```\n``` bash\n$ git checkout develop   #切换到develop分支\n```\n``` bash\n$ git checkout -b develop   #新建的同时转到develop分支\n```\n``` bash\n$ git merge develop    #将develop分支合并到当前分支\n```\n``` bash\n$ git branch -d develop   #删除develop分支\n```\n``` bash\n$ git branch -D develop   #强制删除develop分支\n```\n``` bash\n$ git tag v1.0   #贴一个名为v1.0的标签\n```\n``` bash\n$ git checkout v1.0   #切换到v1.0标签\n```\n\n## Git同步命令\n``` bash\n$ ssh-keygen -t rsa   #生成密钥\n```\n通过密钥链接本地与GitHub仓库，连按三次回车，生成密钥id_rsa和公钥id_rsa.pub，将公钥添加到GitHub。\n``` bash\ngit config —global user.name \"用户名\"\ngit config —global user.email \"邮箱\"\n```\n设置自己的用户名与邮箱，信息会出现在所有的提交记录里。\n``` bash\n$ git push origin master   #将本地代码推到GitHub中默认分支\n```\n``` bash\n$ git pull origin master   #将GitHub默认分支中代码更新到本地\n```\n``` bash\n$ git diff   #查看当前文件和暂存区文件差异，\n$ git diff <$id1> <$id2>   #比较两次提交之间的差异\n$ git diff <branch1>..<branch2>   #在两个分支之间比较\n$ git diff --staged   #比较暂存区和版本库差异\n```\n``` bash\n$ git stash   #暂存没有提交的代码\n```\n``` bash\n$ git stash list   #查看暂存区记录\n```\n``` bash\n$ git stash   #查看暂存区记录\n```\n``` bash\n$ git stash apply   #还原代码\n```\n``` bash\n$ git stash drop   #删除暂存区记录\n```\n``` bash\n$ git stash clear   #清空所有暂存区记录\n```\n``` bash\n$ git rebase featureA   #合并代码\n```\n\n## GitHub简单用法\n1. 创建仓库；\n2. 下载到本地；\n3. 修改文件；\n4. add到暂存区；\n5. commit提交；\n6. push到GitHub。","slug":"GitHub简易指南","published":1,"updated":"2021-11-28T14:51:32.174Z","photos":[],"link":"","_id":"cl4kyqfs9000220r56m6zfc7d","content":"<p><img src=\"/assets/images/180316.jpg\"><br>前几天知名帅哥stormzhang在其公众号共享了一份程序员大礼包，<br>即各种教程的PDF文档，其中有一篇《从0开始学习GitHub系列》，<br>记录其中的常用命令行指令，以便日后查阅。</p>\n<span id=\"more\"></span>\n<h2 id=\"GitHub和Git的区别\"><a href=\"#GitHub和Git的区别\" class=\"headerlink\" title=\"GitHub和Git的区别\"></a>GitHub和Git的区别</h2><p>GitHub是一个基于Git的开源代码托管社区，即可以通过Git来将代码上传到GitHub云端，或者将GitHub云端的程序下载到本地进行修改的一个服务。<br>Git是一个分布式版本控制器，即一个代码管理工具，用法如同步代码、查看更改、代码还原等。用前需安装。</p>\n<h2 id=\"Git本地命令\"><a href=\"#Git本地命令\" class=\"headerlink\" title=\"Git本地命令\"></a>Git本地命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init   <span class=\"comment\">#初始化Git仓库</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status   <span class=\"comment\">#查看Git仓库当前状态</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add readme.md    <span class=\"comment\">#将readme.md文件放入暂存区，等待提交</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m <span class=\"string\">&quot;first&quot;</span>    <span class=\"comment\">#提交暂存区的文件，并注释为first，-m代表提交信息</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span>   <span class=\"comment\">#查看所有提交记录</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch develop   <span class=\"comment\">#新建名为develop的分支</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout develop   <span class=\"comment\">#切换到develop分支</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b develop   <span class=\"comment\">#新建的同时转到develop分支</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git merge develop    <span class=\"comment\">#将develop分支合并到当前分支</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -d develop   <span class=\"comment\">#删除develop分支</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -D develop   <span class=\"comment\">#强制删除develop分支</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag v1.0   <span class=\"comment\">#贴一个名为v1.0的标签</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout v1.0   <span class=\"comment\">#切换到v1.0标签</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Git同步命令\"><a href=\"#Git同步命令\" class=\"headerlink\" title=\"Git同步命令\"></a>Git同步命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa   <span class=\"comment\">#生成密钥</span></span><br></pre></td></tr></table></figure>\n<p>通过密钥链接本地与GitHub仓库，连按三次回车，生成密钥id_rsa和公钥id_rsa.pub，将公钥添加到GitHub。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config —global user.name <span class=\"string\">&quot;用户名&quot;</span></span><br><span class=\"line\">git config —global user.email <span class=\"string\">&quot;邮箱&quot;</span></span><br></pre></td></tr></table></figure>\n<p>设置自己的用户名与邮箱，信息会出现在所有的提交记录里。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin master   <span class=\"comment\">#将本地代码推到GitHub中默认分支</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull origin master   <span class=\"comment\">#将GitHub默认分支中代码更新到本地</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff   <span class=\"comment\">#查看当前文件和暂存区文件差异，</span></span><br><span class=\"line\">$ git diff &lt;<span class=\"variable\">$id1</span>&gt; &lt;<span class=\"variable\">$id2</span>&gt;   <span class=\"comment\">#比较两次提交之间的差异</span></span><br><span class=\"line\">$ git diff &lt;branch1&gt;..&lt;branch2&gt;   <span class=\"comment\">#在两个分支之间比较</span></span><br><span class=\"line\">$ git diff --staged   <span class=\"comment\">#比较暂存区和版本库差异</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash   <span class=\"comment\">#暂存没有提交的代码</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash list   <span class=\"comment\">#查看暂存区记录</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash   <span class=\"comment\">#查看暂存区记录</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash apply   <span class=\"comment\">#还原代码</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash drop   <span class=\"comment\">#删除暂存区记录</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash clear   <span class=\"comment\">#清空所有暂存区记录</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rebase featureA   <span class=\"comment\">#合并代码</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"GitHub简单用法\"><a href=\"#GitHub简单用法\" class=\"headerlink\" title=\"GitHub简单用法\"></a>GitHub简单用法</h2><ol>\n<li>创建仓库；</li>\n<li>下载到本地；</li>\n<li>修改文件；</li>\n<li>add到暂存区；</li>\n<li>commit提交；</li>\n<li>push到GitHub。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p><img src=\"/assets/images/180316.jpg\"><br>前几天知名帅哥stormzhang在其公众号共享了一份程序员大礼包，<br>即各种教程的PDF文档，其中有一篇《从0开始学习GitHub系列》，<br>记录其中的常用命令行指令，以便日后查阅。</p>","more":"<h2 id=\"GitHub和Git的区别\"><a href=\"#GitHub和Git的区别\" class=\"headerlink\" title=\"GitHub和Git的区别\"></a>GitHub和Git的区别</h2><p>GitHub是一个基于Git的开源代码托管社区，即可以通过Git来将代码上传到GitHub云端，或者将GitHub云端的程序下载到本地进行修改的一个服务。<br>Git是一个分布式版本控制器，即一个代码管理工具，用法如同步代码、查看更改、代码还原等。用前需安装。</p>\n<h2 id=\"Git本地命令\"><a href=\"#Git本地命令\" class=\"headerlink\" title=\"Git本地命令\"></a>Git本地命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init   <span class=\"comment\">#初始化Git仓库</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status   <span class=\"comment\">#查看Git仓库当前状态</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add readme.md    <span class=\"comment\">#将readme.md文件放入暂存区，等待提交</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m <span class=\"string\">&quot;first&quot;</span>    <span class=\"comment\">#提交暂存区的文件，并注释为first，-m代表提交信息</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span>   <span class=\"comment\">#查看所有提交记录</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch develop   <span class=\"comment\">#新建名为develop的分支</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout develop   <span class=\"comment\">#切换到develop分支</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b develop   <span class=\"comment\">#新建的同时转到develop分支</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git merge develop    <span class=\"comment\">#将develop分支合并到当前分支</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -d develop   <span class=\"comment\">#删除develop分支</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -D develop   <span class=\"comment\">#强制删除develop分支</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag v1.0   <span class=\"comment\">#贴一个名为v1.0的标签</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout v1.0   <span class=\"comment\">#切换到v1.0标签</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Git同步命令\"><a href=\"#Git同步命令\" class=\"headerlink\" title=\"Git同步命令\"></a>Git同步命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa   <span class=\"comment\">#生成密钥</span></span><br></pre></td></tr></table></figure>\n<p>通过密钥链接本地与GitHub仓库，连按三次回车，生成密钥id_rsa和公钥id_rsa.pub，将公钥添加到GitHub。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config —global user.name <span class=\"string\">&quot;用户名&quot;</span></span><br><span class=\"line\">git config —global user.email <span class=\"string\">&quot;邮箱&quot;</span></span><br></pre></td></tr></table></figure>\n<p>设置自己的用户名与邮箱，信息会出现在所有的提交记录里。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin master   <span class=\"comment\">#将本地代码推到GitHub中默认分支</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull origin master   <span class=\"comment\">#将GitHub默认分支中代码更新到本地</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff   <span class=\"comment\">#查看当前文件和暂存区文件差异，</span></span><br><span class=\"line\">$ git diff &lt;<span class=\"variable\">$id1</span>&gt; &lt;<span class=\"variable\">$id2</span>&gt;   <span class=\"comment\">#比较两次提交之间的差异</span></span><br><span class=\"line\">$ git diff &lt;branch1&gt;..&lt;branch2&gt;   <span class=\"comment\">#在两个分支之间比较</span></span><br><span class=\"line\">$ git diff --staged   <span class=\"comment\">#比较暂存区和版本库差异</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash   <span class=\"comment\">#暂存没有提交的代码</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash list   <span class=\"comment\">#查看暂存区记录</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash   <span class=\"comment\">#查看暂存区记录</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash apply   <span class=\"comment\">#还原代码</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash drop   <span class=\"comment\">#删除暂存区记录</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash clear   <span class=\"comment\">#清空所有暂存区记录</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rebase featureA   <span class=\"comment\">#合并代码</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"GitHub简单用法\"><a href=\"#GitHub简单用法\" class=\"headerlink\" title=\"GitHub简单用法\"></a>GitHub简单用法</h2><ol>\n<li>创建仓库；</li>\n<li>下载到本地；</li>\n<li>修改文件；</li>\n<li>add到暂存区；</li>\n<li>commit提交；</li>\n<li>push到GitHub。</li>\n</ol>"},{"layout":"post","title":"Hexo&Github博客搭建过程记录","date":"2017-07-11T02:36:03.000Z","comments":1,"_content":"早之前就有兴趣搭建博客，不为输出思想，只为好奇折腾，但因种种原因一直没有实际行动。\n近期枯燥无味的实验后，略感无趣，索性尝试下搭建博客，特此记录一下搭建过程。\n手上有一台VPS，平时负责跑SS和EFB，本想使用公认最牛的Wordpress，直接将博客搭建在VPS内，由于VPS内存太小，不会优化，如果搞坏了，EFB我也不会独自搭建，此方法只能作罢。\n网上较多推荐的，不需要使用VPS的博客搭建平台，如Hexo，台湾籍大神开发，中文支持肯定没问题，依托于Github，依赖少等原因，最终选定Hexo来管理博客。\n<!--more--> \n# 前期准备\n---\n**安装Node.js**<br>\n\n>Node.js是一个基于Chrome V8引擎的JavaScript运行环境。 \n 下载地址[Node.js](https://nodejs.org/en/)\n>通过命令行查看安装版本node --version\n\n<br>**安装Git**<br>\n\n>Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们的网站在本地搭建好了，需要使用Git同步到GitHub上。\n 下载地址[Git](https://git-scm.com/)\n>通过命令行查看安装版本git\n\n<br>**安装Hexo**<br>\n\n>Hexo就是我们的个人博客网站的框架，此时需要创建一个文件夹，任意命名。\n 命令行下  npm install hexo-cli -g\n>通过命令行查看版本hexo --version\n\n<br>**创建Github账号**<br>\n >Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub上，故需要一个Github账号。\n 同时在github里生成一个库，名字就叫[username].github.io\n 这个是固定的。\n\n# 博客搭建 \n---\n**Hexo初始化**<br>\n\n 文件夹下Git Bash Here，执行hexo init\n 安装必要组件npm install\n \n  hexo简单指令：\n``` bash\n   hexo n \"我的博客\" == hexo new \"我的博客\" #新建文章 \n   hexo g == hexo generate #生成 \n   hexo s == hexo server #启动服务预览 \n   hexo d == hexo deploy #部署\n```\n 通过浏览器打开 http://localhost:4000/ 即可预览博客。\n\n**关联到Guihub**\n\n 打开Git Bash\n``` bash\n   git config --global user.name \"你的GitHub用户名\"\n   git config --global user.email \"你的GitHub注册邮箱\"\n```\n 生成ssh密钥文件\n``` bash\n   ssh-keygen -t rsa -C \"你的GitHub注册邮箱\"\n```\n 找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制到[GitHub_Settings_keys](https://github.com/settings/keys) 页面中，新建new SSH Key下，最后点击Add SSH key。\n 在Git Bash中检测GitHub公钥设置是否成功，通过:\n``` bash\n   ssh git@github.com \n```\n 在根目录里修改_config.yml配置文件\n``` bash\n deploy: \n   type: git\n   repo: git@github.com:[username]/[username].github.io.git\n   branch: master\n```\n\n 最后安装Git部署插件，输入命令：\n``` bash\n   npm install hexo-deployer-git --save\n```\n 执行hexo d，将可在[username].github.io 网页下查看自己的博客\n\n\n# 主题（以Yilia主题为例）\n---\n**安装**<br>\n\n``` bash\n   git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia\n```\n\n<br>**配置**<br>\n\n  修改hexo根目录下的 _config.yml下的theme: yilia\n  同时\\themes\\yilia下的 _config.yml也可以按需要修改  \n\n**更新**<br>\n\n``` bash\n  cd themes/yilia\n  git pull\n```\n\n# 绑定域名\n---\n**购买域名**<br>\n\n以阿里云为例，按个人喜好自行购买域名\n\n<br>**域名解析**<br>\n\n购买域名后，进入阿里云控制台，域名列表查看已购买的域名。\n点击解析，并添加：\n> CNAME---@---[username].github.io\n> CNAME--www--[username].github.io\n完成个人域名向博客的映射\n\n<br>**博客映射域名**<br>\n\n进入Github博客的仓库，添加文件\n>文件名为CNAME(注意：没有扩展名)，文件内容为个人域名(注意：没有http，没有www)。\n\n本地根目录下的source文件夹中添加如上CNAME文件，完成添加后重新部署，即可通过个人域名访问博客。\n\n# 换电脑后的部署\n---\n 依照上述步骤重新部署，并替换以下文件即可\n>配置文件: _config.yml\n 主题文件: theme/\n 博客文件: source/\n 文章模板: scaffolds/\n 使用包说明: package.json（经测试非必要）\n>限定忽略文件: .gitignore（经测试非必要）\n\n# 其他\n---\n至此，整个博客搭建完成，耗时半天吧。\n既然搭建成功，那就尽量写下去吧，哪怕一周一次，一月一次，一年一次，\n反正这博客地址知道的人也少。\n理工科宅男，打小就没什么写作能力，希望这玩意能慢慢影响到我吧。\n\n ","source":"_posts/Hexo-Github博客搭建过程记录.md","raw":"---\nlayout: post\ntitle: Hexo&Github博客搭建过程记录\ndate: 2017-07-11 10:36:03\ncomments: true\ntags:\n- Hexo\n---\n早之前就有兴趣搭建博客，不为输出思想，只为好奇折腾，但因种种原因一直没有实际行动。\n近期枯燥无味的实验后，略感无趣，索性尝试下搭建博客，特此记录一下搭建过程。\n手上有一台VPS，平时负责跑SS和EFB，本想使用公认最牛的Wordpress，直接将博客搭建在VPS内，由于VPS内存太小，不会优化，如果搞坏了，EFB我也不会独自搭建，此方法只能作罢。\n网上较多推荐的，不需要使用VPS的博客搭建平台，如Hexo，台湾籍大神开发，中文支持肯定没问题，依托于Github，依赖少等原因，最终选定Hexo来管理博客。\n<!--more--> \n# 前期准备\n---\n**安装Node.js**<br>\n\n>Node.js是一个基于Chrome V8引擎的JavaScript运行环境。 \n 下载地址[Node.js](https://nodejs.org/en/)\n>通过命令行查看安装版本node --version\n\n<br>**安装Git**<br>\n\n>Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们的网站在本地搭建好了，需要使用Git同步到GitHub上。\n 下载地址[Git](https://git-scm.com/)\n>通过命令行查看安装版本git\n\n<br>**安装Hexo**<br>\n\n>Hexo就是我们的个人博客网站的框架，此时需要创建一个文件夹，任意命名。\n 命令行下  npm install hexo-cli -g\n>通过命令行查看版本hexo --version\n\n<br>**创建Github账号**<br>\n >Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub上，故需要一个Github账号。\n 同时在github里生成一个库，名字就叫[username].github.io\n 这个是固定的。\n\n# 博客搭建 \n---\n**Hexo初始化**<br>\n\n 文件夹下Git Bash Here，执行hexo init\n 安装必要组件npm install\n \n  hexo简单指令：\n``` bash\n   hexo n \"我的博客\" == hexo new \"我的博客\" #新建文章 \n   hexo g == hexo generate #生成 \n   hexo s == hexo server #启动服务预览 \n   hexo d == hexo deploy #部署\n```\n 通过浏览器打开 http://localhost:4000/ 即可预览博客。\n\n**关联到Guihub**\n\n 打开Git Bash\n``` bash\n   git config --global user.name \"你的GitHub用户名\"\n   git config --global user.email \"你的GitHub注册邮箱\"\n```\n 生成ssh密钥文件\n``` bash\n   ssh-keygen -t rsa -C \"你的GitHub注册邮箱\"\n```\n 找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制到[GitHub_Settings_keys](https://github.com/settings/keys) 页面中，新建new SSH Key下，最后点击Add SSH key。\n 在Git Bash中检测GitHub公钥设置是否成功，通过:\n``` bash\n   ssh git@github.com \n```\n 在根目录里修改_config.yml配置文件\n``` bash\n deploy: \n   type: git\n   repo: git@github.com:[username]/[username].github.io.git\n   branch: master\n```\n\n 最后安装Git部署插件，输入命令：\n``` bash\n   npm install hexo-deployer-git --save\n```\n 执行hexo d，将可在[username].github.io 网页下查看自己的博客\n\n\n# 主题（以Yilia主题为例）\n---\n**安装**<br>\n\n``` bash\n   git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia\n```\n\n<br>**配置**<br>\n\n  修改hexo根目录下的 _config.yml下的theme: yilia\n  同时\\themes\\yilia下的 _config.yml也可以按需要修改  \n\n**更新**<br>\n\n``` bash\n  cd themes/yilia\n  git pull\n```\n\n# 绑定域名\n---\n**购买域名**<br>\n\n以阿里云为例，按个人喜好自行购买域名\n\n<br>**域名解析**<br>\n\n购买域名后，进入阿里云控制台，域名列表查看已购买的域名。\n点击解析，并添加：\n> CNAME---@---[username].github.io\n> CNAME--www--[username].github.io\n完成个人域名向博客的映射\n\n<br>**博客映射域名**<br>\n\n进入Github博客的仓库，添加文件\n>文件名为CNAME(注意：没有扩展名)，文件内容为个人域名(注意：没有http，没有www)。\n\n本地根目录下的source文件夹中添加如上CNAME文件，完成添加后重新部署，即可通过个人域名访问博客。\n\n# 换电脑后的部署\n---\n 依照上述步骤重新部署，并替换以下文件即可\n>配置文件: _config.yml\n 主题文件: theme/\n 博客文件: source/\n 文章模板: scaffolds/\n 使用包说明: package.json（经测试非必要）\n>限定忽略文件: .gitignore（经测试非必要）\n\n# 其他\n---\n至此，整个博客搭建完成，耗时半天吧。\n既然搭建成功，那就尽量写下去吧，哪怕一周一次，一月一次，一年一次，\n反正这博客地址知道的人也少。\n理工科宅男，打小就没什么写作能力，希望这玩意能慢慢影响到我吧。\n\n ","slug":"Hexo-Github博客搭建过程记录","published":1,"updated":"2021-11-28T14:49:30.332Z","photos":[],"link":"","_id":"cl4kyqfsn000420r5bcek3zd2","content":"<p>早之前就有兴趣搭建博客，不为输出思想，只为好奇折腾，但因种种原因一直没有实际行动。<br>近期枯燥无味的实验后，略感无趣，索性尝试下搭建博客，特此记录一下搭建过程。<br>手上有一台VPS，平时负责跑SS和EFB，本想使用公认最牛的Wordpress，直接将博客搭建在VPS内，由于VPS内存太小，不会优化，如果搞坏了，EFB我也不会独自搭建，此方法只能作罢。<br>网上较多推荐的，不需要使用VPS的博客搭建平台，如Hexo，台湾籍大神开发，中文支持肯定没问题，依托于Github，依赖少等原因，最终选定Hexo来管理博客。</p>\n<span id=\"more\"></span> \n<h1 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h1><hr>\n<p><strong>安装Node.js</strong><br></p>\n<blockquote>\n<p>Node.js是一个基于Chrome V8引擎的JavaScript运行环境。<br> 下载地址<a href=\"https://nodejs.org/en/\">Node.js</a><br>通过命令行查看安装版本node –version</p>\n</blockquote>\n<p><br><strong>安装Git</strong><br></p>\n<blockquote>\n<p>Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们的网站在本地搭建好了，需要使用Git同步到GitHub上。<br> 下载地址<a href=\"https://git-scm.com/\">Git</a><br>通过命令行查看安装版本git</p>\n</blockquote>\n<p><br><strong>安装Hexo</strong><br></p>\n<blockquote>\n<p>Hexo就是我们的个人博客网站的框架，此时需要创建一个文件夹，任意命名。<br> 命令行下  npm install hexo-cli -g<br>通过命令行查看版本hexo –version</p>\n</blockquote>\n<p><br><strong>创建Github账号</strong><br></p>\n<blockquote>\n<p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub上，故需要一个Github账号。<br> 同时在github里生成一个库，名字就叫[username].github.io<br> 这个是固定的。</p>\n</blockquote>\n<h1 id=\"博客搭建\"><a href=\"#博客搭建\" class=\"headerlink\" title=\"博客搭建\"></a>博客搭建</h1><hr>\n<p><strong>Hexo初始化</strong><br></p>\n<p> 文件夹下Git Bash Here，执行hexo init<br> 安装必要组件npm install</p>\n<p>  hexo简单指令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n <span class=\"string\">&quot;我的博客&quot;</span> == hexo new <span class=\"string\">&quot;我的博客&quot;</span> <span class=\"comment\">#新建文章 </span></span><br><span class=\"line\">hexo g == hexo generate <span class=\"comment\">#生成 </span></span><br><span class=\"line\">hexo s == hexo server <span class=\"comment\">#启动服务预览 </span></span><br><span class=\"line\">hexo d == hexo deploy <span class=\"comment\">#部署</span></span><br></pre></td></tr></table></figure>\n<p> 通过浏览器打开 <a href=\"http://localhost:4000/\">http://localhost:4000/</a> 即可预览博客。</p>\n<p><strong>关联到Guihub</strong></p>\n<p> 打开Git Bash</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;你的GitHub用户名&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;你的GitHub注册邮箱&quot;</span></span><br></pre></td></tr></table></figure>\n<p> 生成ssh密钥文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&quot;你的GitHub注册邮箱&quot;</span></span><br></pre></td></tr></table></figure>\n<p> 找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制到<a href=\"https://github.com/settings/keys\">GitHub_Settings_keys</a> 页面中，新建new SSH Key下，最后点击Add SSH key。<br> 在Git Bash中检测GitHub公钥设置是否成功，通过:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh git@github.com </span><br></pre></td></tr></table></figure>\n<p> 在根目录里修改_config.yml配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy: </span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: git@github.com:[username]/[username].github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n<p> 最后安装Git部署插件，输入命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p> 执行hexo d，将可在[username].github.io 网页下查看自己的博客</p>\n<h1 id=\"主题（以Yilia主题为例）\"><a href=\"#主题（以Yilia主题为例）\" class=\"headerlink\" title=\"主题（以Yilia主题为例）\"></a>主题（以Yilia主题为例）</h1><hr>\n<p><strong>安装</strong><br></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure>\n\n<p><br><strong>配置</strong><br></p>\n<p>  修改hexo根目录下的 _config.yml下的theme: yilia<br>  同时\\themes\\yilia下的 _config.yml也可以按需要修改  </p>\n<p><strong>更新</strong><br></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> themes/yilia</span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h1><hr>\n<p><strong>购买域名</strong><br></p>\n<p>以阿里云为例，按个人喜好自行购买域名</p>\n<p><br><strong>域名解析</strong><br></p>\n<p>购买域名后，进入阿里云控制台，域名列表查看已购买的域名。<br>点击解析，并添加：</p>\n<blockquote>\n<p>CNAME---@—[username].github.io<br>CNAME–www–[username].github.io<br>完成个人域名向博客的映射</p>\n</blockquote>\n<p><br><strong>博客映射域名</strong><br></p>\n<p>进入Github博客的仓库，添加文件</p>\n<blockquote>\n<p>文件名为CNAME(注意：没有扩展名)，文件内容为个人域名(注意：没有http，没有www)。</p>\n</blockquote>\n<p>本地根目录下的source文件夹中添加如上CNAME文件，完成添加后重新部署，即可通过个人域名访问博客。</p>\n<h1 id=\"换电脑后的部署\"><a href=\"#换电脑后的部署\" class=\"headerlink\" title=\"换电脑后的部署\"></a>换电脑后的部署</h1><hr>\n<p> 依照上述步骤重新部署，并替换以下文件即可</p>\n<blockquote>\n<p>配置文件: _config.yml<br> 主题文件: theme/<br> 博客文件: source/<br> 文章模板: scaffolds/<br> 使用包说明: package.json（经测试非必要）<br>限定忽略文件: .gitignore（经测试非必要）</p>\n</blockquote>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><hr>\n<p>至此，整个博客搭建完成，耗时半天吧。<br>既然搭建成功，那就尽量写下去吧，哪怕一周一次，一月一次，一年一次，<br>反正这博客地址知道的人也少。<br>理工科宅男，打小就没什么写作能力，希望这玩意能慢慢影响到我吧。</p>\n","site":{"data":{}},"excerpt":"<p>早之前就有兴趣搭建博客，不为输出思想，只为好奇折腾，但因种种原因一直没有实际行动。<br>近期枯燥无味的实验后，略感无趣，索性尝试下搭建博客，特此记录一下搭建过程。<br>手上有一台VPS，平时负责跑SS和EFB，本想使用公认最牛的Wordpress，直接将博客搭建在VPS内，由于VPS内存太小，不会优化，如果搞坏了，EFB我也不会独自搭建，此方法只能作罢。<br>网上较多推荐的，不需要使用VPS的博客搭建平台，如Hexo，台湾籍大神开发，中文支持肯定没问题，依托于Github，依赖少等原因，最终选定Hexo来管理博客。</p>","more":"<h1 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h1><hr>\n<p><strong>安装Node.js</strong><br></p>\n<blockquote>\n<p>Node.js是一个基于Chrome V8引擎的JavaScript运行环境。<br> 下载地址<a href=\"https://nodejs.org/en/\">Node.js</a><br>通过命令行查看安装版本node –version</p>\n</blockquote>\n<p><br><strong>安装Git</strong><br></p>\n<blockquote>\n<p>Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们的网站在本地搭建好了，需要使用Git同步到GitHub上。<br> 下载地址<a href=\"https://git-scm.com/\">Git</a><br>通过命令行查看安装版本git</p>\n</blockquote>\n<p><br><strong>安装Hexo</strong><br></p>\n<blockquote>\n<p>Hexo就是我们的个人博客网站的框架，此时需要创建一个文件夹，任意命名。<br> 命令行下  npm install hexo-cli -g<br>通过命令行查看版本hexo –version</p>\n</blockquote>\n<p><br><strong>创建Github账号</strong><br></p>\n<blockquote>\n<p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub上，故需要一个Github账号。<br> 同时在github里生成一个库，名字就叫[username].github.io<br> 这个是固定的。</p>\n</blockquote>\n<h1 id=\"博客搭建\"><a href=\"#博客搭建\" class=\"headerlink\" title=\"博客搭建\"></a>博客搭建</h1><hr>\n<p><strong>Hexo初始化</strong><br></p>\n<p> 文件夹下Git Bash Here，执行hexo init<br> 安装必要组件npm install</p>\n<p>  hexo简单指令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n <span class=\"string\">&quot;我的博客&quot;</span> == hexo new <span class=\"string\">&quot;我的博客&quot;</span> <span class=\"comment\">#新建文章 </span></span><br><span class=\"line\">hexo g == hexo generate <span class=\"comment\">#生成 </span></span><br><span class=\"line\">hexo s == hexo server <span class=\"comment\">#启动服务预览 </span></span><br><span class=\"line\">hexo d == hexo deploy <span class=\"comment\">#部署</span></span><br></pre></td></tr></table></figure>\n<p> 通过浏览器打开 <a href=\"http://localhost:4000/\">http://localhost:4000/</a> 即可预览博客。</p>\n<p><strong>关联到Guihub</strong></p>\n<p> 打开Git Bash</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;你的GitHub用户名&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;你的GitHub注册邮箱&quot;</span></span><br></pre></td></tr></table></figure>\n<p> 生成ssh密钥文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&quot;你的GitHub注册邮箱&quot;</span></span><br></pre></td></tr></table></figure>\n<p> 找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制到<a href=\"https://github.com/settings/keys\">GitHub_Settings_keys</a> 页面中，新建new SSH Key下，最后点击Add SSH key。<br> 在Git Bash中检测GitHub公钥设置是否成功，通过:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh git@github.com </span><br></pre></td></tr></table></figure>\n<p> 在根目录里修改_config.yml配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy: </span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: git@github.com:[username]/[username].github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n<p> 最后安装Git部署插件，输入命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p> 执行hexo d，将可在[username].github.io 网页下查看自己的博客</p>\n<h1 id=\"主题（以Yilia主题为例）\"><a href=\"#主题（以Yilia主题为例）\" class=\"headerlink\" title=\"主题（以Yilia主题为例）\"></a>主题（以Yilia主题为例）</h1><hr>\n<p><strong>安装</strong><br></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure>\n\n<p><br><strong>配置</strong><br></p>\n<p>  修改hexo根目录下的 _config.yml下的theme: yilia<br>  同时\\themes\\yilia下的 _config.yml也可以按需要修改  </p>\n<p><strong>更新</strong><br></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> themes/yilia</span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h1><hr>\n<p><strong>购买域名</strong><br></p>\n<p>以阿里云为例，按个人喜好自行购买域名</p>\n<p><br><strong>域名解析</strong><br></p>\n<p>购买域名后，进入阿里云控制台，域名列表查看已购买的域名。<br>点击解析，并添加：</p>\n<blockquote>\n<p>CNAME---@—[username].github.io<br>CNAME–www–[username].github.io<br>完成个人域名向博客的映射</p>\n</blockquote>\n<p><br><strong>博客映射域名</strong><br></p>\n<p>进入Github博客的仓库，添加文件</p>\n<blockquote>\n<p>文件名为CNAME(注意：没有扩展名)，文件内容为个人域名(注意：没有http，没有www)。</p>\n</blockquote>\n<p>本地根目录下的source文件夹中添加如上CNAME文件，完成添加后重新部署，即可通过个人域名访问博客。</p>\n<h1 id=\"换电脑后的部署\"><a href=\"#换电脑后的部署\" class=\"headerlink\" title=\"换电脑后的部署\"></a>换电脑后的部署</h1><hr>\n<p> 依照上述步骤重新部署，并替换以下文件即可</p>\n<blockquote>\n<p>配置文件: _config.yml<br> 主题文件: theme/<br> 博客文件: source/<br> 文章模板: scaffolds/<br> 使用包说明: package.json（经测试非必要）<br>限定忽略文件: .gitignore（经测试非必要）</p>\n</blockquote>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><hr>\n<p>至此，整个博客搭建完成，耗时半天吧。<br>既然搭建成功，那就尽量写下去吧，哪怕一周一次，一月一次，一年一次，<br>反正这博客地址知道的人也少。<br>理工科宅男，打小就没什么写作能力，希望这玩意能慢慢影响到我吧。</p>"},{"layout":"post","title":"Hyper-V中Manjaro-KDE的部分配置","comments":1,"date":"2020-12-18T14:13:49.000Z","_content":"Hyper V中安装Manjaro的过程中，遇到了一些问题，在此记录。\n<!--more--> \n1 安装过程卡到引导界面，可能是由于sddm或lightdm启动失败。\n依次执行以下命令：\n```bash\n$ su\n$ pacman –Sy \n$ pacman –S xf86-video-fbdev\n$ systemctl restart sddm\n```\n\n2 安装xrdp远程桌面服务\n依次执行以下命令：\n```bash\n$ sudo pacman –Sy\n$ sudo pacman –S git\n$ cd Downloads (or wherever you want to download it to)\n$ git clone https://github.com/Microsoft/linux-vm-tools.git ./linux-vm-tools\n$ cd linux-vm-tools/arch\n```\n\n修改./makepkg.sh文件，将xrdp改成xrdp-git，因为默认版本的xrdp不支持linux-vm-tools。\n```bash\n$ ./makepkg.sh\n$ ./install-config.sh\n```\n\n编辑.xinitrc文件，删除下面一行中的“--exit-with-session”\nlocal dbus_args=(--sh-syntax --exit-with-session)\n\n在windows的shell下键入：\n```bash\n$ set-vm -vmname <vmname> -EnhancedSessionTransportType HvSocket\n```\n\n3 更换中国源\n```bash\n$ sudo pacman-mirrors -i -c China -m rank\n$ sudo pacman –Syy\n```\n\n4 安装vim\n```bash\n$ sudo pacman –S vim\n```\n\n5 安装google输入法\n```bash\n$ sudo pacman -S fcitx-configtool\n$ sudo pacman -S fcitx-googlepinyin\n$ sudo vim ~/.xprofile\n```\n\n在文件中添加如下内容\n```bash\nexport GTK_IM_MODULE=fcitx\nexport QT_IM_MODULE=fcitx\nexport XMODIFIERS=\"@im=fcitx\"\n```\n\n重启系统\n\n6 安装Pulseaudio启动声音\n```bash\n$ cd Downloads\n$ git clone https://aur.archlinux.org/pulseaudio-module-xrdp-git.git\n$ cd pulseaudio-module-xrdp-git\n$ makepkg –sri\n$ pulseaudio -D\n```\n将编译好的pkg/pulseaudio-module-xrdp-git/路径下的文件，参照目录，放到相应位置，包含module-xrdp-sink.so和module-xrdp-source.so\n\n```bash\n$ pulseaudio --kill\n$ pulseaudio --start\n```\n\n有个问题是，每次开机都需要通过pulseaudio -D启动声音，没找到解决办法，尝试过将这一行命令做成脚本开机自启，也没有成功，可能自启脚本配置的有问题。\n\n7 安装electron-ssr\n在AUR库中下载libappindicator-sharp，进入目录执行：\n```bash\n$ makepkg -sri\n```\n在[对应页面](https://github.com/qingshuisiyuan/electron-ssr-backup/releases)下载适应的软件包。\n```bash\n$ Sudo pacman –U 软件包文件名\n$ sudo pacman -S gconf\n$ export http_proxy=\"http://127.0.0.1:12333\"\n```\n\n配置浏览器代理，Firefox直接在代理中进行相关配置，chrome需要额外插件。\n\n\n","source":"_posts/Hyper-V中Manjaro-KDE的部分配置.md","raw":"---\nlayout: post\ntitle: Hyper-V中Manjaro-KDE的部分配置\ncomments: true\ntags:\n  - Manjaro\ndate: 2020-12-18 22:13:49\n---\nHyper V中安装Manjaro的过程中，遇到了一些问题，在此记录。\n<!--more--> \n1 安装过程卡到引导界面，可能是由于sddm或lightdm启动失败。\n依次执行以下命令：\n```bash\n$ su\n$ pacman –Sy \n$ pacman –S xf86-video-fbdev\n$ systemctl restart sddm\n```\n\n2 安装xrdp远程桌面服务\n依次执行以下命令：\n```bash\n$ sudo pacman –Sy\n$ sudo pacman –S git\n$ cd Downloads (or wherever you want to download it to)\n$ git clone https://github.com/Microsoft/linux-vm-tools.git ./linux-vm-tools\n$ cd linux-vm-tools/arch\n```\n\n修改./makepkg.sh文件，将xrdp改成xrdp-git，因为默认版本的xrdp不支持linux-vm-tools。\n```bash\n$ ./makepkg.sh\n$ ./install-config.sh\n```\n\n编辑.xinitrc文件，删除下面一行中的“--exit-with-session”\nlocal dbus_args=(--sh-syntax --exit-with-session)\n\n在windows的shell下键入：\n```bash\n$ set-vm -vmname <vmname> -EnhancedSessionTransportType HvSocket\n```\n\n3 更换中国源\n```bash\n$ sudo pacman-mirrors -i -c China -m rank\n$ sudo pacman –Syy\n```\n\n4 安装vim\n```bash\n$ sudo pacman –S vim\n```\n\n5 安装google输入法\n```bash\n$ sudo pacman -S fcitx-configtool\n$ sudo pacman -S fcitx-googlepinyin\n$ sudo vim ~/.xprofile\n```\n\n在文件中添加如下内容\n```bash\nexport GTK_IM_MODULE=fcitx\nexport QT_IM_MODULE=fcitx\nexport XMODIFIERS=\"@im=fcitx\"\n```\n\n重启系统\n\n6 安装Pulseaudio启动声音\n```bash\n$ cd Downloads\n$ git clone https://aur.archlinux.org/pulseaudio-module-xrdp-git.git\n$ cd pulseaudio-module-xrdp-git\n$ makepkg –sri\n$ pulseaudio -D\n```\n将编译好的pkg/pulseaudio-module-xrdp-git/路径下的文件，参照目录，放到相应位置，包含module-xrdp-sink.so和module-xrdp-source.so\n\n```bash\n$ pulseaudio --kill\n$ pulseaudio --start\n```\n\n有个问题是，每次开机都需要通过pulseaudio -D启动声音，没找到解决办法，尝试过将这一行命令做成脚本开机自启，也没有成功，可能自启脚本配置的有问题。\n\n7 安装electron-ssr\n在AUR库中下载libappindicator-sharp，进入目录执行：\n```bash\n$ makepkg -sri\n```\n在[对应页面](https://github.com/qingshuisiyuan/electron-ssr-backup/releases)下载适应的软件包。\n```bash\n$ Sudo pacman –U 软件包文件名\n$ sudo pacman -S gconf\n$ export http_proxy=\"http://127.0.0.1:12333\"\n```\n\n配置浏览器代理，Firefox直接在代理中进行相关配置，chrome需要额外插件。\n\n\n","slug":"Hyper-V中Manjaro-KDE的部分配置","published":1,"updated":"2021-11-28T14:51:18.701Z","photos":[],"link":"","_id":"cl4kyqfst000520r52inkg81g","content":"<p>Hyper V中安装Manjaro的过程中，遇到了一些问题，在此记录。</p>\n<span id=\"more\"></span> \n<p>1 安装过程卡到引导界面，可能是由于sddm或lightdm启动失败。<br>依次执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ su</span><br><span class=\"line\">$ pacman –Sy </span><br><span class=\"line\">$ pacman –S xf86-video-fbdev</span><br><span class=\"line\">$ systemctl restart sddm</span><br></pre></td></tr></table></figure>\n\n<p>2 安装xrdp远程桌面服务<br>依次执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman –Sy</span><br><span class=\"line\">$ sudo pacman –S git</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> Downloads (or wherever you want to download it to)</span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/Microsoft/linux-vm-tools.git ./linux-vm-tools</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> linux-vm-tools/arch</span><br></pre></td></tr></table></figure>\n\n<p>修改./makepkg.sh文件，将xrdp改成xrdp-git，因为默认版本的xrdp不支持linux-vm-tools。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./makepkg.sh</span><br><span class=\"line\">$ ./install-config.sh</span><br></pre></td></tr></table></figure>\n\n<p>编辑.xinitrc文件，删除下面一行中的“–exit-with-session”<br>local dbus_args=(–sh-syntax –exit-with-session)</p>\n<p>在windows的shell下键入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ set-vm -vmname &lt;vmname&gt; -EnhancedSessionTransportType HvSocket</span><br></pre></td></tr></table></figure>\n\n<p>3 更换中国源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman-mirrors -i -c China -m rank</span><br><span class=\"line\">$ sudo pacman –Syy</span><br></pre></td></tr></table></figure>\n\n<p>4 安装vim</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman –S vim</span><br></pre></td></tr></table></figure>\n\n<p>5 安装google输入法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S fcitx-configtool</span><br><span class=\"line\">$ sudo pacman -S fcitx-googlepinyin</span><br><span class=\"line\">$ sudo vim ~/.xprofile</span><br></pre></td></tr></table></figure>\n\n<p>在文件中添加如下内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> GTK_IM_MODULE=fcitx</span><br><span class=\"line\"><span class=\"built_in\">export</span> QT_IM_MODULE=fcitx</span><br><span class=\"line\"><span class=\"built_in\">export</span> XMODIFIERS=<span class=\"string\">&quot;@im=fcitx&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>重启系统</p>\n<p>6 安装Pulseaudio启动声音</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> Downloads</span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://aur.archlinux.org/pulseaudio-module-xrdp-git.git</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> pulseaudio-module-xrdp-git</span><br><span class=\"line\">$ makepkg –sri</span><br><span class=\"line\">$ pulseaudio -D</span><br></pre></td></tr></table></figure>\n<p>将编译好的pkg/pulseaudio-module-xrdp-git/路径下的文件，参照目录，放到相应位置，包含module-xrdp-sink.so和module-xrdp-source.so</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pulseaudio --<span class=\"built_in\">kill</span></span><br><span class=\"line\">$ pulseaudio --start</span><br></pre></td></tr></table></figure>\n\n<p>有个问题是，每次开机都需要通过pulseaudio -D启动声音，没找到解决办法，尝试过将这一行命令做成脚本开机自启，也没有成功，可能自启脚本配置的有问题。</p>\n<p>7 安装electron-ssr<br>在AUR库中下载libappindicator-sharp，进入目录执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ makepkg -sri</span><br></pre></td></tr></table></figure>\n<p>在<a href=\"https://github.com/qingshuisiyuan/electron-ssr-backup/releases\">对应页面</a>下载适应的软件包。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ Sudo pacman –U 软件包文件名</span><br><span class=\"line\">$ sudo pacman -S gconf</span><br><span class=\"line\">$ <span class=\"built_in\">export</span> http_proxy=<span class=\"string\">&quot;http://127.0.0.1:12333&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>配置浏览器代理，Firefox直接在代理中进行相关配置，chrome需要额外插件。</p>\n","site":{"data":{}},"excerpt":"<p>Hyper V中安装Manjaro的过程中，遇到了一些问题，在此记录。</p>","more":"<p>1 安装过程卡到引导界面，可能是由于sddm或lightdm启动失败。<br>依次执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ su</span><br><span class=\"line\">$ pacman –Sy </span><br><span class=\"line\">$ pacman –S xf86-video-fbdev</span><br><span class=\"line\">$ systemctl restart sddm</span><br></pre></td></tr></table></figure>\n\n<p>2 安装xrdp远程桌面服务<br>依次执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman –Sy</span><br><span class=\"line\">$ sudo pacman –S git</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> Downloads (or wherever you want to download it to)</span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/Microsoft/linux-vm-tools.git ./linux-vm-tools</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> linux-vm-tools/arch</span><br></pre></td></tr></table></figure>\n\n<p>修改./makepkg.sh文件，将xrdp改成xrdp-git，因为默认版本的xrdp不支持linux-vm-tools。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./makepkg.sh</span><br><span class=\"line\">$ ./install-config.sh</span><br></pre></td></tr></table></figure>\n\n<p>编辑.xinitrc文件，删除下面一行中的“–exit-with-session”<br>local dbus_args=(–sh-syntax –exit-with-session)</p>\n<p>在windows的shell下键入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ set-vm -vmname &lt;vmname&gt; -EnhancedSessionTransportType HvSocket</span><br></pre></td></tr></table></figure>\n\n<p>3 更换中国源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman-mirrors -i -c China -m rank</span><br><span class=\"line\">$ sudo pacman –Syy</span><br></pre></td></tr></table></figure>\n\n<p>4 安装vim</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman –S vim</span><br></pre></td></tr></table></figure>\n\n<p>5 安装google输入法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S fcitx-configtool</span><br><span class=\"line\">$ sudo pacman -S fcitx-googlepinyin</span><br><span class=\"line\">$ sudo vim ~/.xprofile</span><br></pre></td></tr></table></figure>\n\n<p>在文件中添加如下内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> GTK_IM_MODULE=fcitx</span><br><span class=\"line\"><span class=\"built_in\">export</span> QT_IM_MODULE=fcitx</span><br><span class=\"line\"><span class=\"built_in\">export</span> XMODIFIERS=<span class=\"string\">&quot;@im=fcitx&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>重启系统</p>\n<p>6 安装Pulseaudio启动声音</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> Downloads</span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://aur.archlinux.org/pulseaudio-module-xrdp-git.git</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> pulseaudio-module-xrdp-git</span><br><span class=\"line\">$ makepkg –sri</span><br><span class=\"line\">$ pulseaudio -D</span><br></pre></td></tr></table></figure>\n<p>将编译好的pkg/pulseaudio-module-xrdp-git/路径下的文件，参照目录，放到相应位置，包含module-xrdp-sink.so和module-xrdp-source.so</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pulseaudio --<span class=\"built_in\">kill</span></span><br><span class=\"line\">$ pulseaudio --start</span><br></pre></td></tr></table></figure>\n\n<p>有个问题是，每次开机都需要通过pulseaudio -D启动声音，没找到解决办法，尝试过将这一行命令做成脚本开机自启，也没有成功，可能自启脚本配置的有问题。</p>\n<p>7 安装electron-ssr<br>在AUR库中下载libappindicator-sharp，进入目录执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ makepkg -sri</span><br></pre></td></tr></table></figure>\n<p>在<a href=\"https://github.com/qingshuisiyuan/electron-ssr-backup/releases\">对应页面</a>下载适应的软件包。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ Sudo pacman –U 软件包文件名</span><br><span class=\"line\">$ sudo pacman -S gconf</span><br><span class=\"line\">$ <span class=\"built_in\">export</span> http_proxy=<span class=\"string\">&quot;http://127.0.0.1:12333&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>配置浏览器代理，Firefox直接在代理中进行相关配置，chrome需要额外插件。</p>"},{"layout":"post","title":"SS加速KCPTun篇","comments":1,"date":"2018-05-03T23:34:32.000Z","_content":"![](/assets/images/180504_1.jpg)  \n迫于最近看有关速度特别差，就想着给我的SS服务加个速，\n网上的KCPTun加速写的看不懂，端口什么的叙述的很乱，\n花了1天时间终于成功试出来了，在此记录一下步骤。\n<!--more-->\n总体上需要三块区域的配置（我没有苹果的产品）\n1.服务器端的配置；\n2.windows端的配置；\n3.安卓端的配置；\n记得所有KCPTun的版本要保持一致，如后缀都为20170315。\n\n## 服务器端配置\n1.创建存放KCPTun的文件夹；\n2.进入文件夹；\n3.下载linux版KCPTun压缩文件；\n4.解压；\n\n``` bash\nmkdir ~/kcptun\ncd /root/kcptun\nwget https://github.com/xtaci/kcptun/releases/download/v20170329/kcptun-linux-amd64-20170315.tar.gz\ntar -zxvf kcptun-linux-amd64-20170315.tar.gz\n```\n解压出来的两个文件，client开头的客户端和server开头的服务端。\n\n5.建立start脚本：\n``` bash\nvim /root/kcptun/start.sh\n```\n``` bash\n#!/bin/bash\ncd /root/kcptun/\n./server_linux_386 -c /root/kcptun/server-config.json > kcptun.log 2>&1 &\necho \"Kcptun started.\"\n```\n\n6.建立stop脚本：\n``` bash\nvim /root/kcptun/sto.sh\n```\n``` bash\n#!/bin/bash\necho \"Stopping Kcptun...\"\nPID=`ps -ef | grep server_linux_amd64 | grep -v grep | awk '{print $2}'`\nif [ \"\" !=  \"$PID\" ]; then\n  echo \"killing $PID\"\n  kill -9 $PID\nfi\necho \"Kcptun stoped.\"\n```\n\n7.建立restart.sh脚本：\n``` bash\nvim /root/kcptun/restart.sh\n```\n``` bash\n#!/bin/bash\ncd /root/kcptun/\nsh stop.sh\necho \"Restarting Kcptun...\"\nsh start.sh\n```\n\n8.添加脚本执行权限：\n``` bash\nchmod +x *.sh\n```\n\n9.建立KCPTun配置文件(注释不写)：\n``` bash\nvim /root/kcptun/server-config.json\n```\n``` bash\n{\n    \"listen\": \":29900\",              #监听端口，用一个未占用的就行，起名端口1\n    \"target\": \"127.0.0.1:12948\",     #SS的IP和端口，同机上可以这样，起名端口2\n    \"key\": \"https://awy.me\",         #密码\n    \"crypt\": \"salsa20\",              #加密方式\n    \"mode\": \"fast2\",                 #加速模式\n    \"mtu\": 1350,\n    \"sndwnd\": 1024,\n    \"rcvwnd\": 1024,\n    \"datashard\": 70,\n    \"parityshard\": 30,\n    \"dscp\": 46,\n    \"nocomp\": false,\n    \"acknodelay\": false,\n    \"nodelay\": 0,\n    \"interval\": 40,\n    \"resend\": 0,\n    \"nc\": 0,\n    \"sockbuf\": 4194304,\n    \"keepalive\": 10\n}\n```\n\n10.启动KCPTun并添加开机运行：\n``` bash\nsh /root/kcptun/start.sh\nchmod +x /etc/rc.local;echo \"sh /root/kcptun/start.sh\" >> /etc/rc.local\n```\n\n服务器端到此就设置完成。\n\n## windows端配置\n下载GUI版的KPCTun客户端，长这样：\n![](/assets/images/180504_2.jpg)  \n下载windows版KCPTun客户端，能解压出client_windows_amd64.exe和kcptun_gclient.exe文件，同linux版差别不大。\n将这三个文件放入同一文件夹，因为运行会自动产生额外配置文件。\n\n基础参数中：\n本地监听端口随意选一个未占用的，起名端口3；\n服务器地址为VPS的IP；\n端口为服务器端设置端口，即端口1。\n\n可选参数、传输模式、隐藏参数中：\n完全依照服务器端的配置设置就行。\n\n点击启动，出现如下界面就行了。\n![](/assets/images/180504_3.jpg) \n\n打开SS小飞机：\nIP地址：127.0.0.1；\n端口：本地监听端口，即为端口3；\n密码和加密方式不变。\n\nwindows端配置到此设置完成。\n\n## 安卓端配置\n安卓端除了最新版小飞机外，还需要一个叫kcptun的插件，\n插件以软件的形式安装，完成后小飞机最下面插件才能选择，\n\n服务器填写VPS的IP；\n远程端口为服务器监听端口，即端口1；\n密码和加密方式照旧。\n\n插件配置如下，根据服务器端的填写修改为自己：\n``` bash\ndscp=46;nodelay=0;parityshard=30;interval=40;rcvwnd=1024;crypt=salsa20;nc=0;acknodelay;resend=2;autoexpire=0;key=kcptun;mode=fast2;mtu=1350;datashard=70;keepalive=10;sndwnd=1024;sockbuf=4194304\n```\n到此安卓端配置完成。\n---\n\n配置下来其实不难，比较混乱的就是端口，一共三个端口，我就能搜出来好几个版本。","source":"_posts/SS加速KCPTun篇.md","raw":"---\nlayout: post\ntitle: SS加速KCPTun篇\ncomments: true\ndate: 2018-05-04 07:34:32\ntags:\n- shadowsock\n---\n![](/assets/images/180504_1.jpg)  \n迫于最近看有关速度特别差，就想着给我的SS服务加个速，\n网上的KCPTun加速写的看不懂，端口什么的叙述的很乱，\n花了1天时间终于成功试出来了，在此记录一下步骤。\n<!--more-->\n总体上需要三块区域的配置（我没有苹果的产品）\n1.服务器端的配置；\n2.windows端的配置；\n3.安卓端的配置；\n记得所有KCPTun的版本要保持一致，如后缀都为20170315。\n\n## 服务器端配置\n1.创建存放KCPTun的文件夹；\n2.进入文件夹；\n3.下载linux版KCPTun压缩文件；\n4.解压；\n\n``` bash\nmkdir ~/kcptun\ncd /root/kcptun\nwget https://github.com/xtaci/kcptun/releases/download/v20170329/kcptun-linux-amd64-20170315.tar.gz\ntar -zxvf kcptun-linux-amd64-20170315.tar.gz\n```\n解压出来的两个文件，client开头的客户端和server开头的服务端。\n\n5.建立start脚本：\n``` bash\nvim /root/kcptun/start.sh\n```\n``` bash\n#!/bin/bash\ncd /root/kcptun/\n./server_linux_386 -c /root/kcptun/server-config.json > kcptun.log 2>&1 &\necho \"Kcptun started.\"\n```\n\n6.建立stop脚本：\n``` bash\nvim /root/kcptun/sto.sh\n```\n``` bash\n#!/bin/bash\necho \"Stopping Kcptun...\"\nPID=`ps -ef | grep server_linux_amd64 | grep -v grep | awk '{print $2}'`\nif [ \"\" !=  \"$PID\" ]; then\n  echo \"killing $PID\"\n  kill -9 $PID\nfi\necho \"Kcptun stoped.\"\n```\n\n7.建立restart.sh脚本：\n``` bash\nvim /root/kcptun/restart.sh\n```\n``` bash\n#!/bin/bash\ncd /root/kcptun/\nsh stop.sh\necho \"Restarting Kcptun...\"\nsh start.sh\n```\n\n8.添加脚本执行权限：\n``` bash\nchmod +x *.sh\n```\n\n9.建立KCPTun配置文件(注释不写)：\n``` bash\nvim /root/kcptun/server-config.json\n```\n``` bash\n{\n    \"listen\": \":29900\",              #监听端口，用一个未占用的就行，起名端口1\n    \"target\": \"127.0.0.1:12948\",     #SS的IP和端口，同机上可以这样，起名端口2\n    \"key\": \"https://awy.me\",         #密码\n    \"crypt\": \"salsa20\",              #加密方式\n    \"mode\": \"fast2\",                 #加速模式\n    \"mtu\": 1350,\n    \"sndwnd\": 1024,\n    \"rcvwnd\": 1024,\n    \"datashard\": 70,\n    \"parityshard\": 30,\n    \"dscp\": 46,\n    \"nocomp\": false,\n    \"acknodelay\": false,\n    \"nodelay\": 0,\n    \"interval\": 40,\n    \"resend\": 0,\n    \"nc\": 0,\n    \"sockbuf\": 4194304,\n    \"keepalive\": 10\n}\n```\n\n10.启动KCPTun并添加开机运行：\n``` bash\nsh /root/kcptun/start.sh\nchmod +x /etc/rc.local;echo \"sh /root/kcptun/start.sh\" >> /etc/rc.local\n```\n\n服务器端到此就设置完成。\n\n## windows端配置\n下载GUI版的KPCTun客户端，长这样：\n![](/assets/images/180504_2.jpg)  \n下载windows版KCPTun客户端，能解压出client_windows_amd64.exe和kcptun_gclient.exe文件，同linux版差别不大。\n将这三个文件放入同一文件夹，因为运行会自动产生额外配置文件。\n\n基础参数中：\n本地监听端口随意选一个未占用的，起名端口3；\n服务器地址为VPS的IP；\n端口为服务器端设置端口，即端口1。\n\n可选参数、传输模式、隐藏参数中：\n完全依照服务器端的配置设置就行。\n\n点击启动，出现如下界面就行了。\n![](/assets/images/180504_3.jpg) \n\n打开SS小飞机：\nIP地址：127.0.0.1；\n端口：本地监听端口，即为端口3；\n密码和加密方式不变。\n\nwindows端配置到此设置完成。\n\n## 安卓端配置\n安卓端除了最新版小飞机外，还需要一个叫kcptun的插件，\n插件以软件的形式安装，完成后小飞机最下面插件才能选择，\n\n服务器填写VPS的IP；\n远程端口为服务器监听端口，即端口1；\n密码和加密方式照旧。\n\n插件配置如下，根据服务器端的填写修改为自己：\n``` bash\ndscp=46;nodelay=0;parityshard=30;interval=40;rcvwnd=1024;crypt=salsa20;nc=0;acknodelay;resend=2;autoexpire=0;key=kcptun;mode=fast2;mtu=1350;datashard=70;keepalive=10;sndwnd=1024;sockbuf=4194304\n```\n到此安卓端配置完成。\n---\n\n配置下来其实不难，比较混乱的就是端口，一共三个端口，我就能搜出来好几个版本。","slug":"SS加速KCPTun篇","published":1,"updated":"2021-11-28T14:50:55.488Z","photos":[],"link":"","_id":"cl4kyqfsx000620r51pcva3iq","content":"<p><img src=\"/assets/images/180504_1.jpg\"><br>迫于最近看有关速度特别差，就想着给我的SS服务加个速，<br>网上的KCPTun加速写的看不懂，端口什么的叙述的很乱，<br>花了1天时间终于成功试出来了，在此记录一下步骤。</p>\n<span id=\"more\"></span>\n<p>总体上需要三块区域的配置（我没有苹果的产品）<br>1.服务器端的配置；<br>2.windows端的配置；<br>3.安卓端的配置；<br>记得所有KCPTun的版本要保持一致，如后缀都为20170315。</p>\n<h2 id=\"服务器端配置\"><a href=\"#服务器端配置\" class=\"headerlink\" title=\"服务器端配置\"></a>服务器端配置</h2><p>1.创建存放KCPTun的文件夹；<br>2.进入文件夹；<br>3.下载linux版KCPTun压缩文件；<br>4.解压；</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> ~/kcptun</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /root/kcptun</span><br><span class=\"line\">wget https://github.com/xtaci/kcptun/releases/download/v20170329/kcptun-linux-amd64-20170315.tar.gz</span><br><span class=\"line\">tar -zxvf kcptun-linux-amd64-20170315.tar.gz</span><br></pre></td></tr></table></figure>\n<p>解压出来的两个文件，client开头的客户端和server开头的服务端。</p>\n<p>5.建立start脚本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /root/kcptun/start.sh</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /root/kcptun/</span><br><span class=\"line\">./server_linux_386 -c /root/kcptun/server-config.json &gt; kcptun.log 2&gt;&amp;1 &amp;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Kcptun started.&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>6.建立stop脚本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /root/kcptun/sto.sh</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Stopping Kcptun...&quot;</span></span><br><span class=\"line\">PID=`ps -ef | grep server_linux_amd64 | grep -v grep | awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;&quot;</span> !=  <span class=\"string\">&quot;<span class=\"variable\">$PID</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;killing <span class=\"variable\">$PID</span>&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">kill</span> -9 <span class=\"variable\">$PID</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Kcptun stoped.&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>7.建立restart.sh脚本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /root/kcptun/restart.sh</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /root/kcptun/</span><br><span class=\"line\">sh stop.sh</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Restarting Kcptun...&quot;</span></span><br><span class=\"line\">sh start.sh</span><br></pre></td></tr></table></figure>\n\n<p>8.添加脚本执行权限：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> +x *.sh</span><br></pre></td></tr></table></figure>\n\n<p>9.建立KCPTun配置文件(注释不写)：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /root/kcptun/server-config.json</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;listen&quot;</span>: <span class=\"string\">&quot;:29900&quot;</span>,              <span class=\"comment\">#监听端口，用一个未占用的就行，起名端口1</span></span><br><span class=\"line\">    <span class=\"string\">&quot;target&quot;</span>: <span class=\"string\">&quot;127.0.0.1:12948&quot;</span>,     <span class=\"comment\">#SS的IP和端口，同机上可以这样，起名端口2</span></span><br><span class=\"line\">    <span class=\"string\">&quot;key&quot;</span>: <span class=\"string\">&quot;https://awy.me&quot;</span>,         <span class=\"comment\">#密码</span></span><br><span class=\"line\">    <span class=\"string\">&quot;crypt&quot;</span>: <span class=\"string\">&quot;salsa20&quot;</span>,              <span class=\"comment\">#加密方式</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mode&quot;</span>: <span class=\"string\">&quot;fast2&quot;</span>,                 <span class=\"comment\">#加速模式</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mtu&quot;</span>: 1350,</span><br><span class=\"line\">    <span class=\"string\">&quot;sndwnd&quot;</span>: 1024,</span><br><span class=\"line\">    <span class=\"string\">&quot;rcvwnd&quot;</span>: 1024,</span><br><span class=\"line\">    <span class=\"string\">&quot;datashard&quot;</span>: 70,</span><br><span class=\"line\">    <span class=\"string\">&quot;parityshard&quot;</span>: 30,</span><br><span class=\"line\">    <span class=\"string\">&quot;dscp&quot;</span>: 46,</span><br><span class=\"line\">    <span class=\"string\">&quot;nocomp&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;acknodelay&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;nodelay&quot;</span>: 0,</span><br><span class=\"line\">    <span class=\"string\">&quot;interval&quot;</span>: 40,</span><br><span class=\"line\">    <span class=\"string\">&quot;resend&quot;</span>: 0,</span><br><span class=\"line\">    <span class=\"string\">&quot;nc&quot;</span>: 0,</span><br><span class=\"line\">    <span class=\"string\">&quot;sockbuf&quot;</span>: 4194304,</span><br><span class=\"line\">    <span class=\"string\">&quot;keepalive&quot;</span>: 10</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>10.启动KCPTun并添加开机运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh /root/kcptun/start.sh</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x /etc/rc.local;<span class=\"built_in\">echo</span> <span class=\"string\">&quot;sh /root/kcptun/start.sh&quot;</span> &gt;&gt; /etc/rc.local</span><br></pre></td></tr></table></figure>\n\n<p>服务器端到此就设置完成。</p>\n<h2 id=\"windows端配置\"><a href=\"#windows端配置\" class=\"headerlink\" title=\"windows端配置\"></a>windows端配置</h2><p>下载GUI版的KPCTun客户端，长这样：<br><img src=\"/assets/images/180504_2.jpg\"><br>下载windows版KCPTun客户端，能解压出client_windows_amd64.exe和kcptun_gclient.exe文件，同linux版差别不大。<br>将这三个文件放入同一文件夹，因为运行会自动产生额外配置文件。</p>\n<p>基础参数中：<br>本地监听端口随意选一个未占用的，起名端口3；<br>服务器地址为VPS的IP；<br>端口为服务器端设置端口，即端口1。</p>\n<p>可选参数、传输模式、隐藏参数中：<br>完全依照服务器端的配置设置就行。</p>\n<p>点击启动，出现如下界面就行了。<br><img src=\"/assets/images/180504_3.jpg\"> </p>\n<p>打开SS小飞机：<br>IP地址：127.0.0.1；<br>端口：本地监听端口，即为端口3；<br>密码和加密方式不变。</p>\n<p>windows端配置到此设置完成。</p>\n<h2 id=\"安卓端配置\"><a href=\"#安卓端配置\" class=\"headerlink\" title=\"安卓端配置\"></a>安卓端配置</h2><p>安卓端除了最新版小飞机外，还需要一个叫kcptun的插件，<br>插件以软件的形式安装，完成后小飞机最下面插件才能选择，</p>\n<p>服务器填写VPS的IP；<br>远程端口为服务器监听端口，即端口1；<br>密码和加密方式照旧。</p>\n<p>插件配置如下，根据服务器端的填写修改为自己：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dscp=46;nodelay=0;parityshard=30;interval=40;rcvwnd=1024;crypt=salsa20;nc=0;acknodelay;resend=2;autoexpire=0;key=kcptun;mode=fast2;mtu=1350;datashard=70;keepalive=10;sndwnd=1024;sockbuf=4194304</span><br></pre></td></tr></table></figure>\n<h2 id=\"到此安卓端配置完成。\"><a href=\"#到此安卓端配置完成。\" class=\"headerlink\" title=\"到此安卓端配置完成。\"></a>到此安卓端配置完成。</h2><p>配置下来其实不难，比较混乱的就是端口，一共三个端口，我就能搜出来好几个版本。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/assets/images/180504_1.jpg\"><br>迫于最近看有关速度特别差，就想着给我的SS服务加个速，<br>网上的KCPTun加速写的看不懂，端口什么的叙述的很乱，<br>花了1天时间终于成功试出来了，在此记录一下步骤。</p>","more":"<p>总体上需要三块区域的配置（我没有苹果的产品）<br>1.服务器端的配置；<br>2.windows端的配置；<br>3.安卓端的配置；<br>记得所有KCPTun的版本要保持一致，如后缀都为20170315。</p>\n<h2 id=\"服务器端配置\"><a href=\"#服务器端配置\" class=\"headerlink\" title=\"服务器端配置\"></a>服务器端配置</h2><p>1.创建存放KCPTun的文件夹；<br>2.进入文件夹；<br>3.下载linux版KCPTun压缩文件；<br>4.解压；</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> ~/kcptun</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /root/kcptun</span><br><span class=\"line\">wget https://github.com/xtaci/kcptun/releases/download/v20170329/kcptun-linux-amd64-20170315.tar.gz</span><br><span class=\"line\">tar -zxvf kcptun-linux-amd64-20170315.tar.gz</span><br></pre></td></tr></table></figure>\n<p>解压出来的两个文件，client开头的客户端和server开头的服务端。</p>\n<p>5.建立start脚本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /root/kcptun/start.sh</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /root/kcptun/</span><br><span class=\"line\">./server_linux_386 -c /root/kcptun/server-config.json &gt; kcptun.log 2&gt;&amp;1 &amp;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Kcptun started.&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>6.建立stop脚本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /root/kcptun/sto.sh</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Stopping Kcptun...&quot;</span></span><br><span class=\"line\">PID=`ps -ef | grep server_linux_amd64 | grep -v grep | awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;&quot;</span> !=  <span class=\"string\">&quot;<span class=\"variable\">$PID</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;killing <span class=\"variable\">$PID</span>&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">kill</span> -9 <span class=\"variable\">$PID</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Kcptun stoped.&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>7.建立restart.sh脚本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /root/kcptun/restart.sh</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /root/kcptun/</span><br><span class=\"line\">sh stop.sh</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Restarting Kcptun...&quot;</span></span><br><span class=\"line\">sh start.sh</span><br></pre></td></tr></table></figure>\n\n<p>8.添加脚本执行权限：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> +x *.sh</span><br></pre></td></tr></table></figure>\n\n<p>9.建立KCPTun配置文件(注释不写)：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /root/kcptun/server-config.json</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;listen&quot;</span>: <span class=\"string\">&quot;:29900&quot;</span>,              <span class=\"comment\">#监听端口，用一个未占用的就行，起名端口1</span></span><br><span class=\"line\">    <span class=\"string\">&quot;target&quot;</span>: <span class=\"string\">&quot;127.0.0.1:12948&quot;</span>,     <span class=\"comment\">#SS的IP和端口，同机上可以这样，起名端口2</span></span><br><span class=\"line\">    <span class=\"string\">&quot;key&quot;</span>: <span class=\"string\">&quot;https://awy.me&quot;</span>,         <span class=\"comment\">#密码</span></span><br><span class=\"line\">    <span class=\"string\">&quot;crypt&quot;</span>: <span class=\"string\">&quot;salsa20&quot;</span>,              <span class=\"comment\">#加密方式</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mode&quot;</span>: <span class=\"string\">&quot;fast2&quot;</span>,                 <span class=\"comment\">#加速模式</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mtu&quot;</span>: 1350,</span><br><span class=\"line\">    <span class=\"string\">&quot;sndwnd&quot;</span>: 1024,</span><br><span class=\"line\">    <span class=\"string\">&quot;rcvwnd&quot;</span>: 1024,</span><br><span class=\"line\">    <span class=\"string\">&quot;datashard&quot;</span>: 70,</span><br><span class=\"line\">    <span class=\"string\">&quot;parityshard&quot;</span>: 30,</span><br><span class=\"line\">    <span class=\"string\">&quot;dscp&quot;</span>: 46,</span><br><span class=\"line\">    <span class=\"string\">&quot;nocomp&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;acknodelay&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;nodelay&quot;</span>: 0,</span><br><span class=\"line\">    <span class=\"string\">&quot;interval&quot;</span>: 40,</span><br><span class=\"line\">    <span class=\"string\">&quot;resend&quot;</span>: 0,</span><br><span class=\"line\">    <span class=\"string\">&quot;nc&quot;</span>: 0,</span><br><span class=\"line\">    <span class=\"string\">&quot;sockbuf&quot;</span>: 4194304,</span><br><span class=\"line\">    <span class=\"string\">&quot;keepalive&quot;</span>: 10</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>10.启动KCPTun并添加开机运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh /root/kcptun/start.sh</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x /etc/rc.local;<span class=\"built_in\">echo</span> <span class=\"string\">&quot;sh /root/kcptun/start.sh&quot;</span> &gt;&gt; /etc/rc.local</span><br></pre></td></tr></table></figure>\n\n<p>服务器端到此就设置完成。</p>\n<h2 id=\"windows端配置\"><a href=\"#windows端配置\" class=\"headerlink\" title=\"windows端配置\"></a>windows端配置</h2><p>下载GUI版的KPCTun客户端，长这样：<br><img src=\"/assets/images/180504_2.jpg\"><br>下载windows版KCPTun客户端，能解压出client_windows_amd64.exe和kcptun_gclient.exe文件，同linux版差别不大。<br>将这三个文件放入同一文件夹，因为运行会自动产生额外配置文件。</p>\n<p>基础参数中：<br>本地监听端口随意选一个未占用的，起名端口3；<br>服务器地址为VPS的IP；<br>端口为服务器端设置端口，即端口1。</p>\n<p>可选参数、传输模式、隐藏参数中：<br>完全依照服务器端的配置设置就行。</p>\n<p>点击启动，出现如下界面就行了。<br><img src=\"/assets/images/180504_3.jpg\"> </p>\n<p>打开SS小飞机：<br>IP地址：127.0.0.1；<br>端口：本地监听端口，即为端口3；<br>密码和加密方式不变。</p>\n<p>windows端配置到此设置完成。</p>\n<h2 id=\"安卓端配置\"><a href=\"#安卓端配置\" class=\"headerlink\" title=\"安卓端配置\"></a>安卓端配置</h2><p>安卓端除了最新版小飞机外，还需要一个叫kcptun的插件，<br>插件以软件的形式安装，完成后小飞机最下面插件才能选择，</p>\n<p>服务器填写VPS的IP；<br>远程端口为服务器监听端口，即端口1；<br>密码和加密方式照旧。</p>\n<p>插件配置如下，根据服务器端的填写修改为自己：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dscp=46;nodelay=0;parityshard=30;interval=40;rcvwnd=1024;crypt=salsa20;nc=0;acknodelay;resend=2;autoexpire=0;key=kcptun;mode=fast2;mtu=1350;datashard=70;keepalive=10;sndwnd=1024;sockbuf=4194304</span><br></pre></td></tr></table></figure>\n<h2 id=\"到此安卓端配置完成。\"><a href=\"#到此安卓端配置完成。\" class=\"headerlink\" title=\"到此安卓端配置完成。\"></a>到此安卓端配置完成。</h2><p>配置下来其实不难，比较混乱的就是端口，一共三个端口，我就能搜出来好几个版本。</p>"},{"layout":"post","title":"Shadowsocks搭建","comments":1,"date":"2019-03-28T06:52:10.000Z","_content":"![](/assets/images/190328_1.jpg)\n搬瓦工下架所有OpenVZ的服务，不能再以之前的价格续费，既如此，换个供应商玩玩，记录下重新搭建Shadowsocks过程中出现的一些状况。\n<!--more-->\nShadowsocks搭建于[Virmath](https://virmach.com/)上，最便宜的服务器每月仅需1.25美元，\n系统信息：Debian 4.9.65-3+deb9u1 (2017-12-23) x86_64\n\n1 首先获取服务器的IP，端口和密码，并登陆SSH；  \n\n2 安装pip  \n```bash\napt-get install -y python-pip\n```\n\n3 通过pip安装Shadowsocks\n```bash\npip install shadowsocks\n```\n\n安装成功后显示:\n![](/assets/images/190328_2.jpg)\n\n4 新建并配置shadowsocks.json\n```bash\nvi /etc/shadowsocks.json\n```\n\n配置如下：\n```bash\n{\n \"server\":\"服务器IP\",\n \"local_address\":\"127.0.0.1\",\n \"local_port\":1080,\n \"port_password\":{\n \"端口1\":\"密码1\",\n \"端口2\":\"密码2\"\n },\n \"timeout\":300,\n \"method\":\"aes-256-cfb\",\n \"fast_open\": false\n}\n```\n\n5 开启Shadowsocks服务\n```bash\nssserver -c /etc/shadowsocks.json -d start \n```\n\n成功后显示:\n![](/assets/images/190328_3.jpg)\n\n后记：\n我在开启服务的时候发生了如下的错误，\n![](/assets/images/190328_4.jpg)\n原因是openssl1.1.0版本中，废弃了EVP_CIPHER_CTX_cleanup函数。\n参考一篇[博客](https://blog.csdn.net/blackfrog_unique/article/details/60320737)所述，修改代码后，此问题得以解决。\n\n文件位置：/usr/local/lib/python2.7/dist-packages/shadowsocks/crypto/openssl.py\n\n将第52行的  \n```bash\nlibcrypto.EVP_CIPHER_CTX_cleanup.argtypes = (c_void_p,)\n```\n\n改为  \n```bash\nlibcrypto.EVP_CIPHER_CTX_reset.argtypes = (c_void_p,)\n```\n\n将第111行的  \n```bash\nlibcrypto.EVP_CIPHER_CTX_cleanup(self._ctx)\n```\n\n改为  \n```bash\nlibcrypto.EVP_CIPHER_CTX_reset(self._ctx)\n```\n","source":"_posts/Shadowsocks搭建.md","raw":"---\nlayout: post\ntitle: Shadowsocks搭建\ncomments: true\ntags:\n  - shadowsock\ndate: 2019-03-28 14:52:10\n---\n![](/assets/images/190328_1.jpg)\n搬瓦工下架所有OpenVZ的服务，不能再以之前的价格续费，既如此，换个供应商玩玩，记录下重新搭建Shadowsocks过程中出现的一些状况。\n<!--more-->\nShadowsocks搭建于[Virmath](https://virmach.com/)上，最便宜的服务器每月仅需1.25美元，\n系统信息：Debian 4.9.65-3+deb9u1 (2017-12-23) x86_64\n\n1 首先获取服务器的IP，端口和密码，并登陆SSH；  \n\n2 安装pip  \n```bash\napt-get install -y python-pip\n```\n\n3 通过pip安装Shadowsocks\n```bash\npip install shadowsocks\n```\n\n安装成功后显示:\n![](/assets/images/190328_2.jpg)\n\n4 新建并配置shadowsocks.json\n```bash\nvi /etc/shadowsocks.json\n```\n\n配置如下：\n```bash\n{\n \"server\":\"服务器IP\",\n \"local_address\":\"127.0.0.1\",\n \"local_port\":1080,\n \"port_password\":{\n \"端口1\":\"密码1\",\n \"端口2\":\"密码2\"\n },\n \"timeout\":300,\n \"method\":\"aes-256-cfb\",\n \"fast_open\": false\n}\n```\n\n5 开启Shadowsocks服务\n```bash\nssserver -c /etc/shadowsocks.json -d start \n```\n\n成功后显示:\n![](/assets/images/190328_3.jpg)\n\n后记：\n我在开启服务的时候发生了如下的错误，\n![](/assets/images/190328_4.jpg)\n原因是openssl1.1.0版本中，废弃了EVP_CIPHER_CTX_cleanup函数。\n参考一篇[博客](https://blog.csdn.net/blackfrog_unique/article/details/60320737)所述，修改代码后，此问题得以解决。\n\n文件位置：/usr/local/lib/python2.7/dist-packages/shadowsocks/crypto/openssl.py\n\n将第52行的  \n```bash\nlibcrypto.EVP_CIPHER_CTX_cleanup.argtypes = (c_void_p,)\n```\n\n改为  \n```bash\nlibcrypto.EVP_CIPHER_CTX_reset.argtypes = (c_void_p,)\n```\n\n将第111行的  \n```bash\nlibcrypto.EVP_CIPHER_CTX_cleanup(self._ctx)\n```\n\n改为  \n```bash\nlibcrypto.EVP_CIPHER_CTX_reset(self._ctx)\n```\n","slug":"Shadowsocks搭建","published":1,"updated":"2021-11-28T14:51:11.945Z","photos":[],"link":"","_id":"cl4kyqft6000920r53dugfins","content":"<p><img src=\"/assets/images/190328_1.jpg\"><br>搬瓦工下架所有OpenVZ的服务，不能再以之前的价格续费，既如此，换个供应商玩玩，记录下重新搭建Shadowsocks过程中出现的一些状况。</p>\n<span id=\"more\"></span>\n<p>Shadowsocks搭建于<a href=\"https://virmach.com/\">Virmath</a>上，最便宜的服务器每月仅需1.25美元，<br>系统信息：Debian 4.9.65-3+deb9u1 (2017-12-23) x86_64</p>\n<p>1 首先获取服务器的IP，端口和密码，并登陆SSH；  </p>\n<p>2 安装pip  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install -y python-pip</span><br></pre></td></tr></table></figure>\n\n<p>3 通过pip安装Shadowsocks</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure>\n\n<p>安装成功后显示:<br><img src=\"/assets/images/190328_2.jpg\"></p>\n<p>4 新建并配置shadowsocks.json</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/shadowsocks.json</span><br></pre></td></tr></table></figure>\n\n<p>配置如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"string\">&quot;server&quot;</span>:<span class=\"string\">&quot;服务器IP&quot;</span>,</span><br><span class=\"line\"> <span class=\"string\">&quot;local_address&quot;</span>:<span class=\"string\">&quot;127.0.0.1&quot;</span>,</span><br><span class=\"line\"> <span class=\"string\">&quot;local_port&quot;</span>:1080,</span><br><span class=\"line\"> <span class=\"string\">&quot;port_password&quot;</span>:&#123;</span><br><span class=\"line\"> <span class=\"string\">&quot;端口1&quot;</span>:<span class=\"string\">&quot;密码1&quot;</span>,</span><br><span class=\"line\"> <span class=\"string\">&quot;端口2&quot;</span>:<span class=\"string\">&quot;密码2&quot;</span></span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> <span class=\"string\">&quot;timeout&quot;</span>:300,</span><br><span class=\"line\"> <span class=\"string\">&quot;method&quot;</span>:<span class=\"string\">&quot;aes-256-cfb&quot;</span>,</span><br><span class=\"line\"> <span class=\"string\">&quot;fast_open&quot;</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5 开启Shadowsocks服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver -c /etc/shadowsocks.json -d start </span><br></pre></td></tr></table></figure>\n\n<p>成功后显示:<br><img src=\"/assets/images/190328_3.jpg\"></p>\n<p>后记：<br>我在开启服务的时候发生了如下的错误，<br><img src=\"/assets/images/190328_4.jpg\"><br>原因是openssl1.1.0版本中，废弃了EVP_CIPHER_CTX_cleanup函数。<br>参考一篇<a href=\"https://blog.csdn.net/blackfrog_unique/article/details/60320737\">博客</a>所述，修改代码后，此问题得以解决。</p>\n<p>文件位置：/usr/local/lib/python2.7/dist-packages/shadowsocks/crypto/openssl.py</p>\n<p>将第52行的  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libcrypto.EVP_CIPHER_CTX_cleanup.argtypes = (c_void_p,)</span><br></pre></td></tr></table></figure>\n\n<p>改为  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libcrypto.EVP_CIPHER_CTX_reset.argtypes = (c_void_p,)</span><br></pre></td></tr></table></figure>\n\n<p>将第111行的  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libcrypto.EVP_CIPHER_CTX_cleanup(self._ctx)</span><br></pre></td></tr></table></figure>\n\n<p>改为  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libcrypto.EVP_CIPHER_CTX_reset(self._ctx)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><img src=\"/assets/images/190328_1.jpg\"><br>搬瓦工下架所有OpenVZ的服务，不能再以之前的价格续费，既如此，换个供应商玩玩，记录下重新搭建Shadowsocks过程中出现的一些状况。</p>","more":"<p>Shadowsocks搭建于<a href=\"https://virmach.com/\">Virmath</a>上，最便宜的服务器每月仅需1.25美元，<br>系统信息：Debian 4.9.65-3+deb9u1 (2017-12-23) x86_64</p>\n<p>1 首先获取服务器的IP，端口和密码，并登陆SSH；  </p>\n<p>2 安装pip  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install -y python-pip</span><br></pre></td></tr></table></figure>\n\n<p>3 通过pip安装Shadowsocks</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure>\n\n<p>安装成功后显示:<br><img src=\"/assets/images/190328_2.jpg\"></p>\n<p>4 新建并配置shadowsocks.json</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/shadowsocks.json</span><br></pre></td></tr></table></figure>\n\n<p>配置如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"string\">&quot;server&quot;</span>:<span class=\"string\">&quot;服务器IP&quot;</span>,</span><br><span class=\"line\"> <span class=\"string\">&quot;local_address&quot;</span>:<span class=\"string\">&quot;127.0.0.1&quot;</span>,</span><br><span class=\"line\"> <span class=\"string\">&quot;local_port&quot;</span>:1080,</span><br><span class=\"line\"> <span class=\"string\">&quot;port_password&quot;</span>:&#123;</span><br><span class=\"line\"> <span class=\"string\">&quot;端口1&quot;</span>:<span class=\"string\">&quot;密码1&quot;</span>,</span><br><span class=\"line\"> <span class=\"string\">&quot;端口2&quot;</span>:<span class=\"string\">&quot;密码2&quot;</span></span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> <span class=\"string\">&quot;timeout&quot;</span>:300,</span><br><span class=\"line\"> <span class=\"string\">&quot;method&quot;</span>:<span class=\"string\">&quot;aes-256-cfb&quot;</span>,</span><br><span class=\"line\"> <span class=\"string\">&quot;fast_open&quot;</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5 开启Shadowsocks服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver -c /etc/shadowsocks.json -d start </span><br></pre></td></tr></table></figure>\n\n<p>成功后显示:<br><img src=\"/assets/images/190328_3.jpg\"></p>\n<p>后记：<br>我在开启服务的时候发生了如下的错误，<br><img src=\"/assets/images/190328_4.jpg\"><br>原因是openssl1.1.0版本中，废弃了EVP_CIPHER_CTX_cleanup函数。<br>参考一篇<a href=\"https://blog.csdn.net/blackfrog_unique/article/details/60320737\">博客</a>所述，修改代码后，此问题得以解决。</p>\n<p>文件位置：/usr/local/lib/python2.7/dist-packages/shadowsocks/crypto/openssl.py</p>\n<p>将第52行的  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libcrypto.EVP_CIPHER_CTX_cleanup.argtypes = (c_void_p,)</span><br></pre></td></tr></table></figure>\n\n<p>改为  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libcrypto.EVP_CIPHER_CTX_reset.argtypes = (c_void_p,)</span><br></pre></td></tr></table></figure>\n\n<p>将第111行的  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libcrypto.EVP_CIPHER_CTX_cleanup(self._ctx)</span><br></pre></td></tr></table></figure>\n\n<p>改为  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libcrypto.EVP_CIPHER_CTX_reset(self._ctx)</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"VBA编程学习-子过程应用（排序）","comments":1,"date":"2022-03-02T03:20:02.000Z","_content":"过程指的就是VBA模块中的代码，或者宏。通过教程的学习，记录实现以下应用的过程：\n通过活动工作簿中Sheet名称的字母顺序，按从小到大的顺序重新整理工作簿Sheet位置。\n<!--more-->\n## 分析应用的需求\n通过分析目标，发现应用需要实现以下需求：\n1. 活动工作簿按照Sheet名称字母的升序进行排序；\n2. 应用可以比较方便地执行；\n3. 可以在不打开用于编程的工作簿时使用程序；\n4. 可以在任何工作簿中运行；\n5. 捕获错误，不弹出任何VBA错误消息。\n\n## 分析应用的问题\n梳理与应用相关的信息，发现目前存在以下问题待解决：\n1. Excel中没有对Sheet进行排序的命令；\n2. 宏录制器无法用来录制Sheet的排序；\n3. 排序需要对Sheet进行移动；\n4. 需要知道活动工作簿中Sheet的数量；\n5. 需要知道活动工作簿中所有Sheet的名称；\n6. 应用能够在其他工作簿中运行。\n\n## 问题拟解决的思路\n根据目前存在的待解决问题，拟考虑通过以下方式处理：\n1. 标识出活动工作簿；\n2. 获取工作簿中所有Sheet的名称，存放到一组字符串类型的数组里；\n3. 对数组进行升序排列；\n4. 根据新排序的数组重新移动Sheet位置。\n\n## 宏录制器辅助\n在应用实现的过程中，可以通过宏录制器快速了解VBA语法，例如移动Sheet的程序代码。\n通过宏录制器，记录将Sheet3的位置通过鼠标拖动到Sheet1之前的动作，查看代码，发现Move的用法：\n    ```\n    Sub MoveSheet()\n        Sheets(\"Sheet3\").Select\n        Sheets(\"Sheet3\").Move Before:=Sheets(1)\n    End Sub\n    ```\n\n## 立即窗口辅助\n在应用实现的过程中，还可以通过立即窗口，快速查看代码的运行结果，例如测试查阅的语句。\n为获取工作簿中Sheet数量，通过查阅资料，发现集合的Count属性，在立即窗口测试：\n    `?ActiveWorkbook.Sheets.Count`\n得到测试结果，为实际Sheet的数量；\n为获取工作簿中Sheet的名称，在立即窗口测试：\n    `?ActiveWorkbook.Sheets(1).Name`\n得到测试结果，为实际Sheet的名称；\n\n## 子功能编写\n### 遍历集合中的每个成员\n使用For Each-Next结构实现遍历集合的动作：\n    ```\n    Sub Text()\n        For Each sht in ActiveWorkbook.Sheets\n            MsgBox sht.Name\n        Next sht\n    End Sub\n    ```\n代码弹出与活动工作簿中Sheet数量相同的消息框，并对应相应的Sheet名称。\n\n### 将活动工作簿的Sheet名称放入数组\n因为不知道活动工作簿的Sheet具体数量，可以先通过带空括号的Dim语句声明数组，之后使用ReDim语句重新定义数组的维数，使其等于实际的Sheet数量。将Sheet名称输入到SheetNames数组中：\n    ```\n    Sub SortSheets()\n        Dim SheetNames() As String\n        Dim i As Long\n        Dim SheetCount As Long\n    \n        SheetCount = ActiveWorkbook.Sheets.Count\n        ReDim SheetNames(1 To SheetCount)\n\n        For i = 1 To SheetCount\n            SheetNames(i) = ActiveWorkbook.Sheets(i).Name\n            Debug.Print SheetNames(i)\n        Next i\n    End Sub\n    ```\n可在立即窗口中显示结果，为SheetNames数组元素的名称。\n\n### 对数组的元素进行排序\n排序算法互联网上有很多示例，例如通过冒泡排序对数组进行排序，即通过嵌套For-Next循环，比较相邻两个元素值，如果前一个元素值大于后一个元素值，则交换位置，重复多次之后，得到升序的元素值。\n    ```\n    Sub BubbleSort(List() As String)\n        Dim First As Long, Last As Long\n        Dim i As Long, j As Long\n        Dim Temp As String\n        First = LBound(List)\n        Last = UBound(List)\n        For i = First To Last - 1\n            For j = i + 1 To Last\n                If List(i) > List(j) Then\n                    Temp = List(j)\n                    List(j) = List(i)\n                    List(i) = Temp\n                End If\n            Next j\n        Next i\n    End Sub\n    ```\n过程接收不确定元素数量的List一维数组，通过LBound和UBound函数确定数组下界和上界。\n\n### 对数组排序\n通过之前宏录制得到移动Sheet的代码，加上For-Next使其遍历每个工作表：\n    ```\n    For i = 1 To SheetCount\n        ActiveWorkbook.Sheets(SheetNames(i)).Move Before:=ActiveWorkbook.Sheets(i)\n    Next i\n    ```\n\n### 代码整理\n通过整理上述代码，并添加注释行，使代码更便于阅读：\n    ```\n    Sub SortSheets()\n    '按照字母升序移动活动工作簿的Sheet\n\n        Dim SheetNames() As String\n        Dim SheetCount As Long\n        Dim i As Long\n    \n        '统计活动工作簿Sheet数量，并重新设定SheetNames数组元素数量\n        SheetCount = ActiveWorkbook.Sheets.Count\n        ReDim SheetNames(1 To SheetCount)\n   \n        '获取活动工作簿每个Sheet名称\n        For i = 1 To SheetCount\n            SheetNames(i) = ActiveWorkbook.Sheets(i).Name\n        Next i\n   \n        '调用BubbleSort程序对SheetNames数组进行排序\n        Call BubbleSort(SheetNames)\n\n        '移动Sheet\n        For i = 1 To SheetCount\n            ActiveWorkbook.Sheets(SheetNames(i)).Move Before:=ActiveWorkbook.Sheets(i)\n        Next i\n    \n    End Sub\n    ```\n\n## 功能测试\n### 问题发现\n加载其他工作簿进行测试，会发现诸多问题，例如：\n1. 工作簿的Sheet在移动期间，屏幕需要更新，因此Sheet数量越多，排序时间越长；\n2. 排序有字母大小写问题，大写字母的值会大于小写字母；\n3. Excel没有可见工作簿窗口，宏会运行失败；\n4. 工作簿结构受保护的话，移动Sheet命令会失败；\n5. 排序后最后一个Sheet会变成活动工作表，会改变原来的Sheet活动状态；\n6. 通过Ctrl+Break终端宏的运行，VBA会弹出错误消息；\n7. 宏无法返回，误操作导致排序运行后，只能手动恢复。\n\n### 问题修复\n1. 可插入指令关闭屏幕的更新动作，在宏完成后，更新动作恢复：\n    `Application.ScreenUpdating = False`\n2. 通过UCase函数，把Sheet名称转换为大写字母，再进行排序：\n    `If UCase(List(i)) > UCase(List(j)) Then`\n3. 通过代码检查是否有活动工作簿，若没有，则退出过程：\n    `If ActiveWorkbook Is Nothing Then Exit Sub`\n4. 如果工作簿结构受到保护，应该显示弹框消息，让用户自己取消保护，而不是程序：\n    ```\n    If ActiveWorkbook.ProtectStructure Then\n        MsgBox ActiveWorkbook.Name & \" is protected.\", vbCritical, \"Cannot Sort Sheets.\"\n        Exit Sub\n    End If\n    ```\n5. 添加一个变量，记录原来的活动工作表，排序完成后重新激活：\n    `Set OldActive = ActiveSheet`\n    `OldActive.Activate`\n6. 禁用Ctrl+Break组合键功能：\n    `Application.EnableCancelKey = xlDisabled`\n7. 添加确认弹窗，确认用户是否要移动Sheet位置：\n    `If MsgBox(\"Sort the sheets in the active workbook?\", vbQuestion + vbYesNo) <> vbYes Then Exit Sub`\n\n## 功能实现\n通过修复上述问题，完善代码后，所有程序过程如下：\n    ```\n    Sub SortSheets()\n    '按照字母升序移动活动工作簿的Sheet\n\n        Dim SheetNames() As String\n        Dim i As Long\n        Dim SheetCount As Long\n        Dim OldActive As Object\n    \n        '判断是否存在活动工作簿，如果存在，统计Sheet数量\n        If ActiveWorkbook Is Nothing Then Exit Sub ' No active workbook\n        SheetCount = ActiveWorkbook.Sheets.Count\n    \n        '检查工作簿结构是否受到保护，\n        If ActiveWorkbook.ProtectStructure Then\n            MsgBox ActiveWorkbook.Name & \" is protected.\", vbCritical, \"Cannot Sort Sheets.\"\n            Exit Sub\n        End If\n\n        '用户确认是否需要进行Sheet排序\n        If MsgBox(\"Sort the sheets in the active workbook?\", vbQuestion + vbYesNo) <> vbYes Then Exit Sub\n\n        '禁用Ctrl+Break组合键\n        Application.EnableCancelKey = xlDisabled\n       \n        '获取活动工作簿每个Sheet名称\n        SheetCount = ActiveWorkbook.Sheets.Count\n    \n        '重新定义数组元素数量\n        ReDim SheetNames(1 To SheetCount)\n\n        '记录原来的活动工作簿\n        Set OldActive = ActiveSheet\n   \n        '用Sheet名称填充数组\n        For i = 1 To SheetCount\n            SheetNames(i) = ActiveWorkbook.Sheets(i).Name\n        Next i\n   \n        '对数组进行排序\n        Call BubbleSort(SheetNames)\n   \n        '关闭屏幕更新\n        Application.ScreenUpdating = False\n    \n        '移动Sheet\n        For i = 1 To SheetCount\n            ActiveWorkbook.Sheets(SheetNames(i)).Move Before:=ActiveWorkbook.Sheets(i)\n        Next i\n\n        '恢复之前的活动工作表\n        OldActive.Activate\n    \n    End Sub\n\n    Sub BubbleSort(List() As String)\n    '按照字母升序排序法\n        Dim First As Long, Last As Long\n        Dim i As Long, j As Long\n        Dim Temp As String\n        First = LBound(List)\n        Last = UBound(List)\n        For i = First To Last - 1\n            For j = i + 1 To Last\n                If UCase(List(i)) > UCase(List(j)) Then\n                    Temp = List(j)\n                    List(j) = List(i)\n                    List(i) = Temp\n                End If\n            Next j\n        Next i\n    End Sub\n    ```\n\n## 补充\n- 可以在宏最上方添加Option Explicit代码，声明所有变量都需要先定义才能使用，可以避免变量因名拼写等错误带来的结果错误。\n\n- 为了使在其他的工作簿也能使用代码，可以将代码保存在“个人宏工作簿”，即在工程窗口中的Personal.xlsb中编辑代码。\n执行宏的方法：\n   - 按Alt+F8打开宏对话框，选择宏；\n   - 对宏设置快捷键，通过快捷键打开；\n   - 将宏添加到功能区。\n\n- 该实例严格来讲并不符合逻辑，例如Sheet10会排在Sheet2之前。","source":"_posts/VBA编程学习-子过程应用（排序）.md","raw":"---\nlayout: post\ntitle: VBA编程学习-子过程应用（排序）\ncomments: true\ntags:\n  - VBA\ndate: 2022-03-02 11:20:02\n---\n过程指的就是VBA模块中的代码，或者宏。通过教程的学习，记录实现以下应用的过程：\n通过活动工作簿中Sheet名称的字母顺序，按从小到大的顺序重新整理工作簿Sheet位置。\n<!--more-->\n## 分析应用的需求\n通过分析目标，发现应用需要实现以下需求：\n1. 活动工作簿按照Sheet名称字母的升序进行排序；\n2. 应用可以比较方便地执行；\n3. 可以在不打开用于编程的工作簿时使用程序；\n4. 可以在任何工作簿中运行；\n5. 捕获错误，不弹出任何VBA错误消息。\n\n## 分析应用的问题\n梳理与应用相关的信息，发现目前存在以下问题待解决：\n1. Excel中没有对Sheet进行排序的命令；\n2. 宏录制器无法用来录制Sheet的排序；\n3. 排序需要对Sheet进行移动；\n4. 需要知道活动工作簿中Sheet的数量；\n5. 需要知道活动工作簿中所有Sheet的名称；\n6. 应用能够在其他工作簿中运行。\n\n## 问题拟解决的思路\n根据目前存在的待解决问题，拟考虑通过以下方式处理：\n1. 标识出活动工作簿；\n2. 获取工作簿中所有Sheet的名称，存放到一组字符串类型的数组里；\n3. 对数组进行升序排列；\n4. 根据新排序的数组重新移动Sheet位置。\n\n## 宏录制器辅助\n在应用实现的过程中，可以通过宏录制器快速了解VBA语法，例如移动Sheet的程序代码。\n通过宏录制器，记录将Sheet3的位置通过鼠标拖动到Sheet1之前的动作，查看代码，发现Move的用法：\n    ```\n    Sub MoveSheet()\n        Sheets(\"Sheet3\").Select\n        Sheets(\"Sheet3\").Move Before:=Sheets(1)\n    End Sub\n    ```\n\n## 立即窗口辅助\n在应用实现的过程中，还可以通过立即窗口，快速查看代码的运行结果，例如测试查阅的语句。\n为获取工作簿中Sheet数量，通过查阅资料，发现集合的Count属性，在立即窗口测试：\n    `?ActiveWorkbook.Sheets.Count`\n得到测试结果，为实际Sheet的数量；\n为获取工作簿中Sheet的名称，在立即窗口测试：\n    `?ActiveWorkbook.Sheets(1).Name`\n得到测试结果，为实际Sheet的名称；\n\n## 子功能编写\n### 遍历集合中的每个成员\n使用For Each-Next结构实现遍历集合的动作：\n    ```\n    Sub Text()\n        For Each sht in ActiveWorkbook.Sheets\n            MsgBox sht.Name\n        Next sht\n    End Sub\n    ```\n代码弹出与活动工作簿中Sheet数量相同的消息框，并对应相应的Sheet名称。\n\n### 将活动工作簿的Sheet名称放入数组\n因为不知道活动工作簿的Sheet具体数量，可以先通过带空括号的Dim语句声明数组，之后使用ReDim语句重新定义数组的维数，使其等于实际的Sheet数量。将Sheet名称输入到SheetNames数组中：\n    ```\n    Sub SortSheets()\n        Dim SheetNames() As String\n        Dim i As Long\n        Dim SheetCount As Long\n    \n        SheetCount = ActiveWorkbook.Sheets.Count\n        ReDim SheetNames(1 To SheetCount)\n\n        For i = 1 To SheetCount\n            SheetNames(i) = ActiveWorkbook.Sheets(i).Name\n            Debug.Print SheetNames(i)\n        Next i\n    End Sub\n    ```\n可在立即窗口中显示结果，为SheetNames数组元素的名称。\n\n### 对数组的元素进行排序\n排序算法互联网上有很多示例，例如通过冒泡排序对数组进行排序，即通过嵌套For-Next循环，比较相邻两个元素值，如果前一个元素值大于后一个元素值，则交换位置，重复多次之后，得到升序的元素值。\n    ```\n    Sub BubbleSort(List() As String)\n        Dim First As Long, Last As Long\n        Dim i As Long, j As Long\n        Dim Temp As String\n        First = LBound(List)\n        Last = UBound(List)\n        For i = First To Last - 1\n            For j = i + 1 To Last\n                If List(i) > List(j) Then\n                    Temp = List(j)\n                    List(j) = List(i)\n                    List(i) = Temp\n                End If\n            Next j\n        Next i\n    End Sub\n    ```\n过程接收不确定元素数量的List一维数组，通过LBound和UBound函数确定数组下界和上界。\n\n### 对数组排序\n通过之前宏录制得到移动Sheet的代码，加上For-Next使其遍历每个工作表：\n    ```\n    For i = 1 To SheetCount\n        ActiveWorkbook.Sheets(SheetNames(i)).Move Before:=ActiveWorkbook.Sheets(i)\n    Next i\n    ```\n\n### 代码整理\n通过整理上述代码，并添加注释行，使代码更便于阅读：\n    ```\n    Sub SortSheets()\n    '按照字母升序移动活动工作簿的Sheet\n\n        Dim SheetNames() As String\n        Dim SheetCount As Long\n        Dim i As Long\n    \n        '统计活动工作簿Sheet数量，并重新设定SheetNames数组元素数量\n        SheetCount = ActiveWorkbook.Sheets.Count\n        ReDim SheetNames(1 To SheetCount)\n   \n        '获取活动工作簿每个Sheet名称\n        For i = 1 To SheetCount\n            SheetNames(i) = ActiveWorkbook.Sheets(i).Name\n        Next i\n   \n        '调用BubbleSort程序对SheetNames数组进行排序\n        Call BubbleSort(SheetNames)\n\n        '移动Sheet\n        For i = 1 To SheetCount\n            ActiveWorkbook.Sheets(SheetNames(i)).Move Before:=ActiveWorkbook.Sheets(i)\n        Next i\n    \n    End Sub\n    ```\n\n## 功能测试\n### 问题发现\n加载其他工作簿进行测试，会发现诸多问题，例如：\n1. 工作簿的Sheet在移动期间，屏幕需要更新，因此Sheet数量越多，排序时间越长；\n2. 排序有字母大小写问题，大写字母的值会大于小写字母；\n3. Excel没有可见工作簿窗口，宏会运行失败；\n4. 工作簿结构受保护的话，移动Sheet命令会失败；\n5. 排序后最后一个Sheet会变成活动工作表，会改变原来的Sheet活动状态；\n6. 通过Ctrl+Break终端宏的运行，VBA会弹出错误消息；\n7. 宏无法返回，误操作导致排序运行后，只能手动恢复。\n\n### 问题修复\n1. 可插入指令关闭屏幕的更新动作，在宏完成后，更新动作恢复：\n    `Application.ScreenUpdating = False`\n2. 通过UCase函数，把Sheet名称转换为大写字母，再进行排序：\n    `If UCase(List(i)) > UCase(List(j)) Then`\n3. 通过代码检查是否有活动工作簿，若没有，则退出过程：\n    `If ActiveWorkbook Is Nothing Then Exit Sub`\n4. 如果工作簿结构受到保护，应该显示弹框消息，让用户自己取消保护，而不是程序：\n    ```\n    If ActiveWorkbook.ProtectStructure Then\n        MsgBox ActiveWorkbook.Name & \" is protected.\", vbCritical, \"Cannot Sort Sheets.\"\n        Exit Sub\n    End If\n    ```\n5. 添加一个变量，记录原来的活动工作表，排序完成后重新激活：\n    `Set OldActive = ActiveSheet`\n    `OldActive.Activate`\n6. 禁用Ctrl+Break组合键功能：\n    `Application.EnableCancelKey = xlDisabled`\n7. 添加确认弹窗，确认用户是否要移动Sheet位置：\n    `If MsgBox(\"Sort the sheets in the active workbook?\", vbQuestion + vbYesNo) <> vbYes Then Exit Sub`\n\n## 功能实现\n通过修复上述问题，完善代码后，所有程序过程如下：\n    ```\n    Sub SortSheets()\n    '按照字母升序移动活动工作簿的Sheet\n\n        Dim SheetNames() As String\n        Dim i As Long\n        Dim SheetCount As Long\n        Dim OldActive As Object\n    \n        '判断是否存在活动工作簿，如果存在，统计Sheet数量\n        If ActiveWorkbook Is Nothing Then Exit Sub ' No active workbook\n        SheetCount = ActiveWorkbook.Sheets.Count\n    \n        '检查工作簿结构是否受到保护，\n        If ActiveWorkbook.ProtectStructure Then\n            MsgBox ActiveWorkbook.Name & \" is protected.\", vbCritical, \"Cannot Sort Sheets.\"\n            Exit Sub\n        End If\n\n        '用户确认是否需要进行Sheet排序\n        If MsgBox(\"Sort the sheets in the active workbook?\", vbQuestion + vbYesNo) <> vbYes Then Exit Sub\n\n        '禁用Ctrl+Break组合键\n        Application.EnableCancelKey = xlDisabled\n       \n        '获取活动工作簿每个Sheet名称\n        SheetCount = ActiveWorkbook.Sheets.Count\n    \n        '重新定义数组元素数量\n        ReDim SheetNames(1 To SheetCount)\n\n        '记录原来的活动工作簿\n        Set OldActive = ActiveSheet\n   \n        '用Sheet名称填充数组\n        For i = 1 To SheetCount\n            SheetNames(i) = ActiveWorkbook.Sheets(i).Name\n        Next i\n   \n        '对数组进行排序\n        Call BubbleSort(SheetNames)\n   \n        '关闭屏幕更新\n        Application.ScreenUpdating = False\n    \n        '移动Sheet\n        For i = 1 To SheetCount\n            ActiveWorkbook.Sheets(SheetNames(i)).Move Before:=ActiveWorkbook.Sheets(i)\n        Next i\n\n        '恢复之前的活动工作表\n        OldActive.Activate\n    \n    End Sub\n\n    Sub BubbleSort(List() As String)\n    '按照字母升序排序法\n        Dim First As Long, Last As Long\n        Dim i As Long, j As Long\n        Dim Temp As String\n        First = LBound(List)\n        Last = UBound(List)\n        For i = First To Last - 1\n            For j = i + 1 To Last\n                If UCase(List(i)) > UCase(List(j)) Then\n                    Temp = List(j)\n                    List(j) = List(i)\n                    List(i) = Temp\n                End If\n            Next j\n        Next i\n    End Sub\n    ```\n\n## 补充\n- 可以在宏最上方添加Option Explicit代码，声明所有变量都需要先定义才能使用，可以避免变量因名拼写等错误带来的结果错误。\n\n- 为了使在其他的工作簿也能使用代码，可以将代码保存在“个人宏工作簿”，即在工程窗口中的Personal.xlsb中编辑代码。\n执行宏的方法：\n   - 按Alt+F8打开宏对话框，选择宏；\n   - 对宏设置快捷键，通过快捷键打开；\n   - 将宏添加到功能区。\n\n- 该实例严格来讲并不符合逻辑，例如Sheet10会排在Sheet2之前。","slug":"VBA编程学习-子过程应用（排序）","published":1,"updated":"2022-03-02T04:28:48.427Z","photos":[],"link":"","_id":"cl4kyqfta000a20r5fwux1822","content":"<p>过程指的就是VBA模块中的代码，或者宏。通过教程的学习，记录实现以下应用的过程：<br>通过活动工作簿中Sheet名称的字母顺序，按从小到大的顺序重新整理工作簿Sheet位置。</p>\n<span id=\"more\"></span>\n<h2 id=\"分析应用的需求\"><a href=\"#分析应用的需求\" class=\"headerlink\" title=\"分析应用的需求\"></a>分析应用的需求</h2><p>通过分析目标，发现应用需要实现以下需求：</p>\n<ol>\n<li>活动工作簿按照Sheet名称字母的升序进行排序；</li>\n<li>应用可以比较方便地执行；</li>\n<li>可以在不打开用于编程的工作簿时使用程序；</li>\n<li>可以在任何工作簿中运行；</li>\n<li>捕获错误，不弹出任何VBA错误消息。</li>\n</ol>\n<h2 id=\"分析应用的问题\"><a href=\"#分析应用的问题\" class=\"headerlink\" title=\"分析应用的问题\"></a>分析应用的问题</h2><p>梳理与应用相关的信息，发现目前存在以下问题待解决：</p>\n<ol>\n<li>Excel中没有对Sheet进行排序的命令；</li>\n<li>宏录制器无法用来录制Sheet的排序；</li>\n<li>排序需要对Sheet进行移动；</li>\n<li>需要知道活动工作簿中Sheet的数量；</li>\n<li>需要知道活动工作簿中所有Sheet的名称；</li>\n<li>应用能够在其他工作簿中运行。</li>\n</ol>\n<h2 id=\"问题拟解决的思路\"><a href=\"#问题拟解决的思路\" class=\"headerlink\" title=\"问题拟解决的思路\"></a>问题拟解决的思路</h2><p>根据目前存在的待解决问题，拟考虑通过以下方式处理：</p>\n<ol>\n<li>标识出活动工作簿；</li>\n<li>获取工作簿中所有Sheet的名称，存放到一组字符串类型的数组里；</li>\n<li>对数组进行升序排列；</li>\n<li>根据新排序的数组重新移动Sheet位置。</li>\n</ol>\n<h2 id=\"宏录制器辅助\"><a href=\"#宏录制器辅助\" class=\"headerlink\" title=\"宏录制器辅助\"></a>宏录制器辅助</h2><p>在应用实现的过程中，可以通过宏录制器快速了解VBA语法，例如移动Sheet的程序代码。<br>通过宏录制器，记录将Sheet3的位置通过鼠标拖动到Sheet1之前的动作，查看代码，发现Move的用法：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sub MoveSheet()</span><br><span class=\"line\">    Sheets(&quot;Sheet3&quot;).Select</span><br><span class=\"line\">    Sheets(&quot;Sheet3&quot;).Move Before:=Sheets(1)</span><br><span class=\"line\">End Sub</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"立即窗口辅助\"><a href=\"#立即窗口辅助\" class=\"headerlink\" title=\"立即窗口辅助\"></a>立即窗口辅助</h2><p>在应用实现的过程中，还可以通过立即窗口，快速查看代码的运行结果，例如测试查阅的语句。<br>为获取工作簿中Sheet数量，通过查阅资料，发现集合的Count属性，在立即窗口测试：<br>    <code>?ActiveWorkbook.Sheets.Count</code><br>得到测试结果，为实际Sheet的数量；<br>为获取工作簿中Sheet的名称，在立即窗口测试：<br>    <code>?ActiveWorkbook.Sheets(1).Name</code><br>得到测试结果，为实际Sheet的名称；</p>\n<h2 id=\"子功能编写\"><a href=\"#子功能编写\" class=\"headerlink\" title=\"子功能编写\"></a>子功能编写</h2><h3 id=\"遍历集合中的每个成员\"><a href=\"#遍历集合中的每个成员\" class=\"headerlink\" title=\"遍历集合中的每个成员\"></a>遍历集合中的每个成员</h3><p>使用For Each-Next结构实现遍历集合的动作：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sub Text()</span><br><span class=\"line\">    For Each sht in ActiveWorkbook.Sheets</span><br><span class=\"line\">        MsgBox sht.Name</span><br><span class=\"line\">    Next sht</span><br><span class=\"line\">End Sub</span><br></pre></td></tr></table></figure><br>代码弹出与活动工作簿中Sheet数量相同的消息框，并对应相应的Sheet名称。</p>\n<h3 id=\"将活动工作簿的Sheet名称放入数组\"><a href=\"#将活动工作簿的Sheet名称放入数组\" class=\"headerlink\" title=\"将活动工作簿的Sheet名称放入数组\"></a>将活动工作簿的Sheet名称放入数组</h3><p>因为不知道活动工作簿的Sheet具体数量，可以先通过带空括号的Dim语句声明数组，之后使用ReDim语句重新定义数组的维数，使其等于实际的Sheet数量。将Sheet名称输入到SheetNames数组中：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sub SortSheets()</span><br><span class=\"line\">    Dim SheetNames() As String</span><br><span class=\"line\">    Dim i As Long</span><br><span class=\"line\">    Dim SheetCount As Long</span><br><span class=\"line\"></span><br><span class=\"line\">    SheetCount = ActiveWorkbook.Sheets.Count</span><br><span class=\"line\">    ReDim SheetNames(1 To SheetCount)</span><br><span class=\"line\"></span><br><span class=\"line\">    For i = 1 To SheetCount</span><br><span class=\"line\">        SheetNames(i) = ActiveWorkbook.Sheets(i).Name</span><br><span class=\"line\">        Debug.Print SheetNames(i)</span><br><span class=\"line\">    Next i</span><br><span class=\"line\">End Sub</span><br></pre></td></tr></table></figure><br>可在立即窗口中显示结果，为SheetNames数组元素的名称。</p>\n<h3 id=\"对数组的元素进行排序\"><a href=\"#对数组的元素进行排序\" class=\"headerlink\" title=\"对数组的元素进行排序\"></a>对数组的元素进行排序</h3><p>排序算法互联网上有很多示例，例如通过冒泡排序对数组进行排序，即通过嵌套For-Next循环，比较相邻两个元素值，如果前一个元素值大于后一个元素值，则交换位置，重复多次之后，得到升序的元素值。<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sub BubbleSort(List() As String)</span><br><span class=\"line\">    Dim First As Long, Last As Long</span><br><span class=\"line\">    Dim i As Long, j As Long</span><br><span class=\"line\">    Dim Temp As String</span><br><span class=\"line\">    First = LBound(List)</span><br><span class=\"line\">    Last = UBound(List)</span><br><span class=\"line\">    For i = First To Last - 1</span><br><span class=\"line\">        For j = i + 1 To Last</span><br><span class=\"line\">            If List(i) &gt; List(j) Then</span><br><span class=\"line\">                Temp = List(j)</span><br><span class=\"line\">                List(j) = List(i)</span><br><span class=\"line\">                List(i) = Temp</span><br><span class=\"line\">            End If</span><br><span class=\"line\">        Next j</span><br><span class=\"line\">    Next i</span><br><span class=\"line\">End Sub</span><br></pre></td></tr></table></figure><br>过程接收不确定元素数量的List一维数组，通过LBound和UBound函数确定数组下界和上界。</p>\n<h3 id=\"对数组排序\"><a href=\"#对数组排序\" class=\"headerlink\" title=\"对数组排序\"></a>对数组排序</h3><p>通过之前宏录制得到移动Sheet的代码，加上For-Next使其遍历每个工作表：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">For i = 1 To SheetCount</span><br><span class=\"line\">    ActiveWorkbook.Sheets(SheetNames(i)).Move Before:=ActiveWorkbook.Sheets(i)</span><br><span class=\"line\">Next i</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"代码整理\"><a href=\"#代码整理\" class=\"headerlink\" title=\"代码整理\"></a>代码整理</h3><p>通过整理上述代码，并添加注释行，使代码更便于阅读：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sub SortSheets()</span><br><span class=\"line\">&#x27;按照字母升序移动活动工作簿的Sheet</span><br><span class=\"line\"></span><br><span class=\"line\">    Dim SheetNames() As String</span><br><span class=\"line\">    Dim SheetCount As Long</span><br><span class=\"line\">    Dim i As Long</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x27;统计活动工作簿Sheet数量，并重新设定SheetNames数组元素数量</span><br><span class=\"line\">    SheetCount = ActiveWorkbook.Sheets.Count</span><br><span class=\"line\">    ReDim SheetNames(1 To SheetCount)</span><br><span class=\"line\">   </span><br><span class=\"line\">    &#x27;获取活动工作簿每个Sheet名称</span><br><span class=\"line\">    For i = 1 To SheetCount</span><br><span class=\"line\">        SheetNames(i) = ActiveWorkbook.Sheets(i).Name</span><br><span class=\"line\">    Next i</span><br><span class=\"line\">   </span><br><span class=\"line\">    &#x27;调用BubbleSort程序对SheetNames数组进行排序</span><br><span class=\"line\">    Call BubbleSort(SheetNames)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x27;移动Sheet</span><br><span class=\"line\">    For i = 1 To SheetCount</span><br><span class=\"line\">        ActiveWorkbook.Sheets(SheetNames(i)).Move Before:=ActiveWorkbook.Sheets(i)</span><br><span class=\"line\">    Next i</span><br><span class=\"line\"></span><br><span class=\"line\">End Sub</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"功能测试\"><a href=\"#功能测试\" class=\"headerlink\" title=\"功能测试\"></a>功能测试</h2><h3 id=\"问题发现\"><a href=\"#问题发现\" class=\"headerlink\" title=\"问题发现\"></a>问题发现</h3><p>加载其他工作簿进行测试，会发现诸多问题，例如：</p>\n<ol>\n<li>工作簿的Sheet在移动期间，屏幕需要更新，因此Sheet数量越多，排序时间越长；</li>\n<li>排序有字母大小写问题，大写字母的值会大于小写字母；</li>\n<li>Excel没有可见工作簿窗口，宏会运行失败；</li>\n<li>工作簿结构受保护的话，移动Sheet命令会失败；</li>\n<li>排序后最后一个Sheet会变成活动工作表，会改变原来的Sheet活动状态；</li>\n<li>通过Ctrl+Break终端宏的运行，VBA会弹出错误消息；</li>\n<li>宏无法返回，误操作导致排序运行后，只能手动恢复。</li>\n</ol>\n<h3 id=\"问题修复\"><a href=\"#问题修复\" class=\"headerlink\" title=\"问题修复\"></a>问题修复</h3><ol>\n<li>可插入指令关闭屏幕的更新动作，在宏完成后，更新动作恢复：<br> <code>Application.ScreenUpdating = False</code></li>\n<li>通过UCase函数，把Sheet名称转换为大写字母，再进行排序：<br> <code>If UCase(List(i)) &gt; UCase(List(j)) Then</code></li>\n<li>通过代码检查是否有活动工作簿，若没有，则退出过程：<br> <code>If ActiveWorkbook Is Nothing Then Exit Sub</code></li>\n<li>如果工作簿结构受到保护，应该显示弹框消息，让用户自己取消保护，而不是程序： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">If ActiveWorkbook.ProtectStructure Then</span><br><span class=\"line\">    MsgBox ActiveWorkbook.Name &amp; &quot; is protected.&quot;, vbCritical, &quot;Cannot Sort Sheets.&quot;</span><br><span class=\"line\">    Exit Sub</span><br><span class=\"line\">End If</span><br></pre></td></tr></table></figure></li>\n<li>添加一个变量，记录原来的活动工作表，排序完成后重新激活：<br> <code>Set OldActive = ActiveSheet</code><br> <code>OldActive.Activate</code></li>\n<li>禁用Ctrl+Break组合键功能：<br> <code>Application.EnableCancelKey = xlDisabled</code></li>\n<li>添加确认弹窗，确认用户是否要移动Sheet位置：<br> <code>If MsgBox(&quot;Sort the sheets in the active workbook?&quot;, vbQuestion + vbYesNo) &lt;&gt; vbYes Then Exit Sub</code></li>\n</ol>\n<h2 id=\"功能实现\"><a href=\"#功能实现\" class=\"headerlink\" title=\"功能实现\"></a>功能实现</h2><p>通过修复上述问题，完善代码后，所有程序过程如下：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sub SortSheets()</span><br><span class=\"line\">&#x27;按照字母升序移动活动工作簿的Sheet</span><br><span class=\"line\"></span><br><span class=\"line\">    Dim SheetNames() As String</span><br><span class=\"line\">    Dim i As Long</span><br><span class=\"line\">    Dim SheetCount As Long</span><br><span class=\"line\">    Dim OldActive As Object</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x27;判断是否存在活动工作簿，如果存在，统计Sheet数量</span><br><span class=\"line\">    If ActiveWorkbook Is Nothing Then Exit Sub &#x27; No active workbook</span><br><span class=\"line\">    SheetCount = ActiveWorkbook.Sheets.Count</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x27;检查工作簿结构是否受到保护，</span><br><span class=\"line\">    If ActiveWorkbook.ProtectStructure Then</span><br><span class=\"line\">        MsgBox ActiveWorkbook.Name &amp; &quot; is protected.&quot;, vbCritical, &quot;Cannot Sort Sheets.&quot;</span><br><span class=\"line\">        Exit Sub</span><br><span class=\"line\">    End If</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x27;用户确认是否需要进行Sheet排序</span><br><span class=\"line\">    If MsgBox(&quot;Sort the sheets in the active workbook?&quot;, vbQuestion + vbYesNo) &lt;&gt; vbYes Then Exit Sub</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x27;禁用Ctrl+Break组合键</span><br><span class=\"line\">    Application.EnableCancelKey = xlDisabled</span><br><span class=\"line\">   </span><br><span class=\"line\">    &#x27;获取活动工作簿每个Sheet名称</span><br><span class=\"line\">    SheetCount = ActiveWorkbook.Sheets.Count</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x27;重新定义数组元素数量</span><br><span class=\"line\">    ReDim SheetNames(1 To SheetCount)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x27;记录原来的活动工作簿</span><br><span class=\"line\">    Set OldActive = ActiveSheet</span><br><span class=\"line\">   </span><br><span class=\"line\">    &#x27;用Sheet名称填充数组</span><br><span class=\"line\">    For i = 1 To SheetCount</span><br><span class=\"line\">        SheetNames(i) = ActiveWorkbook.Sheets(i).Name</span><br><span class=\"line\">    Next i</span><br><span class=\"line\">   </span><br><span class=\"line\">    &#x27;对数组进行排序</span><br><span class=\"line\">    Call BubbleSort(SheetNames)</span><br><span class=\"line\">   </span><br><span class=\"line\">    &#x27;关闭屏幕更新</span><br><span class=\"line\">    Application.ScreenUpdating = False</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x27;移动Sheet</span><br><span class=\"line\">    For i = 1 To SheetCount</span><br><span class=\"line\">        ActiveWorkbook.Sheets(SheetNames(i)).Move Before:=ActiveWorkbook.Sheets(i)</span><br><span class=\"line\">    Next i</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x27;恢复之前的活动工作表</span><br><span class=\"line\">    OldActive.Activate</span><br><span class=\"line\"></span><br><span class=\"line\">End Sub</span><br><span class=\"line\"></span><br><span class=\"line\">Sub BubbleSort(List() As String)</span><br><span class=\"line\">&#x27;按照字母升序排序法</span><br><span class=\"line\">    Dim First As Long, Last As Long</span><br><span class=\"line\">    Dim i As Long, j As Long</span><br><span class=\"line\">    Dim Temp As String</span><br><span class=\"line\">    First = LBound(List)</span><br><span class=\"line\">    Last = UBound(List)</span><br><span class=\"line\">    For i = First To Last - 1</span><br><span class=\"line\">        For j = i + 1 To Last</span><br><span class=\"line\">            If UCase(List(i)) &gt; UCase(List(j)) Then</span><br><span class=\"line\">                Temp = List(j)</span><br><span class=\"line\">                List(j) = List(i)</span><br><span class=\"line\">                List(i) = Temp</span><br><span class=\"line\">            End If</span><br><span class=\"line\">        Next j</span><br><span class=\"line\">    Next i</span><br><span class=\"line\">End Sub</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><ul>\n<li><p>可以在宏最上方添加Option Explicit代码，声明所有变量都需要先定义才能使用，可以避免变量因名拼写等错误带来的结果错误。</p>\n</li>\n<li><p>为了使在其他的工作簿也能使用代码，可以将代码保存在“个人宏工作簿”，即在工程窗口中的Personal.xlsb中编辑代码。<br>执行宏的方法：</p>\n<ul>\n<li>按Alt+F8打开宏对话框，选择宏；</li>\n<li>对宏设置快捷键，通过快捷键打开；</li>\n<li>将宏添加到功能区。</li>\n</ul>\n</li>\n<li><p>该实例严格来讲并不符合逻辑，例如Sheet10会排在Sheet2之前。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>过程指的就是VBA模块中的代码，或者宏。通过教程的学习，记录实现以下应用的过程：<br>通过活动工作簿中Sheet名称的字母顺序，按从小到大的顺序重新整理工作簿Sheet位置。</p>","more":"<h2 id=\"分析应用的需求\"><a href=\"#分析应用的需求\" class=\"headerlink\" title=\"分析应用的需求\"></a>分析应用的需求</h2><p>通过分析目标，发现应用需要实现以下需求：</p>\n<ol>\n<li>活动工作簿按照Sheet名称字母的升序进行排序；</li>\n<li>应用可以比较方便地执行；</li>\n<li>可以在不打开用于编程的工作簿时使用程序；</li>\n<li>可以在任何工作簿中运行；</li>\n<li>捕获错误，不弹出任何VBA错误消息。</li>\n</ol>\n<h2 id=\"分析应用的问题\"><a href=\"#分析应用的问题\" class=\"headerlink\" title=\"分析应用的问题\"></a>分析应用的问题</h2><p>梳理与应用相关的信息，发现目前存在以下问题待解决：</p>\n<ol>\n<li>Excel中没有对Sheet进行排序的命令；</li>\n<li>宏录制器无法用来录制Sheet的排序；</li>\n<li>排序需要对Sheet进行移动；</li>\n<li>需要知道活动工作簿中Sheet的数量；</li>\n<li>需要知道活动工作簿中所有Sheet的名称；</li>\n<li>应用能够在其他工作簿中运行。</li>\n</ol>\n<h2 id=\"问题拟解决的思路\"><a href=\"#问题拟解决的思路\" class=\"headerlink\" title=\"问题拟解决的思路\"></a>问题拟解决的思路</h2><p>根据目前存在的待解决问题，拟考虑通过以下方式处理：</p>\n<ol>\n<li>标识出活动工作簿；</li>\n<li>获取工作簿中所有Sheet的名称，存放到一组字符串类型的数组里；</li>\n<li>对数组进行升序排列；</li>\n<li>根据新排序的数组重新移动Sheet位置。</li>\n</ol>\n<h2 id=\"宏录制器辅助\"><a href=\"#宏录制器辅助\" class=\"headerlink\" title=\"宏录制器辅助\"></a>宏录制器辅助</h2><p>在应用实现的过程中，可以通过宏录制器快速了解VBA语法，例如移动Sheet的程序代码。<br>通过宏录制器，记录将Sheet3的位置通过鼠标拖动到Sheet1之前的动作，查看代码，发现Move的用法：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sub MoveSheet()</span><br><span class=\"line\">    Sheets(&quot;Sheet3&quot;).Select</span><br><span class=\"line\">    Sheets(&quot;Sheet3&quot;).Move Before:=Sheets(1)</span><br><span class=\"line\">End Sub</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"立即窗口辅助\"><a href=\"#立即窗口辅助\" class=\"headerlink\" title=\"立即窗口辅助\"></a>立即窗口辅助</h2><p>在应用实现的过程中，还可以通过立即窗口，快速查看代码的运行结果，例如测试查阅的语句。<br>为获取工作簿中Sheet数量，通过查阅资料，发现集合的Count属性，在立即窗口测试：<br>    <code>?ActiveWorkbook.Sheets.Count</code><br>得到测试结果，为实际Sheet的数量；<br>为获取工作簿中Sheet的名称，在立即窗口测试：<br>    <code>?ActiveWorkbook.Sheets(1).Name</code><br>得到测试结果，为实际Sheet的名称；</p>\n<h2 id=\"子功能编写\"><a href=\"#子功能编写\" class=\"headerlink\" title=\"子功能编写\"></a>子功能编写</h2><h3 id=\"遍历集合中的每个成员\"><a href=\"#遍历集合中的每个成员\" class=\"headerlink\" title=\"遍历集合中的每个成员\"></a>遍历集合中的每个成员</h3><p>使用For Each-Next结构实现遍历集合的动作：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sub Text()</span><br><span class=\"line\">    For Each sht in ActiveWorkbook.Sheets</span><br><span class=\"line\">        MsgBox sht.Name</span><br><span class=\"line\">    Next sht</span><br><span class=\"line\">End Sub</span><br></pre></td></tr></table></figure><br>代码弹出与活动工作簿中Sheet数量相同的消息框，并对应相应的Sheet名称。</p>\n<h3 id=\"将活动工作簿的Sheet名称放入数组\"><a href=\"#将活动工作簿的Sheet名称放入数组\" class=\"headerlink\" title=\"将活动工作簿的Sheet名称放入数组\"></a>将活动工作簿的Sheet名称放入数组</h3><p>因为不知道活动工作簿的Sheet具体数量，可以先通过带空括号的Dim语句声明数组，之后使用ReDim语句重新定义数组的维数，使其等于实际的Sheet数量。将Sheet名称输入到SheetNames数组中：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sub SortSheets()</span><br><span class=\"line\">    Dim SheetNames() As String</span><br><span class=\"line\">    Dim i As Long</span><br><span class=\"line\">    Dim SheetCount As Long</span><br><span class=\"line\"></span><br><span class=\"line\">    SheetCount = ActiveWorkbook.Sheets.Count</span><br><span class=\"line\">    ReDim SheetNames(1 To SheetCount)</span><br><span class=\"line\"></span><br><span class=\"line\">    For i = 1 To SheetCount</span><br><span class=\"line\">        SheetNames(i) = ActiveWorkbook.Sheets(i).Name</span><br><span class=\"line\">        Debug.Print SheetNames(i)</span><br><span class=\"line\">    Next i</span><br><span class=\"line\">End Sub</span><br></pre></td></tr></table></figure><br>可在立即窗口中显示结果，为SheetNames数组元素的名称。</p>\n<h3 id=\"对数组的元素进行排序\"><a href=\"#对数组的元素进行排序\" class=\"headerlink\" title=\"对数组的元素进行排序\"></a>对数组的元素进行排序</h3><p>排序算法互联网上有很多示例，例如通过冒泡排序对数组进行排序，即通过嵌套For-Next循环，比较相邻两个元素值，如果前一个元素值大于后一个元素值，则交换位置，重复多次之后，得到升序的元素值。<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sub BubbleSort(List() As String)</span><br><span class=\"line\">    Dim First As Long, Last As Long</span><br><span class=\"line\">    Dim i As Long, j As Long</span><br><span class=\"line\">    Dim Temp As String</span><br><span class=\"line\">    First = LBound(List)</span><br><span class=\"line\">    Last = UBound(List)</span><br><span class=\"line\">    For i = First To Last - 1</span><br><span class=\"line\">        For j = i + 1 To Last</span><br><span class=\"line\">            If List(i) &gt; List(j) Then</span><br><span class=\"line\">                Temp = List(j)</span><br><span class=\"line\">                List(j) = List(i)</span><br><span class=\"line\">                List(i) = Temp</span><br><span class=\"line\">            End If</span><br><span class=\"line\">        Next j</span><br><span class=\"line\">    Next i</span><br><span class=\"line\">End Sub</span><br></pre></td></tr></table></figure><br>过程接收不确定元素数量的List一维数组，通过LBound和UBound函数确定数组下界和上界。</p>\n<h3 id=\"对数组排序\"><a href=\"#对数组排序\" class=\"headerlink\" title=\"对数组排序\"></a>对数组排序</h3><p>通过之前宏录制得到移动Sheet的代码，加上For-Next使其遍历每个工作表：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">For i = 1 To SheetCount</span><br><span class=\"line\">    ActiveWorkbook.Sheets(SheetNames(i)).Move Before:=ActiveWorkbook.Sheets(i)</span><br><span class=\"line\">Next i</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"代码整理\"><a href=\"#代码整理\" class=\"headerlink\" title=\"代码整理\"></a>代码整理</h3><p>通过整理上述代码，并添加注释行，使代码更便于阅读：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sub SortSheets()</span><br><span class=\"line\">&#x27;按照字母升序移动活动工作簿的Sheet</span><br><span class=\"line\"></span><br><span class=\"line\">    Dim SheetNames() As String</span><br><span class=\"line\">    Dim SheetCount As Long</span><br><span class=\"line\">    Dim i As Long</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x27;统计活动工作簿Sheet数量，并重新设定SheetNames数组元素数量</span><br><span class=\"line\">    SheetCount = ActiveWorkbook.Sheets.Count</span><br><span class=\"line\">    ReDim SheetNames(1 To SheetCount)</span><br><span class=\"line\">   </span><br><span class=\"line\">    &#x27;获取活动工作簿每个Sheet名称</span><br><span class=\"line\">    For i = 1 To SheetCount</span><br><span class=\"line\">        SheetNames(i) = ActiveWorkbook.Sheets(i).Name</span><br><span class=\"line\">    Next i</span><br><span class=\"line\">   </span><br><span class=\"line\">    &#x27;调用BubbleSort程序对SheetNames数组进行排序</span><br><span class=\"line\">    Call BubbleSort(SheetNames)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x27;移动Sheet</span><br><span class=\"line\">    For i = 1 To SheetCount</span><br><span class=\"line\">        ActiveWorkbook.Sheets(SheetNames(i)).Move Before:=ActiveWorkbook.Sheets(i)</span><br><span class=\"line\">    Next i</span><br><span class=\"line\"></span><br><span class=\"line\">End Sub</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"功能测试\"><a href=\"#功能测试\" class=\"headerlink\" title=\"功能测试\"></a>功能测试</h2><h3 id=\"问题发现\"><a href=\"#问题发现\" class=\"headerlink\" title=\"问题发现\"></a>问题发现</h3><p>加载其他工作簿进行测试，会发现诸多问题，例如：</p>\n<ol>\n<li>工作簿的Sheet在移动期间，屏幕需要更新，因此Sheet数量越多，排序时间越长；</li>\n<li>排序有字母大小写问题，大写字母的值会大于小写字母；</li>\n<li>Excel没有可见工作簿窗口，宏会运行失败；</li>\n<li>工作簿结构受保护的话，移动Sheet命令会失败；</li>\n<li>排序后最后一个Sheet会变成活动工作表，会改变原来的Sheet活动状态；</li>\n<li>通过Ctrl+Break终端宏的运行，VBA会弹出错误消息；</li>\n<li>宏无法返回，误操作导致排序运行后，只能手动恢复。</li>\n</ol>\n<h3 id=\"问题修复\"><a href=\"#问题修复\" class=\"headerlink\" title=\"问题修复\"></a>问题修复</h3><ol>\n<li>可插入指令关闭屏幕的更新动作，在宏完成后，更新动作恢复：<br> <code>Application.ScreenUpdating = False</code></li>\n<li>通过UCase函数，把Sheet名称转换为大写字母，再进行排序：<br> <code>If UCase(List(i)) &gt; UCase(List(j)) Then</code></li>\n<li>通过代码检查是否有活动工作簿，若没有，则退出过程：<br> <code>If ActiveWorkbook Is Nothing Then Exit Sub</code></li>\n<li>如果工作簿结构受到保护，应该显示弹框消息，让用户自己取消保护，而不是程序： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">If ActiveWorkbook.ProtectStructure Then</span><br><span class=\"line\">    MsgBox ActiveWorkbook.Name &amp; &quot; is protected.&quot;, vbCritical, &quot;Cannot Sort Sheets.&quot;</span><br><span class=\"line\">    Exit Sub</span><br><span class=\"line\">End If</span><br></pre></td></tr></table></figure></li>\n<li>添加一个变量，记录原来的活动工作表，排序完成后重新激活：<br> <code>Set OldActive = ActiveSheet</code><br> <code>OldActive.Activate</code></li>\n<li>禁用Ctrl+Break组合键功能：<br> <code>Application.EnableCancelKey = xlDisabled</code></li>\n<li>添加确认弹窗，确认用户是否要移动Sheet位置：<br> <code>If MsgBox(&quot;Sort the sheets in the active workbook?&quot;, vbQuestion + vbYesNo) &lt;&gt; vbYes Then Exit Sub</code></li>\n</ol>\n<h2 id=\"功能实现\"><a href=\"#功能实现\" class=\"headerlink\" title=\"功能实现\"></a>功能实现</h2><p>通过修复上述问题，完善代码后，所有程序过程如下：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sub SortSheets()</span><br><span class=\"line\">&#x27;按照字母升序移动活动工作簿的Sheet</span><br><span class=\"line\"></span><br><span class=\"line\">    Dim SheetNames() As String</span><br><span class=\"line\">    Dim i As Long</span><br><span class=\"line\">    Dim SheetCount As Long</span><br><span class=\"line\">    Dim OldActive As Object</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x27;判断是否存在活动工作簿，如果存在，统计Sheet数量</span><br><span class=\"line\">    If ActiveWorkbook Is Nothing Then Exit Sub &#x27; No active workbook</span><br><span class=\"line\">    SheetCount = ActiveWorkbook.Sheets.Count</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x27;检查工作簿结构是否受到保护，</span><br><span class=\"line\">    If ActiveWorkbook.ProtectStructure Then</span><br><span class=\"line\">        MsgBox ActiveWorkbook.Name &amp; &quot; is protected.&quot;, vbCritical, &quot;Cannot Sort Sheets.&quot;</span><br><span class=\"line\">        Exit Sub</span><br><span class=\"line\">    End If</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x27;用户确认是否需要进行Sheet排序</span><br><span class=\"line\">    If MsgBox(&quot;Sort the sheets in the active workbook?&quot;, vbQuestion + vbYesNo) &lt;&gt; vbYes Then Exit Sub</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x27;禁用Ctrl+Break组合键</span><br><span class=\"line\">    Application.EnableCancelKey = xlDisabled</span><br><span class=\"line\">   </span><br><span class=\"line\">    &#x27;获取活动工作簿每个Sheet名称</span><br><span class=\"line\">    SheetCount = ActiveWorkbook.Sheets.Count</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x27;重新定义数组元素数量</span><br><span class=\"line\">    ReDim SheetNames(1 To SheetCount)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x27;记录原来的活动工作簿</span><br><span class=\"line\">    Set OldActive = ActiveSheet</span><br><span class=\"line\">   </span><br><span class=\"line\">    &#x27;用Sheet名称填充数组</span><br><span class=\"line\">    For i = 1 To SheetCount</span><br><span class=\"line\">        SheetNames(i) = ActiveWorkbook.Sheets(i).Name</span><br><span class=\"line\">    Next i</span><br><span class=\"line\">   </span><br><span class=\"line\">    &#x27;对数组进行排序</span><br><span class=\"line\">    Call BubbleSort(SheetNames)</span><br><span class=\"line\">   </span><br><span class=\"line\">    &#x27;关闭屏幕更新</span><br><span class=\"line\">    Application.ScreenUpdating = False</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x27;移动Sheet</span><br><span class=\"line\">    For i = 1 To SheetCount</span><br><span class=\"line\">        ActiveWorkbook.Sheets(SheetNames(i)).Move Before:=ActiveWorkbook.Sheets(i)</span><br><span class=\"line\">    Next i</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x27;恢复之前的活动工作表</span><br><span class=\"line\">    OldActive.Activate</span><br><span class=\"line\"></span><br><span class=\"line\">End Sub</span><br><span class=\"line\"></span><br><span class=\"line\">Sub BubbleSort(List() As String)</span><br><span class=\"line\">&#x27;按照字母升序排序法</span><br><span class=\"line\">    Dim First As Long, Last As Long</span><br><span class=\"line\">    Dim i As Long, j As Long</span><br><span class=\"line\">    Dim Temp As String</span><br><span class=\"line\">    First = LBound(List)</span><br><span class=\"line\">    Last = UBound(List)</span><br><span class=\"line\">    For i = First To Last - 1</span><br><span class=\"line\">        For j = i + 1 To Last</span><br><span class=\"line\">            If UCase(List(i)) &gt; UCase(List(j)) Then</span><br><span class=\"line\">                Temp = List(j)</span><br><span class=\"line\">                List(j) = List(i)</span><br><span class=\"line\">                List(i) = Temp</span><br><span class=\"line\">            End If</span><br><span class=\"line\">        Next j</span><br><span class=\"line\">    Next i</span><br><span class=\"line\">End Sub</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><ul>\n<li><p>可以在宏最上方添加Option Explicit代码，声明所有变量都需要先定义才能使用，可以避免变量因名拼写等错误带来的结果错误。</p>\n</li>\n<li><p>为了使在其他的工作簿也能使用代码，可以将代码保存在“个人宏工作簿”，即在工程窗口中的Personal.xlsb中编辑代码。<br>执行宏的方法：</p>\n<ul>\n<li>按Alt+F8打开宏对话框，选择宏；</li>\n<li>对宏设置快捷键，通过快捷键打开；</li>\n<li>将宏添加到功能区。</li>\n</ul>\n</li>\n<li><p>该实例严格来讲并不符合逻辑，例如Sheet10会排在Sheet2之前。</p>\n</li>\n</ul>"},{"layout":"post","title":"VBA编程学习-录制宏","comments":1,"date":"2022-02-25T02:27:43.000Z","_content":"Excel中的**宏**指可以通过调用，执行多个动作的VBA（Visual Basic for Applocation）代码；英文全称为macro-assemblers，指可以将一系列计算机指令作为一个能实现复杂要求程序;简写为macro，由宏观（macroscopical）引申翻译为宏。\n<!--more-->\n**录制宏**能将击键和鼠标单击操作翻译并存储为VBA代码，之后可以在需要时复现动作。按钮在Excel的「开发工具」选项卡中；\n![](/assets/images/220225_1.jpg)\n\n### 宏的录制\n以如下表格为例，录制一个宏：\n![](/assets/images/220225_2.jpg)\n\n1. 选中A1单元格，点击选项卡中的「录制宏」，保存在当前工作簿，宏名、快捷键、说明可自定义；\n![](/assets/images/220225_3.jpg)\n2. 选中A5单元格，键入“统计”；\n3. 选中B5单元格，键入“=COUNTA(B2:B4)”；\n4. 点击选项卡中的「停止录制」。\n\n至此，即可完成一个宏的录制。\n\n### 宏的使用\n选中任意单元格，在「开发工具」选项卡中打开「宏」，选中宏名，单机「执行」即可自动复现上述动作。\n![](/assets/images/220225_4.jpg)\n\n### 宏的代码\n按下Alt+F11，还可以打开编辑器查看代码，在模块1中。\n![](/assets/images/220225_5.jpg)\n\n### 补充（绝对引用和相对引用）\n上述例子中，在任意单元格执行宏时，动作会出现在固定的某个单元格中，这是因为采用了系统默认为的绝对引用；\n选中Excel的「开发工具」选项卡中的「使用相对引用」按钮，重复上述录制宏步骤，完成的宏即为相对引用；\n完成后，在不同单元格（如单元格D1）上执行该宏，会发现动作出现在了不同的位置，该位置是以起始单元格A1为原点，叠加录制宏时动作的方向（向上、向下、向左、向右）和距离，而复现的；\n\n按下Alt+F11查看代码，可以看到绝对引用和相对引用之间代码的区别。\n![](/assets/images/220225_6.jpg)","source":"_posts/VBA编程学习-录制宏.md","raw":"---\nlayout: post\ntitle: VBA编程学习-录制宏\ncomments: true\ntags:\n  - VBA\ndate: 2022-02-25 10:27:43\n---\nExcel中的**宏**指可以通过调用，执行多个动作的VBA（Visual Basic for Applocation）代码；英文全称为macro-assemblers，指可以将一系列计算机指令作为一个能实现复杂要求程序;简写为macro，由宏观（macroscopical）引申翻译为宏。\n<!--more-->\n**录制宏**能将击键和鼠标单击操作翻译并存储为VBA代码，之后可以在需要时复现动作。按钮在Excel的「开发工具」选项卡中；\n![](/assets/images/220225_1.jpg)\n\n### 宏的录制\n以如下表格为例，录制一个宏：\n![](/assets/images/220225_2.jpg)\n\n1. 选中A1单元格，点击选项卡中的「录制宏」，保存在当前工作簿，宏名、快捷键、说明可自定义；\n![](/assets/images/220225_3.jpg)\n2. 选中A5单元格，键入“统计”；\n3. 选中B5单元格，键入“=COUNTA(B2:B4)”；\n4. 点击选项卡中的「停止录制」。\n\n至此，即可完成一个宏的录制。\n\n### 宏的使用\n选中任意单元格，在「开发工具」选项卡中打开「宏」，选中宏名，单机「执行」即可自动复现上述动作。\n![](/assets/images/220225_4.jpg)\n\n### 宏的代码\n按下Alt+F11，还可以打开编辑器查看代码，在模块1中。\n![](/assets/images/220225_5.jpg)\n\n### 补充（绝对引用和相对引用）\n上述例子中，在任意单元格执行宏时，动作会出现在固定的某个单元格中，这是因为采用了系统默认为的绝对引用；\n选中Excel的「开发工具」选项卡中的「使用相对引用」按钮，重复上述录制宏步骤，完成的宏即为相对引用；\n完成后，在不同单元格（如单元格D1）上执行该宏，会发现动作出现在了不同的位置，该位置是以起始单元格A1为原点，叠加录制宏时动作的方向（向上、向下、向左、向右）和距离，而复现的；\n\n按下Alt+F11查看代码，可以看到绝对引用和相对引用之间代码的区别。\n![](/assets/images/220225_6.jpg)","slug":"VBA编程学习-录制宏","published":1,"updated":"2022-02-25T06:52:31.371Z","photos":[],"link":"","_id":"cl4kyqftf000c20r5dk5ggczg","content":"<p>Excel中的<strong>宏</strong>指可以通过调用，执行多个动作的VBA（Visual Basic for Applocation）代码；英文全称为macro-assemblers，指可以将一系列计算机指令作为一个能实现复杂要求程序;简写为macro，由宏观（macroscopical）引申翻译为宏。</p>\n<span id=\"more\"></span>\n<p><strong>录制宏</strong>能将击键和鼠标单击操作翻译并存储为VBA代码，之后可以在需要时复现动作。按钮在Excel的「开发工具」选项卡中；<br><img src=\"/assets/images/220225_1.jpg\"></p>\n<h3 id=\"宏的录制\"><a href=\"#宏的录制\" class=\"headerlink\" title=\"宏的录制\"></a>宏的录制</h3><p>以如下表格为例，录制一个宏：<br><img src=\"/assets/images/220225_2.jpg\"></p>\n<ol>\n<li>选中A1单元格，点击选项卡中的「录制宏」，保存在当前工作簿，宏名、快捷键、说明可自定义；<br><img src=\"/assets/images/220225_3.jpg\"></li>\n<li>选中A5单元格，键入“统计”；</li>\n<li>选中B5单元格，键入“=COUNTA(B2:B4)”；</li>\n<li>点击选项卡中的「停止录制」。</li>\n</ol>\n<p>至此，即可完成一个宏的录制。</p>\n<h3 id=\"宏的使用\"><a href=\"#宏的使用\" class=\"headerlink\" title=\"宏的使用\"></a>宏的使用</h3><p>选中任意单元格，在「开发工具」选项卡中打开「宏」，选中宏名，单机「执行」即可自动复现上述动作。<br><img src=\"/assets/images/220225_4.jpg\"></p>\n<h3 id=\"宏的代码\"><a href=\"#宏的代码\" class=\"headerlink\" title=\"宏的代码\"></a>宏的代码</h3><p>按下Alt+F11，还可以打开编辑器查看代码，在模块1中。<br><img src=\"/assets/images/220225_5.jpg\"></p>\n<h3 id=\"补充（绝对引用和相对引用）\"><a href=\"#补充（绝对引用和相对引用）\" class=\"headerlink\" title=\"补充（绝对引用和相对引用）\"></a>补充（绝对引用和相对引用）</h3><p>上述例子中，在任意单元格执行宏时，动作会出现在固定的某个单元格中，这是因为采用了系统默认为的绝对引用；<br>选中Excel的「开发工具」选项卡中的「使用相对引用」按钮，重复上述录制宏步骤，完成的宏即为相对引用；<br>完成后，在不同单元格（如单元格D1）上执行该宏，会发现动作出现在了不同的位置，该位置是以起始单元格A1为原点，叠加录制宏时动作的方向（向上、向下、向左、向右）和距离，而复现的；</p>\n<p>按下Alt+F11查看代码，可以看到绝对引用和相对引用之间代码的区别。<br><img src=\"/assets/images/220225_6.jpg\"></p>\n","site":{"data":{}},"excerpt":"<p>Excel中的<strong>宏</strong>指可以通过调用，执行多个动作的VBA（Visual Basic for Applocation）代码；英文全称为macro-assemblers，指可以将一系列计算机指令作为一个能实现复杂要求程序;简写为macro，由宏观（macroscopical）引申翻译为宏。</p>","more":"<p><strong>录制宏</strong>能将击键和鼠标单击操作翻译并存储为VBA代码，之后可以在需要时复现动作。按钮在Excel的「开发工具」选项卡中；<br><img src=\"/assets/images/220225_1.jpg\"></p>\n<h3 id=\"宏的录制\"><a href=\"#宏的录制\" class=\"headerlink\" title=\"宏的录制\"></a>宏的录制</h3><p>以如下表格为例，录制一个宏：<br><img src=\"/assets/images/220225_2.jpg\"></p>\n<ol>\n<li>选中A1单元格，点击选项卡中的「录制宏」，保存在当前工作簿，宏名、快捷键、说明可自定义；<br><img src=\"/assets/images/220225_3.jpg\"></li>\n<li>选中A5单元格，键入“统计”；</li>\n<li>选中B5单元格，键入“=COUNTA(B2:B4)”；</li>\n<li>点击选项卡中的「停止录制」。</li>\n</ol>\n<p>至此，即可完成一个宏的录制。</p>\n<h3 id=\"宏的使用\"><a href=\"#宏的使用\" class=\"headerlink\" title=\"宏的使用\"></a>宏的使用</h3><p>选中任意单元格，在「开发工具」选项卡中打开「宏」，选中宏名，单机「执行」即可自动复现上述动作。<br><img src=\"/assets/images/220225_4.jpg\"></p>\n<h3 id=\"宏的代码\"><a href=\"#宏的代码\" class=\"headerlink\" title=\"宏的代码\"></a>宏的代码</h3><p>按下Alt+F11，还可以打开编辑器查看代码，在模块1中。<br><img src=\"/assets/images/220225_5.jpg\"></p>\n<h3 id=\"补充（绝对引用和相对引用）\"><a href=\"#补充（绝对引用和相对引用）\" class=\"headerlink\" title=\"补充（绝对引用和相对引用）\"></a>补充（绝对引用和相对引用）</h3><p>上述例子中，在任意单元格执行宏时，动作会出现在固定的某个单元格中，这是因为采用了系统默认为的绝对引用；<br>选中Excel的「开发工具」选项卡中的「使用相对引用」按钮，重复上述录制宏步骤，完成的宏即为相对引用；<br>完成后，在不同单元格（如单元格D1）上执行该宏，会发现动作出现在了不同的位置，该位置是以起始单元格A1为原点，叠加录制宏时动作的方向（向上、向下、向左、向右）和距离，而复现的；</p>\n<p>按下Alt+F11查看代码，可以看到绝对引用和相对引用之间代码的区别。<br><img src=\"/assets/images/220225_6.jpg\"></p>"},{"layout":"post","title":"一些常用MatLab画图指令","comments":1,"date":"2018-02-11T08:38:29.000Z","_content":"![](/assets/images/180211_1.jpg)\n最近用到一些MATLAB画图命令，每次都查还是有些麻烦，\n于是将用过的程序总结一下，记录于此。\n<!--more-->\n以一个简单的正弦波为例，画出它的时域波形和频域波形，\n```\nclear all;                  %清除记录\nN=2000;                     %获得信号的点数\nfs=1000;                    %抽样频率，要高于信号最高频率的2倍\nt=(0:N-1)/fs;               %信号时域横轴向量\nf=(0:N-1)*fs/N;             %信号频域横轴向量\nx=2*sin(10*pi*2*t);\nfigure('name','时域图');     %出图\nplot(t,x);\nfigure('name','频域图');     %出图\ny=abs(fft(x));\nplot(f,y);\n```\n结果如图：\n![](/assets/images/180211_2.jpg)\n![](/assets/images/180211_3.jpg)\n\n因为频率图横坐标太宽，所以啥都看不出来，\n如果要调整一下曲线，只需在plot后面加上其他语句就行。\n\n限制下频率的横纵坐标，前两个数是横坐标起止，后两个数是纵坐标起止；\n```\naxis([0 20 0 2000]);\n```\n\n给时域横纵坐标都加个标签，前一个是横坐标标签，后一个是纵坐标标签；\n```\nxlabel('时间/s');ylabel('幅度');\n```\n\n给图加一个标题；\n```\ntitle('时域');\n```\n\n给曲线加上网格线；\n```\ngrid on;\n```\n\n曲线加颜色并加粗，LineWidth后的数字代表线条粗细；\n```\nplot(t,x,'r','LineWidth',2);\nplot(f,y,'g','LineWidth',2);\n```\n\n颜色对应：\n'r' 红色 'm' 粉红 'g' 绿色 'c' 青色\n'b' 兰色 'w' 白色 'y' 黄色 'k' 黑色\n\n结果如图：\n![](/assets/images/180211_4.jpg)\n![](/assets/images/180211_5.jpg)\n\n将两种波形显示在一张图上subplot(行数，列数，序号数)；\n```\nsubplot(2,1,1)   \nplot(t,x,'r','LineWidth',2);\nsubplot(2,1,1)   \nplot(f,y,'g','LineWidth',2);\n```\n\n![](/assets/images/180211_6.jpg)\n\n将两种波形显示在一个坐标系内，只需在plot后加俩单词就行。\n```\nhold on;\n```\n\n先记到这，后面用到再补充。","source":"_posts/一些常用MatLab画图指令.md","raw":"---\nlayout: post\ntitle: 一些常用MatLab画图指令\ncomments: true\ndate: 2018-02-11 16:38:29\ntags:\n- MatLab\n---\n![](/assets/images/180211_1.jpg)\n最近用到一些MATLAB画图命令，每次都查还是有些麻烦，\n于是将用过的程序总结一下，记录于此。\n<!--more-->\n以一个简单的正弦波为例，画出它的时域波形和频域波形，\n```\nclear all;                  %清除记录\nN=2000;                     %获得信号的点数\nfs=1000;                    %抽样频率，要高于信号最高频率的2倍\nt=(0:N-1)/fs;               %信号时域横轴向量\nf=(0:N-1)*fs/N;             %信号频域横轴向量\nx=2*sin(10*pi*2*t);\nfigure('name','时域图');     %出图\nplot(t,x);\nfigure('name','频域图');     %出图\ny=abs(fft(x));\nplot(f,y);\n```\n结果如图：\n![](/assets/images/180211_2.jpg)\n![](/assets/images/180211_3.jpg)\n\n因为频率图横坐标太宽，所以啥都看不出来，\n如果要调整一下曲线，只需在plot后面加上其他语句就行。\n\n限制下频率的横纵坐标，前两个数是横坐标起止，后两个数是纵坐标起止；\n```\naxis([0 20 0 2000]);\n```\n\n给时域横纵坐标都加个标签，前一个是横坐标标签，后一个是纵坐标标签；\n```\nxlabel('时间/s');ylabel('幅度');\n```\n\n给图加一个标题；\n```\ntitle('时域');\n```\n\n给曲线加上网格线；\n```\ngrid on;\n```\n\n曲线加颜色并加粗，LineWidth后的数字代表线条粗细；\n```\nplot(t,x,'r','LineWidth',2);\nplot(f,y,'g','LineWidth',2);\n```\n\n颜色对应：\n'r' 红色 'm' 粉红 'g' 绿色 'c' 青色\n'b' 兰色 'w' 白色 'y' 黄色 'k' 黑色\n\n结果如图：\n![](/assets/images/180211_4.jpg)\n![](/assets/images/180211_5.jpg)\n\n将两种波形显示在一张图上subplot(行数，列数，序号数)；\n```\nsubplot(2,1,1)   \nplot(t,x,'r','LineWidth',2);\nsubplot(2,1,1)   \nplot(f,y,'g','LineWidth',2);\n```\n\n![](/assets/images/180211_6.jpg)\n\n将两种波形显示在一个坐标系内，只需在plot后加俩单词就行。\n```\nhold on;\n```\n\n先记到这，后面用到再补充。","slug":"一些常用MatLab画图指令","published":1,"updated":"2021-11-28T14:49:43.477Z","photos":[],"link":"","_id":"cl4kyqftm000f20r5fpx3arvw","content":"<p><img src=\"/assets/images/180211_1.jpg\"><br>最近用到一些MATLAB画图命令，每次都查还是有些麻烦，<br>于是将用过的程序总结一下，记录于此。</p>\n<span id=\"more\"></span>\n<p>以一个简单的正弦波为例，画出它的时域波形和频域波形，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clear all;                  %清除记录</span><br><span class=\"line\">N=2000;                     %获得信号的点数</span><br><span class=\"line\">fs=1000;                    %抽样频率，要高于信号最高频率的2倍</span><br><span class=\"line\">t=(0:N-1)/fs;               %信号时域横轴向量</span><br><span class=\"line\">f=(0:N-1)*fs/N;             %信号频域横轴向量</span><br><span class=\"line\">x=2*sin(10*pi*2*t);</span><br><span class=\"line\">figure(&#x27;name&#x27;,&#x27;时域图&#x27;);     %出图</span><br><span class=\"line\">plot(t,x);</span><br><span class=\"line\">figure(&#x27;name&#x27;,&#x27;频域图&#x27;);     %出图</span><br><span class=\"line\">y=abs(fft(x));</span><br><span class=\"line\">plot(f,y);</span><br></pre></td></tr></table></figure>\n<p>结果如图：<br><img src=\"/assets/images/180211_2.jpg\"><br><img src=\"/assets/images/180211_3.jpg\"></p>\n<p>因为频率图横坐标太宽，所以啥都看不出来，<br>如果要调整一下曲线，只需在plot后面加上其他语句就行。</p>\n<p>限制下频率的横纵坐标，前两个数是横坐标起止，后两个数是纵坐标起止；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axis([0 20 0 2000]);</span><br></pre></td></tr></table></figure>\n\n<p>给时域横纵坐标都加个标签，前一个是横坐标标签，后一个是纵坐标标签；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xlabel(&#x27;时间/s&#x27;);ylabel(&#x27;幅度&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>给图加一个标题；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title(&#x27;时域&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>给曲线加上网格线；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grid on;</span><br></pre></td></tr></table></figure>\n\n<p>曲线加颜色并加粗，LineWidth后的数字代表线条粗细；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plot(t,x,&#x27;r&#x27;,&#x27;LineWidth&#x27;,2);</span><br><span class=\"line\">plot(f,y,&#x27;g&#x27;,&#x27;LineWidth&#x27;,2);</span><br></pre></td></tr></table></figure>\n\n<p>颜色对应：<br>‘r’ 红色 ‘m’ 粉红 ‘g’ 绿色 ‘c’ 青色<br>‘b’ 兰色 ‘w’ 白色 ‘y’ 黄色 ‘k’ 黑色</p>\n<p>结果如图：<br><img src=\"/assets/images/180211_4.jpg\"><br><img src=\"/assets/images/180211_5.jpg\"></p>\n<p>将两种波形显示在一张图上subplot(行数，列数，序号数)；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subplot(2,1,1)   </span><br><span class=\"line\">plot(t,x,&#x27;r&#x27;,&#x27;LineWidth&#x27;,2);</span><br><span class=\"line\">subplot(2,1,1)   </span><br><span class=\"line\">plot(f,y,&#x27;g&#x27;,&#x27;LineWidth&#x27;,2);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/assets/images/180211_6.jpg\"></p>\n<p>将两种波形显示在一个坐标系内，只需在plot后加俩单词就行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hold on;</span><br></pre></td></tr></table></figure>\n\n<p>先记到这，后面用到再补充。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/assets/images/180211_1.jpg\"><br>最近用到一些MATLAB画图命令，每次都查还是有些麻烦，<br>于是将用过的程序总结一下，记录于此。</p>","more":"<p>以一个简单的正弦波为例，画出它的时域波形和频域波形，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clear all;                  %清除记录</span><br><span class=\"line\">N=2000;                     %获得信号的点数</span><br><span class=\"line\">fs=1000;                    %抽样频率，要高于信号最高频率的2倍</span><br><span class=\"line\">t=(0:N-1)/fs;               %信号时域横轴向量</span><br><span class=\"line\">f=(0:N-1)*fs/N;             %信号频域横轴向量</span><br><span class=\"line\">x=2*sin(10*pi*2*t);</span><br><span class=\"line\">figure(&#x27;name&#x27;,&#x27;时域图&#x27;);     %出图</span><br><span class=\"line\">plot(t,x);</span><br><span class=\"line\">figure(&#x27;name&#x27;,&#x27;频域图&#x27;);     %出图</span><br><span class=\"line\">y=abs(fft(x));</span><br><span class=\"line\">plot(f,y);</span><br></pre></td></tr></table></figure>\n<p>结果如图：<br><img src=\"/assets/images/180211_2.jpg\"><br><img src=\"/assets/images/180211_3.jpg\"></p>\n<p>因为频率图横坐标太宽，所以啥都看不出来，<br>如果要调整一下曲线，只需在plot后面加上其他语句就行。</p>\n<p>限制下频率的横纵坐标，前两个数是横坐标起止，后两个数是纵坐标起止；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axis([0 20 0 2000]);</span><br></pre></td></tr></table></figure>\n\n<p>给时域横纵坐标都加个标签，前一个是横坐标标签，后一个是纵坐标标签；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xlabel(&#x27;时间/s&#x27;);ylabel(&#x27;幅度&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>给图加一个标题；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title(&#x27;时域&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>给曲线加上网格线；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grid on;</span><br></pre></td></tr></table></figure>\n\n<p>曲线加颜色并加粗，LineWidth后的数字代表线条粗细；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plot(t,x,&#x27;r&#x27;,&#x27;LineWidth&#x27;,2);</span><br><span class=\"line\">plot(f,y,&#x27;g&#x27;,&#x27;LineWidth&#x27;,2);</span><br></pre></td></tr></table></figure>\n\n<p>颜色对应：<br>‘r’ 红色 ‘m’ 粉红 ‘g’ 绿色 ‘c’ 青色<br>‘b’ 兰色 ‘w’ 白色 ‘y’ 黄色 ‘k’ 黑色</p>\n<p>结果如图：<br><img src=\"/assets/images/180211_4.jpg\"><br><img src=\"/assets/images/180211_5.jpg\"></p>\n<p>将两种波形显示在一张图上subplot(行数，列数，序号数)；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subplot(2,1,1)   </span><br><span class=\"line\">plot(t,x,&#x27;r&#x27;,&#x27;LineWidth&#x27;,2);</span><br><span class=\"line\">subplot(2,1,1)   </span><br><span class=\"line\">plot(f,y,&#x27;g&#x27;,&#x27;LineWidth&#x27;,2);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/assets/images/180211_6.jpg\"></p>\n<p>将两种波形显示在一个坐标系内，只需在plot后加俩单词就行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hold on;</span><br></pre></td></tr></table></figure>\n\n<p>先记到这，后面用到再补充。</p>"},{"layout":"post","title":"三层交换机简单配置-VLAN模式","comments":1,"date":"2021-11-28T13:06:15.000Z","_content":"三层交换机的配置除了网关外，还有一种VLAN的方法；\nVLAN可以隔绝广播，起到预防广播风暴的作用。\n<!--more-->\n### 1. 三层交换机配置-网关模式\n依然以Cisco的[模拟软件](https://www.netacad.com/zh-hans/courses/packet-tracer)为例，建立一台名为L2-Switch1的交换机，连接两台IP地址分别为192.168.1.1和192.168.2.1的计算机，建立一台名为L2-Switch2的交换机，连接两台IP地址为192.168.1.2和192.168.2.2的计算机，将L2-Switch1交换机连接到L3-Switch交换机的1口，将L2-Switch2交换机连接到L3-Switch交换机的2口。\n![](/assets/images/211128_1.jpg)\n此时，相同网段的计算机可以相互ping通，不同网段的计算机不能ping通。\n\n进入L2-Switch1交换机的配置界面，键入命令：\n```\nen  \nconf t  \nvlan 10\nvlan 20\nexit\nint f0/1\nswitchport access vlan 10\nexit\nint f0/2\nswitchport access vlan 20\nexit\nint fa0/24\nswitchport mode trunk\nswitchport trunk allowed vlan all\n```\n\n进入L2-Switch2交换机的配置界面，键入命令：\n```\nen  \nconf t  \nvlan 10\nvlan 20\nexit\nint f0/1\nswitchport access vlan 10\nexit\nint f0/2\nswitchport access vlan 20\nexit\nint fa0/24\nswitchport mode trunk\nswitchport trunk allowed vlan all\n```\n\n进入L3-Switch交换机的配置界面，键入命令：\n```\nen  \nconf t \nip touting  \nvlan 10\nvlan 20\nexit\nint vlan 10\nip address 192.168.1.253 255.255.255.0\nexit\nint vlan 20\nip address 192.168.2.253 255.255.255.0\nexit\n```\n\n在192.168.1.x的两台电脑内设置上述192.168.1.253的默认网关，在192.168.2.x的电脑内设置192.168.2.253的默认网关，就能够实现跨网络的计算机互相访问。\n![](/assets/images/211128_2.jpg)\n\n因为对电口设置了VLAN，如果计算机接入交换机未设置的电口，则需要设置VLAN，并在三层交换机和计算机中添加网关，才能进行跨域访问。","source":"_posts/三层交换机简单配置-VLAN模式.md","raw":"---\nlayout: post\ntitle: 三层交换机简单配置-VLAN模式\ncomments: true\ntags:\n  - 交换机\ndate: 2021-11-28 21:06:15\n---\n三层交换机的配置除了网关外，还有一种VLAN的方法；\nVLAN可以隔绝广播，起到预防广播风暴的作用。\n<!--more-->\n### 1. 三层交换机配置-网关模式\n依然以Cisco的[模拟软件](https://www.netacad.com/zh-hans/courses/packet-tracer)为例，建立一台名为L2-Switch1的交换机，连接两台IP地址分别为192.168.1.1和192.168.2.1的计算机，建立一台名为L2-Switch2的交换机，连接两台IP地址为192.168.1.2和192.168.2.2的计算机，将L2-Switch1交换机连接到L3-Switch交换机的1口，将L2-Switch2交换机连接到L3-Switch交换机的2口。\n![](/assets/images/211128_1.jpg)\n此时，相同网段的计算机可以相互ping通，不同网段的计算机不能ping通。\n\n进入L2-Switch1交换机的配置界面，键入命令：\n```\nen  \nconf t  \nvlan 10\nvlan 20\nexit\nint f0/1\nswitchport access vlan 10\nexit\nint f0/2\nswitchport access vlan 20\nexit\nint fa0/24\nswitchport mode trunk\nswitchport trunk allowed vlan all\n```\n\n进入L2-Switch2交换机的配置界面，键入命令：\n```\nen  \nconf t  \nvlan 10\nvlan 20\nexit\nint f0/1\nswitchport access vlan 10\nexit\nint f0/2\nswitchport access vlan 20\nexit\nint fa0/24\nswitchport mode trunk\nswitchport trunk allowed vlan all\n```\n\n进入L3-Switch交换机的配置界面，键入命令：\n```\nen  \nconf t \nip touting  \nvlan 10\nvlan 20\nexit\nint vlan 10\nip address 192.168.1.253 255.255.255.0\nexit\nint vlan 20\nip address 192.168.2.253 255.255.255.0\nexit\n```\n\n在192.168.1.x的两台电脑内设置上述192.168.1.253的默认网关，在192.168.2.x的电脑内设置192.168.2.253的默认网关，就能够实现跨网络的计算机互相访问。\n![](/assets/images/211128_2.jpg)\n\n因为对电口设置了VLAN，如果计算机接入交换机未设置的电口，则需要设置VLAN，并在三层交换机和计算机中添加网关，才能进行跨域访问。","slug":"三层交换机简单配置-VLAN模式","published":1,"updated":"2022-03-02T04:23:07.297Z","photos":[],"link":"","_id":"cl4kyqftp000h20r59feh90ar","content":"<p>三层交换机的配置除了网关外，还有一种VLAN的方法；<br>VLAN可以隔绝广播，起到预防广播风暴的作用。</p>\n<span id=\"more\"></span>\n<h3 id=\"1-三层交换机配置-网关模式\"><a href=\"#1-三层交换机配置-网关模式\" class=\"headerlink\" title=\"1. 三层交换机配置-网关模式\"></a>1. 三层交换机配置-网关模式</h3><p>依然以Cisco的<a href=\"https://www.netacad.com/zh-hans/courses/packet-tracer\">模拟软件</a>为例，建立一台名为L2-Switch1的交换机，连接两台IP地址分别为192.168.1.1和192.168.2.1的计算机，建立一台名为L2-Switch2的交换机，连接两台IP地址为192.168.1.2和192.168.2.2的计算机，将L2-Switch1交换机连接到L3-Switch交换机的1口，将L2-Switch2交换机连接到L3-Switch交换机的2口。<br><img src=\"/assets/images/211128_1.jpg\"><br>此时，相同网段的计算机可以相互ping通，不同网段的计算机不能ping通。</p>\n<p>进入L2-Switch1交换机的配置界面，键入命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">en  </span><br><span class=\"line\">conf t  </span><br><span class=\"line\">vlan 10</span><br><span class=\"line\">vlan 20</span><br><span class=\"line\">exit</span><br><span class=\"line\">int f0/1</span><br><span class=\"line\">switchport access vlan 10</span><br><span class=\"line\">exit</span><br><span class=\"line\">int f0/2</span><br><span class=\"line\">switchport access vlan 20</span><br><span class=\"line\">exit</span><br><span class=\"line\">int fa0/24</span><br><span class=\"line\">switchport mode trunk</span><br><span class=\"line\">switchport trunk allowed vlan all</span><br></pre></td></tr></table></figure>\n\n<p>进入L2-Switch2交换机的配置界面，键入命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">en  </span><br><span class=\"line\">conf t  </span><br><span class=\"line\">vlan 10</span><br><span class=\"line\">vlan 20</span><br><span class=\"line\">exit</span><br><span class=\"line\">int f0/1</span><br><span class=\"line\">switchport access vlan 10</span><br><span class=\"line\">exit</span><br><span class=\"line\">int f0/2</span><br><span class=\"line\">switchport access vlan 20</span><br><span class=\"line\">exit</span><br><span class=\"line\">int fa0/24</span><br><span class=\"line\">switchport mode trunk</span><br><span class=\"line\">switchport trunk allowed vlan all</span><br></pre></td></tr></table></figure>\n\n<p>进入L3-Switch交换机的配置界面，键入命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">en  </span><br><span class=\"line\">conf t </span><br><span class=\"line\">ip touting  </span><br><span class=\"line\">vlan 10</span><br><span class=\"line\">vlan 20</span><br><span class=\"line\">exit</span><br><span class=\"line\">int vlan 10</span><br><span class=\"line\">ip address 192.168.1.253 255.255.255.0</span><br><span class=\"line\">exit</span><br><span class=\"line\">int vlan 20</span><br><span class=\"line\">ip address 192.168.2.253 255.255.255.0</span><br><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n\n<p>在192.168.1.x的两台电脑内设置上述192.168.1.253的默认网关，在192.168.2.x的电脑内设置192.168.2.253的默认网关，就能够实现跨网络的计算机互相访问。<br><img src=\"/assets/images/211128_2.jpg\"></p>\n<p>因为对电口设置了VLAN，如果计算机接入交换机未设置的电口，则需要设置VLAN，并在三层交换机和计算机中添加网关，才能进行跨域访问。</p>\n","site":{"data":{}},"excerpt":"<p>三层交换机的配置除了网关外，还有一种VLAN的方法；<br>VLAN可以隔绝广播，起到预防广播风暴的作用。</p>","more":"<h3 id=\"1-三层交换机配置-网关模式\"><a href=\"#1-三层交换机配置-网关模式\" class=\"headerlink\" title=\"1. 三层交换机配置-网关模式\"></a>1. 三层交换机配置-网关模式</h3><p>依然以Cisco的<a href=\"https://www.netacad.com/zh-hans/courses/packet-tracer\">模拟软件</a>为例，建立一台名为L2-Switch1的交换机，连接两台IP地址分别为192.168.1.1和192.168.2.1的计算机，建立一台名为L2-Switch2的交换机，连接两台IP地址为192.168.1.2和192.168.2.2的计算机，将L2-Switch1交换机连接到L3-Switch交换机的1口，将L2-Switch2交换机连接到L3-Switch交换机的2口。<br><img src=\"/assets/images/211128_1.jpg\"><br>此时，相同网段的计算机可以相互ping通，不同网段的计算机不能ping通。</p>\n<p>进入L2-Switch1交换机的配置界面，键入命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">en  </span><br><span class=\"line\">conf t  </span><br><span class=\"line\">vlan 10</span><br><span class=\"line\">vlan 20</span><br><span class=\"line\">exit</span><br><span class=\"line\">int f0/1</span><br><span class=\"line\">switchport access vlan 10</span><br><span class=\"line\">exit</span><br><span class=\"line\">int f0/2</span><br><span class=\"line\">switchport access vlan 20</span><br><span class=\"line\">exit</span><br><span class=\"line\">int fa0/24</span><br><span class=\"line\">switchport mode trunk</span><br><span class=\"line\">switchport trunk allowed vlan all</span><br></pre></td></tr></table></figure>\n\n<p>进入L2-Switch2交换机的配置界面，键入命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">en  </span><br><span class=\"line\">conf t  </span><br><span class=\"line\">vlan 10</span><br><span class=\"line\">vlan 20</span><br><span class=\"line\">exit</span><br><span class=\"line\">int f0/1</span><br><span class=\"line\">switchport access vlan 10</span><br><span class=\"line\">exit</span><br><span class=\"line\">int f0/2</span><br><span class=\"line\">switchport access vlan 20</span><br><span class=\"line\">exit</span><br><span class=\"line\">int fa0/24</span><br><span class=\"line\">switchport mode trunk</span><br><span class=\"line\">switchport trunk allowed vlan all</span><br></pre></td></tr></table></figure>\n\n<p>进入L3-Switch交换机的配置界面，键入命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">en  </span><br><span class=\"line\">conf t </span><br><span class=\"line\">ip touting  </span><br><span class=\"line\">vlan 10</span><br><span class=\"line\">vlan 20</span><br><span class=\"line\">exit</span><br><span class=\"line\">int vlan 10</span><br><span class=\"line\">ip address 192.168.1.253 255.255.255.0</span><br><span class=\"line\">exit</span><br><span class=\"line\">int vlan 20</span><br><span class=\"line\">ip address 192.168.2.253 255.255.255.0</span><br><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n\n<p>在192.168.1.x的两台电脑内设置上述192.168.1.253的默认网关，在192.168.2.x的电脑内设置192.168.2.253的默认网关，就能够实现跨网络的计算机互相访问。<br><img src=\"/assets/images/211128_2.jpg\"></p>\n<p>因为对电口设置了VLAN，如果计算机接入交换机未设置的电口，则需要设置VLAN，并在三层交换机和计算机中添加网关，才能进行跨域访问。</p>"},{"layout":"post","title":"三层交换机简单配置-网关模式","comments":1,"date":"2021-11-21T12:26:07.000Z","_content":"通常情况下，当用一台IP地址为192.168.1.1的计算机去ping一台IP地址为192.168.2.1的计算机时，会出现“请求超时”的错误，即无法ping通，此时增加一台配置过的三层交换机，就能实现两台电脑互相访问的目的。\n<!--more-->\n那么在配置三层交换机前，需要了解一些信息。\n\n### 1. 怎么理解IPv4地址？\nIP是在同一个网络中，设备的唯一标识，起初是一串十进制数字，后来由点分为四组十进制数，再后来便于记忆，映射为域名，\n由于计算机的二进制，即每个IP地址的由一个32位的二进制数来表示，以IP地址192.168.1.1为例：\n192二进制表示为1100 0000；168二进制表示为1010 1000；1二进制表示为0000 0001\n那么把上述IP地址转换成一个32位的二进制数就是1100 0000 1010 1000 0000 0001 0000 0001；\n再将这个二进制数转换位十进制数，即3232235777，在网络中，这串数字等同于IP地址，但ping的时候容易被识别成设备名称。\n\n### 2. 怎么理解子网掩码？\n子网掩码必须配合IP地址使用，也是一组32位的二进制数，它用来区分网络范围，即同一网段，可分配多少个IP，\n即以二进制表示子网掩码，从左数多少位为1，相应的二进制下IP地址前多少位必须保持一致，才能被视为同一网络范围，\n比如常见的IP表示方法192.168.1.1/24，这个24指的就是子网掩码，24指32位的子网掩码，前24位为1，\n即1111 1111 1111 1111 1111 1111 0000 0000，将其点分后转换为十进制，即255.255.255.0；\n同时表明IP地址前三组数字相同时，即192.168.1.0-255的形式，才能被视为同一网络范围，\n类似的子网掩码/16指的就是255.255.0.0，IP地址前两组数字相同，就可以被视为同一网络范围。\n\n### 3. 怎么理解默认网关？\n网关的作用是连接两个不同的网络范围，网关就是路由，当设备需要连接其他网络时，会将数据通过网关，传递到其他网络中。\n\n### 4. 二层交换机和三层交换机的区别？\n二层交换机通常用来在同一网络范围内转发数据，三层交换机相当于增加了路由功能的二层交换机，能在不同网络内转发数据。\n\n### 5. 三层交换机配置-网关模式\n大致了解上述信息，就可以开始简单的使用网关来配置三层交换机了。\n\n以Cisco的[模拟软件](https://www.netacad.com/zh-hans/courses/packet-tracer)为例，建立一台名为L2-Switch1的交换机，连接两台IP地址为192.168.1.x网络的计算机(任意电口都可以)，建立一台名为L2-Switch2的交换机，连接两台IP地址为192.168.2.x网络的计算机(任意电口都可以)，将L2-Switch1交换机任意电口连接到L3-Switch交换机的1口，将L2-Switch2交换机任意电口连接到L3-Switch交换机的2口。\n![](/assets/images/211121_1.jpg)\n此时，相同网络内的计算机可以相互ping通，不同网络的计算机不能ping通。\n\n进入L3-Switch交换机的配置界面，键入命令：\n![](/assets/images/211121_2.jpg)\n```\nen  \nconf t  \nno aaa new-model  \t\nno ip domain-lookup  \nip routing  \nno spanning-tree vlan 1  \nint f 0/1  \nno switchport  \t\nno sh\t \nip addr 192.168.1.253 255.255.255.0  \nexit  \nint f 0/2  \nno switchport\t \nno sh\t \nip addr 192.168.2.253 255.255.255.0  \nexit  \nrouter rip  \n version 2  \n timers basic 1 180 0 240  \n network 192.168.1.0  \n network 192.168.2.0  \nend  \nwr  \n```\n\n在L2-Switch1交换机上的两台电脑内设置上述192.168.1.253的默认网关，在L2-Switch2交换机上的电脑内设置192.168.2.253的默认网关，就能够实现跨网络的计算机互相访问。\n![](/assets/images/211121_3.jpg)","source":"_posts/三层交换机简单配置-网关模式.md","raw":"---\nlayout: post\ntitle: 三层交换机简单配置-网关模式\ncomments: true\ntags:\n  - 交换机\ndate: 2021-11-21 20:26:07\n---\n通常情况下，当用一台IP地址为192.168.1.1的计算机去ping一台IP地址为192.168.2.1的计算机时，会出现“请求超时”的错误，即无法ping通，此时增加一台配置过的三层交换机，就能实现两台电脑互相访问的目的。\n<!--more-->\n那么在配置三层交换机前，需要了解一些信息。\n\n### 1. 怎么理解IPv4地址？\nIP是在同一个网络中，设备的唯一标识，起初是一串十进制数字，后来由点分为四组十进制数，再后来便于记忆，映射为域名，\n由于计算机的二进制，即每个IP地址的由一个32位的二进制数来表示，以IP地址192.168.1.1为例：\n192二进制表示为1100 0000；168二进制表示为1010 1000；1二进制表示为0000 0001\n那么把上述IP地址转换成一个32位的二进制数就是1100 0000 1010 1000 0000 0001 0000 0001；\n再将这个二进制数转换位十进制数，即3232235777，在网络中，这串数字等同于IP地址，但ping的时候容易被识别成设备名称。\n\n### 2. 怎么理解子网掩码？\n子网掩码必须配合IP地址使用，也是一组32位的二进制数，它用来区分网络范围，即同一网段，可分配多少个IP，\n即以二进制表示子网掩码，从左数多少位为1，相应的二进制下IP地址前多少位必须保持一致，才能被视为同一网络范围，\n比如常见的IP表示方法192.168.1.1/24，这个24指的就是子网掩码，24指32位的子网掩码，前24位为1，\n即1111 1111 1111 1111 1111 1111 0000 0000，将其点分后转换为十进制，即255.255.255.0；\n同时表明IP地址前三组数字相同时，即192.168.1.0-255的形式，才能被视为同一网络范围，\n类似的子网掩码/16指的就是255.255.0.0，IP地址前两组数字相同，就可以被视为同一网络范围。\n\n### 3. 怎么理解默认网关？\n网关的作用是连接两个不同的网络范围，网关就是路由，当设备需要连接其他网络时，会将数据通过网关，传递到其他网络中。\n\n### 4. 二层交换机和三层交换机的区别？\n二层交换机通常用来在同一网络范围内转发数据，三层交换机相当于增加了路由功能的二层交换机，能在不同网络内转发数据。\n\n### 5. 三层交换机配置-网关模式\n大致了解上述信息，就可以开始简单的使用网关来配置三层交换机了。\n\n以Cisco的[模拟软件](https://www.netacad.com/zh-hans/courses/packet-tracer)为例，建立一台名为L2-Switch1的交换机，连接两台IP地址为192.168.1.x网络的计算机(任意电口都可以)，建立一台名为L2-Switch2的交换机，连接两台IP地址为192.168.2.x网络的计算机(任意电口都可以)，将L2-Switch1交换机任意电口连接到L3-Switch交换机的1口，将L2-Switch2交换机任意电口连接到L3-Switch交换机的2口。\n![](/assets/images/211121_1.jpg)\n此时，相同网络内的计算机可以相互ping通，不同网络的计算机不能ping通。\n\n进入L3-Switch交换机的配置界面，键入命令：\n![](/assets/images/211121_2.jpg)\n```\nen  \nconf t  \nno aaa new-model  \t\nno ip domain-lookup  \nip routing  \nno spanning-tree vlan 1  \nint f 0/1  \nno switchport  \t\nno sh\t \nip addr 192.168.1.253 255.255.255.0  \nexit  \nint f 0/2  \nno switchport\t \nno sh\t \nip addr 192.168.2.253 255.255.255.0  \nexit  \nrouter rip  \n version 2  \n timers basic 1 180 0 240  \n network 192.168.1.0  \n network 192.168.2.0  \nend  \nwr  \n```\n\n在L2-Switch1交换机上的两台电脑内设置上述192.168.1.253的默认网关，在L2-Switch2交换机上的电脑内设置192.168.2.253的默认网关，就能够实现跨网络的计算机互相访问。\n![](/assets/images/211121_3.jpg)","slug":"三层交换机简单配置-网关模式","published":1,"updated":"2022-03-02T04:23:39.438Z","photos":[],"link":"","_id":"cl4kyqftt000j20r52j5a16ne","content":"<p>通常情况下，当用一台IP地址为192.168.1.1的计算机去ping一台IP地址为192.168.2.1的计算机时，会出现“请求超时”的错误，即无法ping通，此时增加一台配置过的三层交换机，就能实现两台电脑互相访问的目的。</p>\n<span id=\"more\"></span>\n<p>那么在配置三层交换机前，需要了解一些信息。</p>\n<h3 id=\"1-怎么理解IPv4地址？\"><a href=\"#1-怎么理解IPv4地址？\" class=\"headerlink\" title=\"1. 怎么理解IPv4地址？\"></a>1. 怎么理解IPv4地址？</h3><p>IP是在同一个网络中，设备的唯一标识，起初是一串十进制数字，后来由点分为四组十进制数，再后来便于记忆，映射为域名，<br>由于计算机的二进制，即每个IP地址的由一个32位的二进制数来表示，以IP地址192.168.1.1为例：<br>192二进制表示为1100 0000；168二进制表示为1010 1000；1二进制表示为0000 0001<br>那么把上述IP地址转换成一个32位的二进制数就是1100 0000 1010 1000 0000 0001 0000 0001；<br>再将这个二进制数转换位十进制数，即3232235777，在网络中，这串数字等同于IP地址，但ping的时候容易被识别成设备名称。</p>\n<h3 id=\"2-怎么理解子网掩码？\"><a href=\"#2-怎么理解子网掩码？\" class=\"headerlink\" title=\"2. 怎么理解子网掩码？\"></a>2. 怎么理解子网掩码？</h3><p>子网掩码必须配合IP地址使用，也是一组32位的二进制数，它用来区分网络范围，即同一网段，可分配多少个IP，<br>即以二进制表示子网掩码，从左数多少位为1，相应的二进制下IP地址前多少位必须保持一致，才能被视为同一网络范围，<br>比如常见的IP表示方法192.168.1.1/24，这个24指的就是子网掩码，24指32位的子网掩码，前24位为1，<br>即1111 1111 1111 1111 1111 1111 0000 0000，将其点分后转换为十进制，即255.255.255.0；<br>同时表明IP地址前三组数字相同时，即192.168.1.0-255的形式，才能被视为同一网络范围，<br>类似的子网掩码/16指的就是255.255.0.0，IP地址前两组数字相同，就可以被视为同一网络范围。</p>\n<h3 id=\"3-怎么理解默认网关？\"><a href=\"#3-怎么理解默认网关？\" class=\"headerlink\" title=\"3. 怎么理解默认网关？\"></a>3. 怎么理解默认网关？</h3><p>网关的作用是连接两个不同的网络范围，网关就是路由，当设备需要连接其他网络时，会将数据通过网关，传递到其他网络中。</p>\n<h3 id=\"4-二层交换机和三层交换机的区别？\"><a href=\"#4-二层交换机和三层交换机的区别？\" class=\"headerlink\" title=\"4. 二层交换机和三层交换机的区别？\"></a>4. 二层交换机和三层交换机的区别？</h3><p>二层交换机通常用来在同一网络范围内转发数据，三层交换机相当于增加了路由功能的二层交换机，能在不同网络内转发数据。</p>\n<h3 id=\"5-三层交换机配置-网关模式\"><a href=\"#5-三层交换机配置-网关模式\" class=\"headerlink\" title=\"5. 三层交换机配置-网关模式\"></a>5. 三层交换机配置-网关模式</h3><p>大致了解上述信息，就可以开始简单的使用网关来配置三层交换机了。</p>\n<p>以Cisco的<a href=\"https://www.netacad.com/zh-hans/courses/packet-tracer\">模拟软件</a>为例，建立一台名为L2-Switch1的交换机，连接两台IP地址为192.168.1.x网络的计算机(任意电口都可以)，建立一台名为L2-Switch2的交换机，连接两台IP地址为192.168.2.x网络的计算机(任意电口都可以)，将L2-Switch1交换机任意电口连接到L3-Switch交换机的1口，将L2-Switch2交换机任意电口连接到L3-Switch交换机的2口。<br><img src=\"/assets/images/211121_1.jpg\"><br>此时，相同网络内的计算机可以相互ping通，不同网络的计算机不能ping通。</p>\n<p>进入L3-Switch交换机的配置界面，键入命令：<br><img src=\"/assets/images/211121_2.jpg\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">en  </span><br><span class=\"line\">conf t  </span><br><span class=\"line\">no aaa new-model  \t</span><br><span class=\"line\">no ip domain-lookup  </span><br><span class=\"line\">ip routing  </span><br><span class=\"line\">no spanning-tree vlan 1  </span><br><span class=\"line\">int f 0/1  </span><br><span class=\"line\">no switchport  \t</span><br><span class=\"line\">no sh\t </span><br><span class=\"line\">ip addr 192.168.1.253 255.255.255.0  </span><br><span class=\"line\">exit  </span><br><span class=\"line\">int f 0/2  </span><br><span class=\"line\">no switchport\t </span><br><span class=\"line\">no sh\t </span><br><span class=\"line\">ip addr 192.168.2.253 255.255.255.0  </span><br><span class=\"line\">exit  </span><br><span class=\"line\">router rip  </span><br><span class=\"line\"> version 2  </span><br><span class=\"line\"> timers basic 1 180 0 240  </span><br><span class=\"line\"> network 192.168.1.0  </span><br><span class=\"line\"> network 192.168.2.0  </span><br><span class=\"line\">end  </span><br><span class=\"line\">wr  </span><br></pre></td></tr></table></figure>\n\n<p>在L2-Switch1交换机上的两台电脑内设置上述192.168.1.253的默认网关，在L2-Switch2交换机上的电脑内设置192.168.2.253的默认网关，就能够实现跨网络的计算机互相访问。<br><img src=\"/assets/images/211121_3.jpg\"></p>\n","site":{"data":{}},"excerpt":"<p>通常情况下，当用一台IP地址为192.168.1.1的计算机去ping一台IP地址为192.168.2.1的计算机时，会出现“请求超时”的错误，即无法ping通，此时增加一台配置过的三层交换机，就能实现两台电脑互相访问的目的。</p>","more":"<p>那么在配置三层交换机前，需要了解一些信息。</p>\n<h3 id=\"1-怎么理解IPv4地址？\"><a href=\"#1-怎么理解IPv4地址？\" class=\"headerlink\" title=\"1. 怎么理解IPv4地址？\"></a>1. 怎么理解IPv4地址？</h3><p>IP是在同一个网络中，设备的唯一标识，起初是一串十进制数字，后来由点分为四组十进制数，再后来便于记忆，映射为域名，<br>由于计算机的二进制，即每个IP地址的由一个32位的二进制数来表示，以IP地址192.168.1.1为例：<br>192二进制表示为1100 0000；168二进制表示为1010 1000；1二进制表示为0000 0001<br>那么把上述IP地址转换成一个32位的二进制数就是1100 0000 1010 1000 0000 0001 0000 0001；<br>再将这个二进制数转换位十进制数，即3232235777，在网络中，这串数字等同于IP地址，但ping的时候容易被识别成设备名称。</p>\n<h3 id=\"2-怎么理解子网掩码？\"><a href=\"#2-怎么理解子网掩码？\" class=\"headerlink\" title=\"2. 怎么理解子网掩码？\"></a>2. 怎么理解子网掩码？</h3><p>子网掩码必须配合IP地址使用，也是一组32位的二进制数，它用来区分网络范围，即同一网段，可分配多少个IP，<br>即以二进制表示子网掩码，从左数多少位为1，相应的二进制下IP地址前多少位必须保持一致，才能被视为同一网络范围，<br>比如常见的IP表示方法192.168.1.1/24，这个24指的就是子网掩码，24指32位的子网掩码，前24位为1，<br>即1111 1111 1111 1111 1111 1111 0000 0000，将其点分后转换为十进制，即255.255.255.0；<br>同时表明IP地址前三组数字相同时，即192.168.1.0-255的形式，才能被视为同一网络范围，<br>类似的子网掩码/16指的就是255.255.0.0，IP地址前两组数字相同，就可以被视为同一网络范围。</p>\n<h3 id=\"3-怎么理解默认网关？\"><a href=\"#3-怎么理解默认网关？\" class=\"headerlink\" title=\"3. 怎么理解默认网关？\"></a>3. 怎么理解默认网关？</h3><p>网关的作用是连接两个不同的网络范围，网关就是路由，当设备需要连接其他网络时，会将数据通过网关，传递到其他网络中。</p>\n<h3 id=\"4-二层交换机和三层交换机的区别？\"><a href=\"#4-二层交换机和三层交换机的区别？\" class=\"headerlink\" title=\"4. 二层交换机和三层交换机的区别？\"></a>4. 二层交换机和三层交换机的区别？</h3><p>二层交换机通常用来在同一网络范围内转发数据，三层交换机相当于增加了路由功能的二层交换机，能在不同网络内转发数据。</p>\n<h3 id=\"5-三层交换机配置-网关模式\"><a href=\"#5-三层交换机配置-网关模式\" class=\"headerlink\" title=\"5. 三层交换机配置-网关模式\"></a>5. 三层交换机配置-网关模式</h3><p>大致了解上述信息，就可以开始简单的使用网关来配置三层交换机了。</p>\n<p>以Cisco的<a href=\"https://www.netacad.com/zh-hans/courses/packet-tracer\">模拟软件</a>为例，建立一台名为L2-Switch1的交换机，连接两台IP地址为192.168.1.x网络的计算机(任意电口都可以)，建立一台名为L2-Switch2的交换机，连接两台IP地址为192.168.2.x网络的计算机(任意电口都可以)，将L2-Switch1交换机任意电口连接到L3-Switch交换机的1口，将L2-Switch2交换机任意电口连接到L3-Switch交换机的2口。<br><img src=\"/assets/images/211121_1.jpg\"><br>此时，相同网络内的计算机可以相互ping通，不同网络的计算机不能ping通。</p>\n<p>进入L3-Switch交换机的配置界面，键入命令：<br><img src=\"/assets/images/211121_2.jpg\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">en  </span><br><span class=\"line\">conf t  </span><br><span class=\"line\">no aaa new-model  \t</span><br><span class=\"line\">no ip domain-lookup  </span><br><span class=\"line\">ip routing  </span><br><span class=\"line\">no spanning-tree vlan 1  </span><br><span class=\"line\">int f 0/1  </span><br><span class=\"line\">no switchport  \t</span><br><span class=\"line\">no sh\t </span><br><span class=\"line\">ip addr 192.168.1.253 255.255.255.0  </span><br><span class=\"line\">exit  </span><br><span class=\"line\">int f 0/2  </span><br><span class=\"line\">no switchport\t </span><br><span class=\"line\">no sh\t </span><br><span class=\"line\">ip addr 192.168.2.253 255.255.255.0  </span><br><span class=\"line\">exit  </span><br><span class=\"line\">router rip  </span><br><span class=\"line\"> version 2  </span><br><span class=\"line\"> timers basic 1 180 0 240  </span><br><span class=\"line\"> network 192.168.1.0  </span><br><span class=\"line\"> network 192.168.2.0  </span><br><span class=\"line\">end  </span><br><span class=\"line\">wr  </span><br></pre></td></tr></table></figure>\n\n<p>在L2-Switch1交换机上的两台电脑内设置上述192.168.1.253的默认网关，在L2-Switch2交换机上的电脑内设置192.168.2.253的默认网关，就能够实现跨网络的计算机互相访问。<br><img src=\"/assets/images/211121_3.jpg\"></p>"},{"layout":"post","title":"修改SSH登陆端口及密码","comments":1,"date":"2019-03-29T07:06:57.000Z","_content":"![](/assets/images/190329_1.jpg)\n新购买的VPS服务器SSH登陆端口和密码通常是系统默认的，IP不太会变，为了安全考虑，其他东西最好自己换一下。\n<!--more-->\n## 修改SSH默认端口\n\n1 编辑SSH配置文件\n```bash\n\tvi /etc/ssh/sshd_config\n```\n\n2 去掉Port 22前的注释#，添加一行预设置的端口\n```bash\n\tPort 22\n\tPort 222\n```\n\n3 重启SSH\n``` bash\n\tsystemctl restart sshd.service\n```\n\n4 查看防火墙配置信息\n```bash\n\tiptables -L -n  \n```\n\n如果出现如下结果，说明防火墙形允许所有请求。\n![](/assets/images/190329_2.jpg)  \n\n注意：后续防火墙的设置针对SSH端口是有保护性的，但我在配置完成后Shadowsocks无法正常使用，翻了一下午博客，暂时没找到行之有效的解决方案。\n\n5 防火墙允许通过新端口  \n```bash\n\tiptables -D INPUT -m state --state NEW -m tcp -p tcp --dport 222 -j DROP\n\tiptables -I INPUT -m state --state NEW -m tcp -p tcp --dport 222 -j ACCEPT\n```\n\n6 保存iptables 配置\n```bash \n\tiptables-save > /etc/iptables.up.rules\n\techo -e '#!/bin/bash\\n/sbin/iptables-restore < /etc/iptables.up.rules' > /etc/network/if-pre-up.d/iptables\n\tchmod +x /etc/network/if-pre-up.d/iptables\n```\n\n7 恢复第2步端口22的注释#，禁止端口22通过防火墙\n```bash \n\tiptables -I INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j DROP\n```\n\n8 参照第6步，保存配置\n\n## 修改SSH登陆密码\n\n1 登陆SSH\n\n2 输入passwd\n\n3 输入两次新密码后修改成功","source":"_posts/修改SSH登陆端口及密码.md","raw":"---\nlayout: post\ntitle: 修改SSH登陆端口及密码\ncomments: true\ntags:\n  - VPS\ndate: 2019-03-29 15:06:57\n---\n![](/assets/images/190329_1.jpg)\n新购买的VPS服务器SSH登陆端口和密码通常是系统默认的，IP不太会变，为了安全考虑，其他东西最好自己换一下。\n<!--more-->\n## 修改SSH默认端口\n\n1 编辑SSH配置文件\n```bash\n\tvi /etc/ssh/sshd_config\n```\n\n2 去掉Port 22前的注释#，添加一行预设置的端口\n```bash\n\tPort 22\n\tPort 222\n```\n\n3 重启SSH\n``` bash\n\tsystemctl restart sshd.service\n```\n\n4 查看防火墙配置信息\n```bash\n\tiptables -L -n  \n```\n\n如果出现如下结果，说明防火墙形允许所有请求。\n![](/assets/images/190329_2.jpg)  \n\n注意：后续防火墙的设置针对SSH端口是有保护性的，但我在配置完成后Shadowsocks无法正常使用，翻了一下午博客，暂时没找到行之有效的解决方案。\n\n5 防火墙允许通过新端口  \n```bash\n\tiptables -D INPUT -m state --state NEW -m tcp -p tcp --dport 222 -j DROP\n\tiptables -I INPUT -m state --state NEW -m tcp -p tcp --dport 222 -j ACCEPT\n```\n\n6 保存iptables 配置\n```bash \n\tiptables-save > /etc/iptables.up.rules\n\techo -e '#!/bin/bash\\n/sbin/iptables-restore < /etc/iptables.up.rules' > /etc/network/if-pre-up.d/iptables\n\tchmod +x /etc/network/if-pre-up.d/iptables\n```\n\n7 恢复第2步端口22的注释#，禁止端口22通过防火墙\n```bash \n\tiptables -I INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j DROP\n```\n\n8 参照第6步，保存配置\n\n## 修改SSH登陆密码\n\n1 登陆SSH\n\n2 输入passwd\n\n3 输入两次新密码后修改成功","slug":"修改SSH登陆端口及密码","published":1,"updated":"2021-11-28T14:49:50.980Z","photos":[],"link":"","_id":"cl4kyqftx000l20r5agepgmqx","content":"<p><img src=\"/assets/images/190329_1.jpg\"><br>新购买的VPS服务器SSH登陆端口和密码通常是系统默认的，IP不太会变，为了安全考虑，其他东西最好自己换一下。</p>\n<span id=\"more\"></span>\n<h2 id=\"修改SSH默认端口\"><a href=\"#修改SSH默认端口\" class=\"headerlink\" title=\"修改SSH默认端口\"></a>修改SSH默认端口</h2><p>1 编辑SSH配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>\n\n<p>2 去掉Port 22前的注释#，添加一行预设置的端口</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Port 22</span><br><span class=\"line\">Port 222</span><br></pre></td></tr></table></figure>\n\n<p>3 重启SSH</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart sshd.service</span><br></pre></td></tr></table></figure>\n\n<p>4 查看防火墙配置信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -L -n  </span><br></pre></td></tr></table></figure>\n\n<p>如果出现如下结果，说明防火墙形允许所有请求。<br><img src=\"/assets/images/190329_2.jpg\">  </p>\n<p>注意：后续防火墙的设置针对SSH端口是有保护性的，但我在配置完成后Shadowsocks无法正常使用，翻了一下午博客，暂时没找到行之有效的解决方案。</p>\n<p>5 防火墙允许通过新端口  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -D INPUT -m state --state NEW -m tcp -p tcp --dport 222 -j DROP</span><br><span class=\"line\">iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport 222 -j ACCEPT</span><br></pre></td></tr></table></figure>\n\n<p>6 保存iptables 配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables-save &gt; /etc/iptables.up.rules</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&#x27;#!/bin/bash\\n/sbin/iptables-restore &lt; /etc/iptables.up.rules&#x27;</span> &gt; /etc/network/if-pre-up.d/iptables</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x /etc/network/if-pre-up.d/iptables</span><br></pre></td></tr></table></figure>\n\n<p>7 恢复第2步端口22的注释#，禁止端口22通过防火墙</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j DROP</span><br></pre></td></tr></table></figure>\n\n<p>8 参照第6步，保存配置</p>\n<h2 id=\"修改SSH登陆密码\"><a href=\"#修改SSH登陆密码\" class=\"headerlink\" title=\"修改SSH登陆密码\"></a>修改SSH登陆密码</h2><p>1 登陆SSH</p>\n<p>2 输入passwd</p>\n<p>3 输入两次新密码后修改成功</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/assets/images/190329_1.jpg\"><br>新购买的VPS服务器SSH登陆端口和密码通常是系统默认的，IP不太会变，为了安全考虑，其他东西最好自己换一下。</p>","more":"<h2 id=\"修改SSH默认端口\"><a href=\"#修改SSH默认端口\" class=\"headerlink\" title=\"修改SSH默认端口\"></a>修改SSH默认端口</h2><p>1 编辑SSH配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>\n\n<p>2 去掉Port 22前的注释#，添加一行预设置的端口</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Port 22</span><br><span class=\"line\">Port 222</span><br></pre></td></tr></table></figure>\n\n<p>3 重启SSH</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart sshd.service</span><br></pre></td></tr></table></figure>\n\n<p>4 查看防火墙配置信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -L -n  </span><br></pre></td></tr></table></figure>\n\n<p>如果出现如下结果，说明防火墙形允许所有请求。<br><img src=\"/assets/images/190329_2.jpg\">  </p>\n<p>注意：后续防火墙的设置针对SSH端口是有保护性的，但我在配置完成后Shadowsocks无法正常使用，翻了一下午博客，暂时没找到行之有效的解决方案。</p>\n<p>5 防火墙允许通过新端口  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -D INPUT -m state --state NEW -m tcp -p tcp --dport 222 -j DROP</span><br><span class=\"line\">iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport 222 -j ACCEPT</span><br></pre></td></tr></table></figure>\n\n<p>6 保存iptables 配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables-save &gt; /etc/iptables.up.rules</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&#x27;#!/bin/bash\\n/sbin/iptables-restore &lt; /etc/iptables.up.rules&#x27;</span> &gt; /etc/network/if-pre-up.d/iptables</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x /etc/network/if-pre-up.d/iptables</span><br></pre></td></tr></table></figure>\n\n<p>7 恢复第2步端口22的注释#，禁止端口22通过防火墙</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j DROP</span><br></pre></td></tr></table></figure>\n\n<p>8 参照第6步，保存配置</p>\n<h2 id=\"修改SSH登陆密码\"><a href=\"#修改SSH登陆密码\" class=\"headerlink\" title=\"修改SSH登陆密码\"></a>修改SSH登陆密码</h2><p>1 登陆SSH</p>\n<p>2 输入passwd</p>\n<p>3 输入两次新密码后修改成功</p>"},{"layout":"post","title":"卸载顽固软件","comments":1,"date":"2020-01-11T14:06:28.000Z","_content":"对面小哥在win下删除一个程序时，直接删除了程序的整个安装目录，但打开控制面板的卸载程序，依旧能看到这个程序的名字，这洁癖可不能忍。\n<!--more-->\n最终的解决方式是，通过搜索关键词，删除掉注册列表里所有跟这个程序相关的项目，重启后卸载程序里才消失不见。\n\n但后期搜索，我发现即使这样做，也并不代表电脑就回到了安装软件前的状态，或者说大概率不太可能回滚到最初的状态了。\n\n因为理论上，一个程序从安装、运行到卸载的整个过程中，在赋予它的权限下，是有能力肆意修改系统里任何它能影响的地方，甚至在正常卸载后也可能不去恢复它带来的改动，这全凭开发者的自我道德约束。\n\n那么反向思考一下，安装一个程序，有可能会给系统添加一些什么内容呢？通过搜索，，发现会有很多不可逆的修改，此处暂不统计，正规程序大致会添加以下项目：\n\n### 安装目录\n1. Program Files(x86)或Program Files或自定义文件夹，用来存放程序及其自身卸载程序；\n2. Program Files\\Common Files文件夹，用来存放同一公司不同程序的共用库文件；\n3. ProgramData文件夹，用来存放程序的相关配置文件；，很多程序会在这个地方存放它的配置相关的信息；\n4. windows\\system32\\drivers文件夹，用来存放一些软件驱动；\n5. 个人文档及内AppData文件夹，用来存放一些个人配置和个人信息；\n6. ProgramData\\Microsoft\\Windows\\Start Menu\\Programs文件夹，用来存放开始菜单内的程序快捷方式。\n\n### 注册列表\n查看方式，运行：regedit\n1. HKEY_CURRENT_USER\\Software，包含程序配置文件；\n2. HKEY_LOCAL_MACHINE\\SOFTWARE，包含程序配置文件。\n\n>补充：\n HKEY_CLASSES_ROOT：启动应用程序所需的全部信息，包含扩展名、驱动、文件关联、编号、图标等；\n HKEY_CURRENT_USER：当前用户的配置信息，包含环境变量、程序、桌面配置等；\n HKEY_LOCAL_MACHINE：本地计算机系统信息，包含硬件和系统信息、安全数据、程序设置等；\n HKEY_USERS：当前用户的使用配置，包含当前用户图标、激活程序组、开始菜单等；\n>HKEY_CURRENT_CONFIG：本地计算机硬件配置，由HKEY_LOCAL_MACHINE映射而来。\n\n### 服务\n查看方式，运行：services.msc\n\n>卸载方法：\n1.输入cmd打开命令提示符，此时抬头为windows\\system32>；\n>2.键入'sc delete 服务名'，刷新服务即可。\n\n### 启动项\n查看方式，打开任务管理器，点击启动。\n\n>可能存在的文件夹：\n 'C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp'\n '%USERPROFILE%\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup'\n可能存在的注册列表：\n 'HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run'\n>'HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run'\n\n### dll文件\ndll是动态链接库，文件包含着多个程序共同使用的代码和数据的库。之前装一些冷门程序时经常会遇到缺少XXX.dll的错误信息，就是少了这个动态链接库的原因，在此一并记录安装和卸载方法。\n\n查询正在运行的哪些程序调用了哪些dll库的方法：\n1. 以管理员权限启动命令提示符\n2. 键入'tasklist /m>D:\\listdll.txt'\n3. 打开D盘刚刚生成的listdll.txt文件，列举了dll调用情况。\n\ndll安装方法一：\n1. 找到.dll文件，将其放入'C:\\Windows\\System32'文件夹内；\n2. 打开运行，键入'regsvr32 库文件名'，成功与否都会有提示。\n\ndll安装方法二:\n1. 找到.dll文件，将其放入任意文件夹内；\n2. 在该文件夹内，右击选择在此处打开命令窗口；\n3. 命令提示符中键入'regsvr32 /s 库文件名；\n\ndll卸载方法：\n1. 找到存放.dll文件的文件夹，防止出错，备份.dll文件；\n2. 在该文件夹内，右击选择在此处打开命令窗口；\n3. 命令提示符中键入'regsvr32 /u 库文件名；\n4. 删除.dll文件。\n\n这只是正规程序可能会添加的文件，要是碰到一些无良开发者，指不定在你的系统某些位置会悄悄塞些什么文件，而且程序的一些修改键值或者配置的操作是属于不可逆的，碰到这种，就毫无办法。\n\n查到一种称为UWP的程序，该类程序需要Microsoft Store审核通过才能上架应用商店，权限后台都会有一定的限制，安装卸载更为方便。\n\n>UWP即Windows 10中的Universal Windows Platform简称。即Windows通用应用平台，在Windows 10 Mobile/Surface（Windows平板电脑）/PC/Xbox/HoloLens等平台上运行，uwp不同于传统pc上的exe应用，也跟只适用于手机端的app有本质区别。它并不是为某一个终端而设>计，而是可以在所有Windows10设备上运行。","source":"_posts/卸载顽固软件用得上.md","raw":"---\nlayout: post\ntitle: 卸载顽固软件\ncomments: true\ntags:\n  - Windows\ndate: 2020-01-11 22:06:28\n---\n对面小哥在win下删除一个程序时，直接删除了程序的整个安装目录，但打开控制面板的卸载程序，依旧能看到这个程序的名字，这洁癖可不能忍。\n<!--more-->\n最终的解决方式是，通过搜索关键词，删除掉注册列表里所有跟这个程序相关的项目，重启后卸载程序里才消失不见。\n\n但后期搜索，我发现即使这样做，也并不代表电脑就回到了安装软件前的状态，或者说大概率不太可能回滚到最初的状态了。\n\n因为理论上，一个程序从安装、运行到卸载的整个过程中，在赋予它的权限下，是有能力肆意修改系统里任何它能影响的地方，甚至在正常卸载后也可能不去恢复它带来的改动，这全凭开发者的自我道德约束。\n\n那么反向思考一下，安装一个程序，有可能会给系统添加一些什么内容呢？通过搜索，，发现会有很多不可逆的修改，此处暂不统计，正规程序大致会添加以下项目：\n\n### 安装目录\n1. Program Files(x86)或Program Files或自定义文件夹，用来存放程序及其自身卸载程序；\n2. Program Files\\Common Files文件夹，用来存放同一公司不同程序的共用库文件；\n3. ProgramData文件夹，用来存放程序的相关配置文件；，很多程序会在这个地方存放它的配置相关的信息；\n4. windows\\system32\\drivers文件夹，用来存放一些软件驱动；\n5. 个人文档及内AppData文件夹，用来存放一些个人配置和个人信息；\n6. ProgramData\\Microsoft\\Windows\\Start Menu\\Programs文件夹，用来存放开始菜单内的程序快捷方式。\n\n### 注册列表\n查看方式，运行：regedit\n1. HKEY_CURRENT_USER\\Software，包含程序配置文件；\n2. HKEY_LOCAL_MACHINE\\SOFTWARE，包含程序配置文件。\n\n>补充：\n HKEY_CLASSES_ROOT：启动应用程序所需的全部信息，包含扩展名、驱动、文件关联、编号、图标等；\n HKEY_CURRENT_USER：当前用户的配置信息，包含环境变量、程序、桌面配置等；\n HKEY_LOCAL_MACHINE：本地计算机系统信息，包含硬件和系统信息、安全数据、程序设置等；\n HKEY_USERS：当前用户的使用配置，包含当前用户图标、激活程序组、开始菜单等；\n>HKEY_CURRENT_CONFIG：本地计算机硬件配置，由HKEY_LOCAL_MACHINE映射而来。\n\n### 服务\n查看方式，运行：services.msc\n\n>卸载方法：\n1.输入cmd打开命令提示符，此时抬头为windows\\system32>；\n>2.键入'sc delete 服务名'，刷新服务即可。\n\n### 启动项\n查看方式，打开任务管理器，点击启动。\n\n>可能存在的文件夹：\n 'C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp'\n '%USERPROFILE%\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup'\n可能存在的注册列表：\n 'HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run'\n>'HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run'\n\n### dll文件\ndll是动态链接库，文件包含着多个程序共同使用的代码和数据的库。之前装一些冷门程序时经常会遇到缺少XXX.dll的错误信息，就是少了这个动态链接库的原因，在此一并记录安装和卸载方法。\n\n查询正在运行的哪些程序调用了哪些dll库的方法：\n1. 以管理员权限启动命令提示符\n2. 键入'tasklist /m>D:\\listdll.txt'\n3. 打开D盘刚刚生成的listdll.txt文件，列举了dll调用情况。\n\ndll安装方法一：\n1. 找到.dll文件，将其放入'C:\\Windows\\System32'文件夹内；\n2. 打开运行，键入'regsvr32 库文件名'，成功与否都会有提示。\n\ndll安装方法二:\n1. 找到.dll文件，将其放入任意文件夹内；\n2. 在该文件夹内，右击选择在此处打开命令窗口；\n3. 命令提示符中键入'regsvr32 /s 库文件名；\n\ndll卸载方法：\n1. 找到存放.dll文件的文件夹，防止出错，备份.dll文件；\n2. 在该文件夹内，右击选择在此处打开命令窗口；\n3. 命令提示符中键入'regsvr32 /u 库文件名；\n4. 删除.dll文件。\n\n这只是正规程序可能会添加的文件，要是碰到一些无良开发者，指不定在你的系统某些位置会悄悄塞些什么文件，而且程序的一些修改键值或者配置的操作是属于不可逆的，碰到这种，就毫无办法。\n\n查到一种称为UWP的程序，该类程序需要Microsoft Store审核通过才能上架应用商店，权限后台都会有一定的限制，安装卸载更为方便。\n\n>UWP即Windows 10中的Universal Windows Platform简称。即Windows通用应用平台，在Windows 10 Mobile/Surface（Windows平板电脑）/PC/Xbox/HoloLens等平台上运行，uwp不同于传统pc上的exe应用，也跟只适用于手机端的app有本质区别。它并不是为某一个终端而设>计，而是可以在所有Windows10设备上运行。","slug":"卸载顽固软件用得上","published":1,"updated":"2021-11-28T14:50:02.889Z","photos":[],"link":"","_id":"cl4kyqftz000m20r58bu618ab","content":"<p>对面小哥在win下删除一个程序时，直接删除了程序的整个安装目录，但打开控制面板的卸载程序，依旧能看到这个程序的名字，这洁癖可不能忍。</p>\n<span id=\"more\"></span>\n<p>最终的解决方式是，通过搜索关键词，删除掉注册列表里所有跟这个程序相关的项目，重启后卸载程序里才消失不见。</p>\n<p>但后期搜索，我发现即使这样做，也并不代表电脑就回到了安装软件前的状态，或者说大概率不太可能回滚到最初的状态了。</p>\n<p>因为理论上，一个程序从安装、运行到卸载的整个过程中，在赋予它的权限下，是有能力肆意修改系统里任何它能影响的地方，甚至在正常卸载后也可能不去恢复它带来的改动，这全凭开发者的自我道德约束。</p>\n<p>那么反向思考一下，安装一个程序，有可能会给系统添加一些什么内容呢？通过搜索，，发现会有很多不可逆的修改，此处暂不统计，正规程序大致会添加以下项目：</p>\n<h3 id=\"安装目录\"><a href=\"#安装目录\" class=\"headerlink\" title=\"安装目录\"></a>安装目录</h3><ol>\n<li>Program Files(x86)或Program Files或自定义文件夹，用来存放程序及其自身卸载程序；</li>\n<li>Program Files\\Common Files文件夹，用来存放同一公司不同程序的共用库文件；</li>\n<li>ProgramData文件夹，用来存放程序的相关配置文件；，很多程序会在这个地方存放它的配置相关的信息；</li>\n<li>windows\\system32\\drivers文件夹，用来存放一些软件驱动；</li>\n<li>个人文档及内AppData文件夹，用来存放一些个人配置和个人信息；</li>\n<li>ProgramData\\Microsoft\\Windows\\Start Menu\\Programs文件夹，用来存放开始菜单内的程序快捷方式。</li>\n</ol>\n<h3 id=\"注册列表\"><a href=\"#注册列表\" class=\"headerlink\" title=\"注册列表\"></a>注册列表</h3><p>查看方式，运行：regedit</p>\n<ol>\n<li>HKEY_CURRENT_USER\\Software，包含程序配置文件；</li>\n<li>HKEY_LOCAL_MACHINE\\SOFTWARE，包含程序配置文件。</li>\n</ol>\n<blockquote>\n<p>补充：<br> HKEY_CLASSES_ROOT：启动应用程序所需的全部信息，包含扩展名、驱动、文件关联、编号、图标等；<br> HKEY_CURRENT_USER：当前用户的配置信息，包含环境变量、程序、桌面配置等；<br> HKEY_LOCAL_MACHINE：本地计算机系统信息，包含硬件和系统信息、安全数据、程序设置等；<br> HKEY_USERS：当前用户的使用配置，包含当前用户图标、激活程序组、开始菜单等；<br>HKEY_CURRENT_CONFIG：本地计算机硬件配置，由HKEY_LOCAL_MACHINE映射而来。</p>\n</blockquote>\n<h3 id=\"服务\"><a href=\"#服务\" class=\"headerlink\" title=\"服务\"></a>服务</h3><p>查看方式，运行：services.msc</p>\n<blockquote>\n<p>卸载方法：<br>1.输入cmd打开命令提示符，此时抬头为windows\\system32&gt;；<br>2.键入’sc delete 服务名’，刷新服务即可。</p>\n</blockquote>\n<h3 id=\"启动项\"><a href=\"#启动项\" class=\"headerlink\" title=\"启动项\"></a>启动项</h3><p>查看方式，打开任务管理器，点击启动。</p>\n<blockquote>\n<p>可能存在的文件夹：<br> ‘C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp’<br> ‘%USERPROFILE%\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup’<br>可能存在的注册列表：<br> ‘HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run’<br>‘HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run’</p>\n</blockquote>\n<h3 id=\"dll文件\"><a href=\"#dll文件\" class=\"headerlink\" title=\"dll文件\"></a>dll文件</h3><p>dll是动态链接库，文件包含着多个程序共同使用的代码和数据的库。之前装一些冷门程序时经常会遇到缺少XXX.dll的错误信息，就是少了这个动态链接库的原因，在此一并记录安装和卸载方法。</p>\n<p>查询正在运行的哪些程序调用了哪些dll库的方法：</p>\n<ol>\n<li>以管理员权限启动命令提示符</li>\n<li>键入’tasklist /m&gt;D:\\listdll.txt’</li>\n<li>打开D盘刚刚生成的listdll.txt文件，列举了dll调用情况。</li>\n</ol>\n<p>dll安装方法一：</p>\n<ol>\n<li>找到.dll文件，将其放入’C:\\Windows\\System32’文件夹内；</li>\n<li>打开运行，键入’regsvr32 库文件名’，成功与否都会有提示。</li>\n</ol>\n<p>dll安装方法二:</p>\n<ol>\n<li>找到.dll文件，将其放入任意文件夹内；</li>\n<li>在该文件夹内，右击选择在此处打开命令窗口；</li>\n<li>命令提示符中键入’regsvr32 /s 库文件名；</li>\n</ol>\n<p>dll卸载方法：</p>\n<ol>\n<li>找到存放.dll文件的文件夹，防止出错，备份.dll文件；</li>\n<li>在该文件夹内，右击选择在此处打开命令窗口；</li>\n<li>命令提示符中键入’regsvr32 /u 库文件名；</li>\n<li>删除.dll文件。</li>\n</ol>\n<p>这只是正规程序可能会添加的文件，要是碰到一些无良开发者，指不定在你的系统某些位置会悄悄塞些什么文件，而且程序的一些修改键值或者配置的操作是属于不可逆的，碰到这种，就毫无办法。</p>\n<p>查到一种称为UWP的程序，该类程序需要Microsoft Store审核通过才能上架应用商店，权限后台都会有一定的限制，安装卸载更为方便。</p>\n<blockquote>\n<p>UWP即Windows 10中的Universal Windows Platform简称。即Windows通用应用平台，在Windows 10 Mobile/Surface（Windows平板电脑）/PC/Xbox/HoloLens等平台上运行，uwp不同于传统pc上的exe应用，也跟只适用于手机端的app有本质区别。它并不是为某一个终端而设&gt;计，而是可以在所有Windows10设备上运行。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>对面小哥在win下删除一个程序时，直接删除了程序的整个安装目录，但打开控制面板的卸载程序，依旧能看到这个程序的名字，这洁癖可不能忍。</p>","more":"<p>最终的解决方式是，通过搜索关键词，删除掉注册列表里所有跟这个程序相关的项目，重启后卸载程序里才消失不见。</p>\n<p>但后期搜索，我发现即使这样做，也并不代表电脑就回到了安装软件前的状态，或者说大概率不太可能回滚到最初的状态了。</p>\n<p>因为理论上，一个程序从安装、运行到卸载的整个过程中，在赋予它的权限下，是有能力肆意修改系统里任何它能影响的地方，甚至在正常卸载后也可能不去恢复它带来的改动，这全凭开发者的自我道德约束。</p>\n<p>那么反向思考一下，安装一个程序，有可能会给系统添加一些什么内容呢？通过搜索，，发现会有很多不可逆的修改，此处暂不统计，正规程序大致会添加以下项目：</p>\n<h3 id=\"安装目录\"><a href=\"#安装目录\" class=\"headerlink\" title=\"安装目录\"></a>安装目录</h3><ol>\n<li>Program Files(x86)或Program Files或自定义文件夹，用来存放程序及其自身卸载程序；</li>\n<li>Program Files\\Common Files文件夹，用来存放同一公司不同程序的共用库文件；</li>\n<li>ProgramData文件夹，用来存放程序的相关配置文件；，很多程序会在这个地方存放它的配置相关的信息；</li>\n<li>windows\\system32\\drivers文件夹，用来存放一些软件驱动；</li>\n<li>个人文档及内AppData文件夹，用来存放一些个人配置和个人信息；</li>\n<li>ProgramData\\Microsoft\\Windows\\Start Menu\\Programs文件夹，用来存放开始菜单内的程序快捷方式。</li>\n</ol>\n<h3 id=\"注册列表\"><a href=\"#注册列表\" class=\"headerlink\" title=\"注册列表\"></a>注册列表</h3><p>查看方式，运行：regedit</p>\n<ol>\n<li>HKEY_CURRENT_USER\\Software，包含程序配置文件；</li>\n<li>HKEY_LOCAL_MACHINE\\SOFTWARE，包含程序配置文件。</li>\n</ol>\n<blockquote>\n<p>补充：<br> HKEY_CLASSES_ROOT：启动应用程序所需的全部信息，包含扩展名、驱动、文件关联、编号、图标等；<br> HKEY_CURRENT_USER：当前用户的配置信息，包含环境变量、程序、桌面配置等；<br> HKEY_LOCAL_MACHINE：本地计算机系统信息，包含硬件和系统信息、安全数据、程序设置等；<br> HKEY_USERS：当前用户的使用配置，包含当前用户图标、激活程序组、开始菜单等；<br>HKEY_CURRENT_CONFIG：本地计算机硬件配置，由HKEY_LOCAL_MACHINE映射而来。</p>\n</blockquote>\n<h3 id=\"服务\"><a href=\"#服务\" class=\"headerlink\" title=\"服务\"></a>服务</h3><p>查看方式，运行：services.msc</p>\n<blockquote>\n<p>卸载方法：<br>1.输入cmd打开命令提示符，此时抬头为windows\\system32&gt;；<br>2.键入’sc delete 服务名’，刷新服务即可。</p>\n</blockquote>\n<h3 id=\"启动项\"><a href=\"#启动项\" class=\"headerlink\" title=\"启动项\"></a>启动项</h3><p>查看方式，打开任务管理器，点击启动。</p>\n<blockquote>\n<p>可能存在的文件夹：<br> ‘C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp’<br> ‘%USERPROFILE%\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup’<br>可能存在的注册列表：<br> ‘HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run’<br>‘HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run’</p>\n</blockquote>\n<h3 id=\"dll文件\"><a href=\"#dll文件\" class=\"headerlink\" title=\"dll文件\"></a>dll文件</h3><p>dll是动态链接库，文件包含着多个程序共同使用的代码和数据的库。之前装一些冷门程序时经常会遇到缺少XXX.dll的错误信息，就是少了这个动态链接库的原因，在此一并记录安装和卸载方法。</p>\n<p>查询正在运行的哪些程序调用了哪些dll库的方法：</p>\n<ol>\n<li>以管理员权限启动命令提示符</li>\n<li>键入’tasklist /m&gt;D:\\listdll.txt’</li>\n<li>打开D盘刚刚生成的listdll.txt文件，列举了dll调用情况。</li>\n</ol>\n<p>dll安装方法一：</p>\n<ol>\n<li>找到.dll文件，将其放入’C:\\Windows\\System32’文件夹内；</li>\n<li>打开运行，键入’regsvr32 库文件名’，成功与否都会有提示。</li>\n</ol>\n<p>dll安装方法二:</p>\n<ol>\n<li>找到.dll文件，将其放入任意文件夹内；</li>\n<li>在该文件夹内，右击选择在此处打开命令窗口；</li>\n<li>命令提示符中键入’regsvr32 /s 库文件名；</li>\n</ol>\n<p>dll卸载方法：</p>\n<ol>\n<li>找到存放.dll文件的文件夹，防止出错，备份.dll文件；</li>\n<li>在该文件夹内，右击选择在此处打开命令窗口；</li>\n<li>命令提示符中键入’regsvr32 /u 库文件名；</li>\n<li>删除.dll文件。</li>\n</ol>\n<p>这只是正规程序可能会添加的文件，要是碰到一些无良开发者，指不定在你的系统某些位置会悄悄塞些什么文件，而且程序的一些修改键值或者配置的操作是属于不可逆的，碰到这种，就毫无办法。</p>\n<p>查到一种称为UWP的程序，该类程序需要Microsoft Store审核通过才能上架应用商店，权限后台都会有一定的限制，安装卸载更为方便。</p>\n<blockquote>\n<p>UWP即Windows 10中的Universal Windows Platform简称。即Windows通用应用平台，在Windows 10 Mobile/Surface（Windows平板电脑）/PC/Xbox/HoloLens等平台上运行，uwp不同于传统pc上的exe应用，也跟只适用于手机端的app有本质区别。它并不是为某一个终端而设&gt;计，而是可以在所有Windows10设备上运行。</p>\n</blockquote>"},{"layout":"post","title":"安全栅","comments":1,"date":"2019-12-24T14:18:55.000Z","_content":"工业中常会用到安全栅来保护回路，记录一些见过的安全栅普遍使用方式，资料来源，[倍加福官网](https://www.pepperl-fuchs.com/china/zh/index.htm)\n<!--more-->\n安全栅：限制回路电能量，实现本质安全防爆。\n隔离栅：防止信号干扰，保护系统IO，用于非防爆场合。\n隔离式安全栅：兼顾两者。\n\n### 「一」KCD2-SCD-1隔离栅\n用于模拟量输出信号，24V直流电压驱动的单通道信号调节器，为非本质安全应用提供隔离。\n![](/assets/images/191224_1.jpg)![](/assets/images/191224_2.jpg)  \n接线方式：\n电源接端子9+，10-，（额定电压19-30V直流电压）\n输入接端子5-，6+，（4-20mA,最高30mA）\n输出接端子1+，2-，（4-20mA，加载0-650欧电阻，20mA时电压≥13V）\n\n输入电压拨码方式：\n![](/assets/images/191224_3.jpg)\n开环电压<23V，20mA时约为6V\n开环电压<27V，20mA时约为10V\n\n补充：\n使用时环境温度-20-60°C（-4-140F）。\n精度在20°C（68°F）时的偏差≤±0.1%，包括非线性和滞后，安全等级为SIL2，电流输出650欧负载。\n\n热损耗≤600mW，可用于热设计或外部电源设计，\n工作功耗≤700mW，可用于外部电源设计。\n\n如果数字通信回路电阻过低，则端子6和8之间的内部电阻为250Ω，可用作HART通信电阻。\n\n### 「二」KCD2-STC-1隔离栅\n用于模拟量输入信号，24V直流电压驱动的单通道信号调节器，为非本质安全应用提供隔离。可接收sink模式和source模式。\n数字信号可以叠加在输入信号上，并且双向传输。\n![](/assets/images/191224_4.jpg)![](/assets/images/191224_5.jpg)  \n接线方式：\n电源接端子9+，10-，（额定电压19-30V直流电压）\n输入接端子1+，2-(sink)或3+，4-(source)，（4-20mA,最高30mA）\n输出接端子5-，6+，（source模式下4-20mA或1-5V，加载250Ω；sink模式下4-20mA，工作电压15.5-26V）\n\n输出拨码方式：\n![](/assets/images/191224_6.jpg)\n可输出source模式下4-20mA或1-5V，sink模式下4-20mA。\n\n补充：\n使用时环境温度-20-60°C（-4-140F）。\n精度在20°C（68°F）时的偏差≤±0.1%，包括非线性和滞后，安全等级为SIL2。\n\n热损耗≤800mW，可用于热设计或外部电源设计，\n工作功耗≤1.1W，可用于外部电源设计。\n\n供电模块KFD2-EB2通过电源轨为设备提供24伏直流电。保险丝保护供电模块，根据设备的功耗，最多可供电150个独立设备。\n铝制电源轨不得通过单个设备的设备终端供电！\n\n如果回路中的HART通信电阻过低，则可以使用端子6和8之间250Ω的内部电阻。\n\n### 「三」KCD2-SCD-EX1隔离栅\n用于模拟量输出信号，24V直流电压驱动的单通道信号调节器，为本质安全应用提供隔离。\n![](/assets/images/191224_7.jpg)![](/assets/images/191224_8.jpg)  \n接线方式：\n电源接端子9+，10-，（额定电压19-30V直流，额定电流≤30mA）\n输入接端子5-，6+，（4-20mA,最高30mA，输入电阻>100kΩ时现场接线断开）\n输出接端子1+，2-，（4-20mA，加载0-650欧电阻，20mA时电压≥13V）\n\n输入电压拨码方式：\n![](/assets/images/191224_9.jpg)\n开环电压<23V，20mA时约为6V\n开环电压<27V，20mA时约为10V\n\n补充：\n使用时环境温度-20-60°C（-4-140F）。\n精度在20°C（68°F）时的偏差≤±0.1%，包括非线性和滞后，安全等级为SIL2，电流输出650欧负载。\n\n热损耗≤600mW，可用于热设计或外部电源设计，\n工作功耗≤700mW，可用于外部电源设计。\n\n如果数字通信回路电阻过低，则端子6和8之间的内部电阻为250Ω，可用作HART通信电阻。\n\n### 「四」KCD2-STC-EX1隔离栅\n用于模拟量输入信号，24V直流电压驱动的单通道信号调节器，为非本质安全应用提供隔离。可接收sink模式和source模式。\n数字信号可以叠加在输入信号上，并且双向传输。\n![](/assets/images/191224_10.jpg)![](/assets/images/191224_11.jpg)  \n接线方式：\n电源接端子9+，10-，（额定电压19-30V直流电压）\n输入接端子1+，2-(sink)或3+，4-(source)，（4-20mA,最高30mA）\n输出接端子5-，6+，（source模式下4-20mA或1-5V，加载250Ω；sink模式下4-20mA，工作电压15.5-26V）\n\n输出拨码方式：\n![](/assets/images/191224_12.jpg)\n可输出source模式下4-20mA或1-5V，sink模式下4-20mA。\n\n补充：\n使用时环境温度-20-60°C（-4-140F）。\n精度在20°C（68°F）时的偏差≤±0.1%，包括非线性和滞后，安全等级为SIL2。\n\n热损耗≤800mW，可用于热设计或外部电源设计，\n工作功耗≤1.1W，可用于外部电源设计。\n\n如果回路中的HART通信电阻过低，则可以使用端子6和8之间250Ω的内部电阻。\n\n### 「五」KCD2-UT2-EX1隔离栅\n用于模拟量输入信号，24V直流电压驱动的单通道热电偶、电阻式温度检测器，将RTD输入信号或热电偶输入信号转换为0/4-20mA信号，为本质安全应用提供隔离。可接收sink模式和source模式。\n通过PACTware软件进行详细配置。\n![](/assets/images/191224_13.jpg)![](/assets/images/191224_14.jpg)  \n编程接口接入K-ADP1适配器进行配置\nRTD信号类型（Pt10、Pt50、Pt100、Pt500、Pt1000、Pt10GOST、Pt50GOST、Pt100GOST、Pt500GOST、Pt1000GOST、Cu10、Cu50、Cu100、Ni100）\n测量类型（2线/3线/4线）\n\n接线方式：\n电源接端子9+，10-，（额定电压19-30V直流电压）\n输入端子3线制Pt100信号3+，2/4相通-\n输出端子source模式下5-，6+,sink模式下7-，8+。\n\n补充：\n使用时环境温度-20-60°C（-4-140F）。\n精度在20°C（68°F）时的偏差≤±0.1%，安全等级为SIL2。\n\n热损耗≤0.98mW，可用于热设计或外部电源设计，\n工作功耗≤0.98W，可用于外部电源设计。\n\n供电模块KFD2-EB2通过电源轨为设备提供24伏直流电。保险丝保护供电模块，根据设备的功耗，最多可供电150个独立设备。\n铝制电源轨不得通过单个设备的设备终端供电!","source":"_posts/安全栅.md","raw":"---\nlayout: post\ntitle: 安全栅\ncomments: true\ntags:\n  - 工程\ndate: 2019-12-24 22:18:55\n---\n工业中常会用到安全栅来保护回路，记录一些见过的安全栅普遍使用方式，资料来源，[倍加福官网](https://www.pepperl-fuchs.com/china/zh/index.htm)\n<!--more-->\n安全栅：限制回路电能量，实现本质安全防爆。\n隔离栅：防止信号干扰，保护系统IO，用于非防爆场合。\n隔离式安全栅：兼顾两者。\n\n### 「一」KCD2-SCD-1隔离栅\n用于模拟量输出信号，24V直流电压驱动的单通道信号调节器，为非本质安全应用提供隔离。\n![](/assets/images/191224_1.jpg)![](/assets/images/191224_2.jpg)  \n接线方式：\n电源接端子9+，10-，（额定电压19-30V直流电压）\n输入接端子5-，6+，（4-20mA,最高30mA）\n输出接端子1+，2-，（4-20mA，加载0-650欧电阻，20mA时电压≥13V）\n\n输入电压拨码方式：\n![](/assets/images/191224_3.jpg)\n开环电压<23V，20mA时约为6V\n开环电压<27V，20mA时约为10V\n\n补充：\n使用时环境温度-20-60°C（-4-140F）。\n精度在20°C（68°F）时的偏差≤±0.1%，包括非线性和滞后，安全等级为SIL2，电流输出650欧负载。\n\n热损耗≤600mW，可用于热设计或外部电源设计，\n工作功耗≤700mW，可用于外部电源设计。\n\n如果数字通信回路电阻过低，则端子6和8之间的内部电阻为250Ω，可用作HART通信电阻。\n\n### 「二」KCD2-STC-1隔离栅\n用于模拟量输入信号，24V直流电压驱动的单通道信号调节器，为非本质安全应用提供隔离。可接收sink模式和source模式。\n数字信号可以叠加在输入信号上，并且双向传输。\n![](/assets/images/191224_4.jpg)![](/assets/images/191224_5.jpg)  \n接线方式：\n电源接端子9+，10-，（额定电压19-30V直流电压）\n输入接端子1+，2-(sink)或3+，4-(source)，（4-20mA,最高30mA）\n输出接端子5-，6+，（source模式下4-20mA或1-5V，加载250Ω；sink模式下4-20mA，工作电压15.5-26V）\n\n输出拨码方式：\n![](/assets/images/191224_6.jpg)\n可输出source模式下4-20mA或1-5V，sink模式下4-20mA。\n\n补充：\n使用时环境温度-20-60°C（-4-140F）。\n精度在20°C（68°F）时的偏差≤±0.1%，包括非线性和滞后，安全等级为SIL2。\n\n热损耗≤800mW，可用于热设计或外部电源设计，\n工作功耗≤1.1W，可用于外部电源设计。\n\n供电模块KFD2-EB2通过电源轨为设备提供24伏直流电。保险丝保护供电模块，根据设备的功耗，最多可供电150个独立设备。\n铝制电源轨不得通过单个设备的设备终端供电！\n\n如果回路中的HART通信电阻过低，则可以使用端子6和8之间250Ω的内部电阻。\n\n### 「三」KCD2-SCD-EX1隔离栅\n用于模拟量输出信号，24V直流电压驱动的单通道信号调节器，为本质安全应用提供隔离。\n![](/assets/images/191224_7.jpg)![](/assets/images/191224_8.jpg)  \n接线方式：\n电源接端子9+，10-，（额定电压19-30V直流，额定电流≤30mA）\n输入接端子5-，6+，（4-20mA,最高30mA，输入电阻>100kΩ时现场接线断开）\n输出接端子1+，2-，（4-20mA，加载0-650欧电阻，20mA时电压≥13V）\n\n输入电压拨码方式：\n![](/assets/images/191224_9.jpg)\n开环电压<23V，20mA时约为6V\n开环电压<27V，20mA时约为10V\n\n补充：\n使用时环境温度-20-60°C（-4-140F）。\n精度在20°C（68°F）时的偏差≤±0.1%，包括非线性和滞后，安全等级为SIL2，电流输出650欧负载。\n\n热损耗≤600mW，可用于热设计或外部电源设计，\n工作功耗≤700mW，可用于外部电源设计。\n\n如果数字通信回路电阻过低，则端子6和8之间的内部电阻为250Ω，可用作HART通信电阻。\n\n### 「四」KCD2-STC-EX1隔离栅\n用于模拟量输入信号，24V直流电压驱动的单通道信号调节器，为非本质安全应用提供隔离。可接收sink模式和source模式。\n数字信号可以叠加在输入信号上，并且双向传输。\n![](/assets/images/191224_10.jpg)![](/assets/images/191224_11.jpg)  \n接线方式：\n电源接端子9+，10-，（额定电压19-30V直流电压）\n输入接端子1+，2-(sink)或3+，4-(source)，（4-20mA,最高30mA）\n输出接端子5-，6+，（source模式下4-20mA或1-5V，加载250Ω；sink模式下4-20mA，工作电压15.5-26V）\n\n输出拨码方式：\n![](/assets/images/191224_12.jpg)\n可输出source模式下4-20mA或1-5V，sink模式下4-20mA。\n\n补充：\n使用时环境温度-20-60°C（-4-140F）。\n精度在20°C（68°F）时的偏差≤±0.1%，包括非线性和滞后，安全等级为SIL2。\n\n热损耗≤800mW，可用于热设计或外部电源设计，\n工作功耗≤1.1W，可用于外部电源设计。\n\n如果回路中的HART通信电阻过低，则可以使用端子6和8之间250Ω的内部电阻。\n\n### 「五」KCD2-UT2-EX1隔离栅\n用于模拟量输入信号，24V直流电压驱动的单通道热电偶、电阻式温度检测器，将RTD输入信号或热电偶输入信号转换为0/4-20mA信号，为本质安全应用提供隔离。可接收sink模式和source模式。\n通过PACTware软件进行详细配置。\n![](/assets/images/191224_13.jpg)![](/assets/images/191224_14.jpg)  \n编程接口接入K-ADP1适配器进行配置\nRTD信号类型（Pt10、Pt50、Pt100、Pt500、Pt1000、Pt10GOST、Pt50GOST、Pt100GOST、Pt500GOST、Pt1000GOST、Cu10、Cu50、Cu100、Ni100）\n测量类型（2线/3线/4线）\n\n接线方式：\n电源接端子9+，10-，（额定电压19-30V直流电压）\n输入端子3线制Pt100信号3+，2/4相通-\n输出端子source模式下5-，6+,sink模式下7-，8+。\n\n补充：\n使用时环境温度-20-60°C（-4-140F）。\n精度在20°C（68°F）时的偏差≤±0.1%，安全等级为SIL2。\n\n热损耗≤0.98mW，可用于热设计或外部电源设计，\n工作功耗≤0.98W，可用于外部电源设计。\n\n供电模块KFD2-EB2通过电源轨为设备提供24伏直流电。保险丝保护供电模块，根据设备的功耗，最多可供电150个独立设备。\n铝制电源轨不得通过单个设备的设备终端供电!","slug":"安全栅","published":1,"updated":"2021-01-16T10:10:12.000Z","photos":[],"link":"","_id":"cl4kyqfub000p20r5h9zb9i2q","content":"<p>工业中常会用到安全栅来保护回路，记录一些见过的安全栅普遍使用方式，资料来源，<a href=\"https://www.pepperl-fuchs.com/china/zh/index.htm\">倍加福官网</a></p>\n<span id=\"more\"></span>\n<p>安全栅：限制回路电能量，实现本质安全防爆。<br>隔离栅：防止信号干扰，保护系统IO，用于非防爆场合。<br>隔离式安全栅：兼顾两者。</p>\n<h3 id=\"「一」KCD2-SCD-1隔离栅\"><a href=\"#「一」KCD2-SCD-1隔离栅\" class=\"headerlink\" title=\"「一」KCD2-SCD-1隔离栅\"></a>「一」KCD2-SCD-1隔离栅</h3><p>用于模拟量输出信号，24V直流电压驱动的单通道信号调节器，为非本质安全应用提供隔离。<br><img src=\"/assets/images/191224_1.jpg\"><img src=\"/assets/images/191224_2.jpg\"><br>接线方式：<br>电源接端子9+，10-，（额定电压19-30V直流电压）<br>输入接端子5-，6+，（4-20mA,最高30mA）<br>输出接端子1+，2-，（4-20mA，加载0-650欧电阻，20mA时电压≥13V）</p>\n<p>输入电压拨码方式：<br><img src=\"/assets/images/191224_3.jpg\"><br>开环电压&lt;23V，20mA时约为6V<br>开环电压&lt;27V，20mA时约为10V</p>\n<p>补充：<br>使用时环境温度-20-60°C（-4-140F）。<br>精度在20°C（68°F）时的偏差≤±0.1%，包括非线性和滞后，安全等级为SIL2，电流输出650欧负载。</p>\n<p>热损耗≤600mW，可用于热设计或外部电源设计，<br>工作功耗≤700mW，可用于外部电源设计。</p>\n<p>如果数字通信回路电阻过低，则端子6和8之间的内部电阻为250Ω，可用作HART通信电阻。</p>\n<h3 id=\"「二」KCD2-STC-1隔离栅\"><a href=\"#「二」KCD2-STC-1隔离栅\" class=\"headerlink\" title=\"「二」KCD2-STC-1隔离栅\"></a>「二」KCD2-STC-1隔离栅</h3><p>用于模拟量输入信号，24V直流电压驱动的单通道信号调节器，为非本质安全应用提供隔离。可接收sink模式和source模式。<br>数字信号可以叠加在输入信号上，并且双向传输。<br><img src=\"/assets/images/191224_4.jpg\"><img src=\"/assets/images/191224_5.jpg\"><br>接线方式：<br>电源接端子9+，10-，（额定电压19-30V直流电压）<br>输入接端子1+，2-(sink)或3+，4-(source)，（4-20mA,最高30mA）<br>输出接端子5-，6+，（source模式下4-20mA或1-5V，加载250Ω；sink模式下4-20mA，工作电压15.5-26V）</p>\n<p>输出拨码方式：<br><img src=\"/assets/images/191224_6.jpg\"><br>可输出source模式下4-20mA或1-5V，sink模式下4-20mA。</p>\n<p>补充：<br>使用时环境温度-20-60°C（-4-140F）。<br>精度在20°C（68°F）时的偏差≤±0.1%，包括非线性和滞后，安全等级为SIL2。</p>\n<p>热损耗≤800mW，可用于热设计或外部电源设计，<br>工作功耗≤1.1W，可用于外部电源设计。</p>\n<p>供电模块KFD2-EB2通过电源轨为设备提供24伏直流电。保险丝保护供电模块，根据设备的功耗，最多可供电150个独立设备。<br>铝制电源轨不得通过单个设备的设备终端供电！</p>\n<p>如果回路中的HART通信电阻过低，则可以使用端子6和8之间250Ω的内部电阻。</p>\n<h3 id=\"「三」KCD2-SCD-EX1隔离栅\"><a href=\"#「三」KCD2-SCD-EX1隔离栅\" class=\"headerlink\" title=\"「三」KCD2-SCD-EX1隔离栅\"></a>「三」KCD2-SCD-EX1隔离栅</h3><p>用于模拟量输出信号，24V直流电压驱动的单通道信号调节器，为本质安全应用提供隔离。<br><img src=\"/assets/images/191224_7.jpg\"><img src=\"/assets/images/191224_8.jpg\"><br>接线方式：<br>电源接端子9+，10-，（额定电压19-30V直流，额定电流≤30mA）<br>输入接端子5-，6+，（4-20mA,最高30mA，输入电阻&gt;100kΩ时现场接线断开）<br>输出接端子1+，2-，（4-20mA，加载0-650欧电阻，20mA时电压≥13V）</p>\n<p>输入电压拨码方式：<br><img src=\"/assets/images/191224_9.jpg\"><br>开环电压&lt;23V，20mA时约为6V<br>开环电压&lt;27V，20mA时约为10V</p>\n<p>补充：<br>使用时环境温度-20-60°C（-4-140F）。<br>精度在20°C（68°F）时的偏差≤±0.1%，包括非线性和滞后，安全等级为SIL2，电流输出650欧负载。</p>\n<p>热损耗≤600mW，可用于热设计或外部电源设计，<br>工作功耗≤700mW，可用于外部电源设计。</p>\n<p>如果数字通信回路电阻过低，则端子6和8之间的内部电阻为250Ω，可用作HART通信电阻。</p>\n<h3 id=\"「四」KCD2-STC-EX1隔离栅\"><a href=\"#「四」KCD2-STC-EX1隔离栅\" class=\"headerlink\" title=\"「四」KCD2-STC-EX1隔离栅\"></a>「四」KCD2-STC-EX1隔离栅</h3><p>用于模拟量输入信号，24V直流电压驱动的单通道信号调节器，为非本质安全应用提供隔离。可接收sink模式和source模式。<br>数字信号可以叠加在输入信号上，并且双向传输。<br><img src=\"/assets/images/191224_10.jpg\"><img src=\"/assets/images/191224_11.jpg\"><br>接线方式：<br>电源接端子9+，10-，（额定电压19-30V直流电压）<br>输入接端子1+，2-(sink)或3+，4-(source)，（4-20mA,最高30mA）<br>输出接端子5-，6+，（source模式下4-20mA或1-5V，加载250Ω；sink模式下4-20mA，工作电压15.5-26V）</p>\n<p>输出拨码方式：<br><img src=\"/assets/images/191224_12.jpg\"><br>可输出source模式下4-20mA或1-5V，sink模式下4-20mA。</p>\n<p>补充：<br>使用时环境温度-20-60°C（-4-140F）。<br>精度在20°C（68°F）时的偏差≤±0.1%，包括非线性和滞后，安全等级为SIL2。</p>\n<p>热损耗≤800mW，可用于热设计或外部电源设计，<br>工作功耗≤1.1W，可用于外部电源设计。</p>\n<p>如果回路中的HART通信电阻过低，则可以使用端子6和8之间250Ω的内部电阻。</p>\n<h3 id=\"「五」KCD2-UT2-EX1隔离栅\"><a href=\"#「五」KCD2-UT2-EX1隔离栅\" class=\"headerlink\" title=\"「五」KCD2-UT2-EX1隔离栅\"></a>「五」KCD2-UT2-EX1隔离栅</h3><p>用于模拟量输入信号，24V直流电压驱动的单通道热电偶、电阻式温度检测器，将RTD输入信号或热电偶输入信号转换为0/4-20mA信号，为本质安全应用提供隔离。可接收sink模式和source模式。<br>通过PACTware软件进行详细配置。<br><img src=\"/assets/images/191224_13.jpg\"><img src=\"/assets/images/191224_14.jpg\"><br>编程接口接入K-ADP1适配器进行配置<br>RTD信号类型（Pt10、Pt50、Pt100、Pt500、Pt1000、Pt10GOST、Pt50GOST、Pt100GOST、Pt500GOST、Pt1000GOST、Cu10、Cu50、Cu100、Ni100）<br>测量类型（2线/3线/4线）</p>\n<p>接线方式：<br>电源接端子9+，10-，（额定电压19-30V直流电压）<br>输入端子3线制Pt100信号3+，2/4相通-<br>输出端子source模式下5-，6+,sink模式下7-，8+。</p>\n<p>补充：<br>使用时环境温度-20-60°C（-4-140F）。<br>精度在20°C（68°F）时的偏差≤±0.1%，安全等级为SIL2。</p>\n<p>热损耗≤0.98mW，可用于热设计或外部电源设计，<br>工作功耗≤0.98W，可用于外部电源设计。</p>\n<p>供电模块KFD2-EB2通过电源轨为设备提供24伏直流电。保险丝保护供电模块，根据设备的功耗，最多可供电150个独立设备。<br>铝制电源轨不得通过单个设备的设备终端供电!</p>\n","site":{"data":{}},"excerpt":"<p>工业中常会用到安全栅来保护回路，记录一些见过的安全栅普遍使用方式，资料来源，<a href=\"https://www.pepperl-fuchs.com/china/zh/index.htm\">倍加福官网</a></p>","more":"<p>安全栅：限制回路电能量，实现本质安全防爆。<br>隔离栅：防止信号干扰，保护系统IO，用于非防爆场合。<br>隔离式安全栅：兼顾两者。</p>\n<h3 id=\"「一」KCD2-SCD-1隔离栅\"><a href=\"#「一」KCD2-SCD-1隔离栅\" class=\"headerlink\" title=\"「一」KCD2-SCD-1隔离栅\"></a>「一」KCD2-SCD-1隔离栅</h3><p>用于模拟量输出信号，24V直流电压驱动的单通道信号调节器，为非本质安全应用提供隔离。<br><img src=\"/assets/images/191224_1.jpg\"><img src=\"/assets/images/191224_2.jpg\"><br>接线方式：<br>电源接端子9+，10-，（额定电压19-30V直流电压）<br>输入接端子5-，6+，（4-20mA,最高30mA）<br>输出接端子1+，2-，（4-20mA，加载0-650欧电阻，20mA时电压≥13V）</p>\n<p>输入电压拨码方式：<br><img src=\"/assets/images/191224_3.jpg\"><br>开环电压&lt;23V，20mA时约为6V<br>开环电压&lt;27V，20mA时约为10V</p>\n<p>补充：<br>使用时环境温度-20-60°C（-4-140F）。<br>精度在20°C（68°F）时的偏差≤±0.1%，包括非线性和滞后，安全等级为SIL2，电流输出650欧负载。</p>\n<p>热损耗≤600mW，可用于热设计或外部电源设计，<br>工作功耗≤700mW，可用于外部电源设计。</p>\n<p>如果数字通信回路电阻过低，则端子6和8之间的内部电阻为250Ω，可用作HART通信电阻。</p>\n<h3 id=\"「二」KCD2-STC-1隔离栅\"><a href=\"#「二」KCD2-STC-1隔离栅\" class=\"headerlink\" title=\"「二」KCD2-STC-1隔离栅\"></a>「二」KCD2-STC-1隔离栅</h3><p>用于模拟量输入信号，24V直流电压驱动的单通道信号调节器，为非本质安全应用提供隔离。可接收sink模式和source模式。<br>数字信号可以叠加在输入信号上，并且双向传输。<br><img src=\"/assets/images/191224_4.jpg\"><img src=\"/assets/images/191224_5.jpg\"><br>接线方式：<br>电源接端子9+，10-，（额定电压19-30V直流电压）<br>输入接端子1+，2-(sink)或3+，4-(source)，（4-20mA,最高30mA）<br>输出接端子5-，6+，（source模式下4-20mA或1-5V，加载250Ω；sink模式下4-20mA，工作电压15.5-26V）</p>\n<p>输出拨码方式：<br><img src=\"/assets/images/191224_6.jpg\"><br>可输出source模式下4-20mA或1-5V，sink模式下4-20mA。</p>\n<p>补充：<br>使用时环境温度-20-60°C（-4-140F）。<br>精度在20°C（68°F）时的偏差≤±0.1%，包括非线性和滞后，安全等级为SIL2。</p>\n<p>热损耗≤800mW，可用于热设计或外部电源设计，<br>工作功耗≤1.1W，可用于外部电源设计。</p>\n<p>供电模块KFD2-EB2通过电源轨为设备提供24伏直流电。保险丝保护供电模块，根据设备的功耗，最多可供电150个独立设备。<br>铝制电源轨不得通过单个设备的设备终端供电！</p>\n<p>如果回路中的HART通信电阻过低，则可以使用端子6和8之间250Ω的内部电阻。</p>\n<h3 id=\"「三」KCD2-SCD-EX1隔离栅\"><a href=\"#「三」KCD2-SCD-EX1隔离栅\" class=\"headerlink\" title=\"「三」KCD2-SCD-EX1隔离栅\"></a>「三」KCD2-SCD-EX1隔离栅</h3><p>用于模拟量输出信号，24V直流电压驱动的单通道信号调节器，为本质安全应用提供隔离。<br><img src=\"/assets/images/191224_7.jpg\"><img src=\"/assets/images/191224_8.jpg\"><br>接线方式：<br>电源接端子9+，10-，（额定电压19-30V直流，额定电流≤30mA）<br>输入接端子5-，6+，（4-20mA,最高30mA，输入电阻&gt;100kΩ时现场接线断开）<br>输出接端子1+，2-，（4-20mA，加载0-650欧电阻，20mA时电压≥13V）</p>\n<p>输入电压拨码方式：<br><img src=\"/assets/images/191224_9.jpg\"><br>开环电压&lt;23V，20mA时约为6V<br>开环电压&lt;27V，20mA时约为10V</p>\n<p>补充：<br>使用时环境温度-20-60°C（-4-140F）。<br>精度在20°C（68°F）时的偏差≤±0.1%，包括非线性和滞后，安全等级为SIL2，电流输出650欧负载。</p>\n<p>热损耗≤600mW，可用于热设计或外部电源设计，<br>工作功耗≤700mW，可用于外部电源设计。</p>\n<p>如果数字通信回路电阻过低，则端子6和8之间的内部电阻为250Ω，可用作HART通信电阻。</p>\n<h3 id=\"「四」KCD2-STC-EX1隔离栅\"><a href=\"#「四」KCD2-STC-EX1隔离栅\" class=\"headerlink\" title=\"「四」KCD2-STC-EX1隔离栅\"></a>「四」KCD2-STC-EX1隔离栅</h3><p>用于模拟量输入信号，24V直流电压驱动的单通道信号调节器，为非本质安全应用提供隔离。可接收sink模式和source模式。<br>数字信号可以叠加在输入信号上，并且双向传输。<br><img src=\"/assets/images/191224_10.jpg\"><img src=\"/assets/images/191224_11.jpg\"><br>接线方式：<br>电源接端子9+，10-，（额定电压19-30V直流电压）<br>输入接端子1+，2-(sink)或3+，4-(source)，（4-20mA,最高30mA）<br>输出接端子5-，6+，（source模式下4-20mA或1-5V，加载250Ω；sink模式下4-20mA，工作电压15.5-26V）</p>\n<p>输出拨码方式：<br><img src=\"/assets/images/191224_12.jpg\"><br>可输出source模式下4-20mA或1-5V，sink模式下4-20mA。</p>\n<p>补充：<br>使用时环境温度-20-60°C（-4-140F）。<br>精度在20°C（68°F）时的偏差≤±0.1%，包括非线性和滞后，安全等级为SIL2。</p>\n<p>热损耗≤800mW，可用于热设计或外部电源设计，<br>工作功耗≤1.1W，可用于外部电源设计。</p>\n<p>如果回路中的HART通信电阻过低，则可以使用端子6和8之间250Ω的内部电阻。</p>\n<h3 id=\"「五」KCD2-UT2-EX1隔离栅\"><a href=\"#「五」KCD2-UT2-EX1隔离栅\" class=\"headerlink\" title=\"「五」KCD2-UT2-EX1隔离栅\"></a>「五」KCD2-UT2-EX1隔离栅</h3><p>用于模拟量输入信号，24V直流电压驱动的单通道热电偶、电阻式温度检测器，将RTD输入信号或热电偶输入信号转换为0/4-20mA信号，为本质安全应用提供隔离。可接收sink模式和source模式。<br>通过PACTware软件进行详细配置。<br><img src=\"/assets/images/191224_13.jpg\"><img src=\"/assets/images/191224_14.jpg\"><br>编程接口接入K-ADP1适配器进行配置<br>RTD信号类型（Pt10、Pt50、Pt100、Pt500、Pt1000、Pt10GOST、Pt50GOST、Pt100GOST、Pt500GOST、Pt1000GOST、Cu10、Cu50、Cu100、Ni100）<br>测量类型（2线/3线/4线）</p>\n<p>接线方式：<br>电源接端子9+，10-，（额定电压19-30V直流电压）<br>输入端子3线制Pt100信号3+，2/4相通-<br>输出端子source模式下5-，6+,sink模式下7-，8+。</p>\n<p>补充：<br>使用时环境温度-20-60°C（-4-140F）。<br>精度在20°C（68°F）时的偏差≤±0.1%，安全等级为SIL2。</p>\n<p>热损耗≤0.98mW，可用于热设计或外部电源设计，<br>工作功耗≤0.98W，可用于外部电源设计。</p>\n<p>供电模块KFD2-EB2通过电源轨为设备提供24伏直流电。保险丝保护供电模块，根据设备的功耗，最多可供电150个独立设备。<br>铝制电源轨不得通过单个设备的设备终端供电!</p>"},{"layout":"post","title":"工业现场信号传输","comments":1,"date":"2019-12-23T14:21:46.000Z","_content":"对工业现场的一些信号传输问题，查找资料记录于此。\n<!--more-->\n「一」标准信号为什么采用4-20mA电流（1-5V电压）？\n\n工业中常见的非电物理量，如温度，压力，速度等，无法直接读取，需要将其转化为模拟量电信号，同时为兼顾设备到监控室的远距离传输，因此采用不易干扰的4-20mA电流信号。\n\n电流不宜干扰指：\n1.工业现场的噪声功率弱，但能达到数V，此时电流通常处于nA等级，相较于电压，电流的误差更小。\n2，电流源内阻趋于无穷大，可忽略串联导线中的电阻，在双绞线上远距离传输种精度更高。\n3.电压源会在通过导线电阻时产生一定的压降，噪声接收端的误差，\n\n电流为4-20mA的原因是：\n上限20mA出于防爆要求，此时电流通断引起的火花能量不足以引燃瓦斯。\n下限4mA出于检测线路需求，0mA可检测断线，常用2mA作为断线报警值。\n\n1-5V电压常用于控制室仪表间通讯，便于多仪表接收同一信号。\n\n不使用电流源作为通信信号是因为：\n电流源作为通讯信号时，多仪表间电阻串联，会产生超过变送器能力的负载，且会在信号负端电位不同的仪表中产生干扰，而无法集中供电。\n\n「二」本安和隔爆有什么区别？\n\n本安即本质安全，指通过安全栅，传输信号能量不足以引爆可燃气体等。\n\n隔爆通过外壳，保证内部火花不引起外部爆炸。\n\n「三」什么是干接点，什么是湿节点？\n\n干节点即无缘开关，节点间无极性，可互换。\n\n湿节点即有缘开关，节点间有极性，不能互换。\n","source":"_posts/工业现场信号传输.md","raw":"---\nlayout: post\ntitle: 工业现场信号传输\ncomments: true\ntags:\n  - 工程\ndate: 2019-12-23 22:21:46\n---\n对工业现场的一些信号传输问题，查找资料记录于此。\n<!--more-->\n「一」标准信号为什么采用4-20mA电流（1-5V电压）？\n\n工业中常见的非电物理量，如温度，压力，速度等，无法直接读取，需要将其转化为模拟量电信号，同时为兼顾设备到监控室的远距离传输，因此采用不易干扰的4-20mA电流信号。\n\n电流不宜干扰指：\n1.工业现场的噪声功率弱，但能达到数V，此时电流通常处于nA等级，相较于电压，电流的误差更小。\n2，电流源内阻趋于无穷大，可忽略串联导线中的电阻，在双绞线上远距离传输种精度更高。\n3.电压源会在通过导线电阻时产生一定的压降，噪声接收端的误差，\n\n电流为4-20mA的原因是：\n上限20mA出于防爆要求，此时电流通断引起的火花能量不足以引燃瓦斯。\n下限4mA出于检测线路需求，0mA可检测断线，常用2mA作为断线报警值。\n\n1-5V电压常用于控制室仪表间通讯，便于多仪表接收同一信号。\n\n不使用电流源作为通信信号是因为：\n电流源作为通讯信号时，多仪表间电阻串联，会产生超过变送器能力的负载，且会在信号负端电位不同的仪表中产生干扰，而无法集中供电。\n\n「二」本安和隔爆有什么区别？\n\n本安即本质安全，指通过安全栅，传输信号能量不足以引爆可燃气体等。\n\n隔爆通过外壳，保证内部火花不引起外部爆炸。\n\n「三」什么是干接点，什么是湿节点？\n\n干节点即无缘开关，节点间无极性，可互换。\n\n湿节点即有缘开关，节点间有极性，不能互换。\n","slug":"工业现场信号传输","published":1,"updated":"2021-01-16T10:10:12.000Z","photos":[],"link":"","_id":"cl4kyqfuf000q20r57chbc2gh","content":"<p>对工业现场的一些信号传输问题，查找资料记录于此。</p>\n<span id=\"more\"></span>\n<p>「一」标准信号为什么采用4-20mA电流（1-5V电压）？</p>\n<p>工业中常见的非电物理量，如温度，压力，速度等，无法直接读取，需要将其转化为模拟量电信号，同时为兼顾设备到监控室的远距离传输，因此采用不易干扰的4-20mA电流信号。</p>\n<p>电流不宜干扰指：<br>1.工业现场的噪声功率弱，但能达到数V，此时电流通常处于nA等级，相较于电压，电流的误差更小。<br>2，电流源内阻趋于无穷大，可忽略串联导线中的电阻，在双绞线上远距离传输种精度更高。<br>3.电压源会在通过导线电阻时产生一定的压降，噪声接收端的误差，</p>\n<p>电流为4-20mA的原因是：<br>上限20mA出于防爆要求，此时电流通断引起的火花能量不足以引燃瓦斯。<br>下限4mA出于检测线路需求，0mA可检测断线，常用2mA作为断线报警值。</p>\n<p>1-5V电压常用于控制室仪表间通讯，便于多仪表接收同一信号。</p>\n<p>不使用电流源作为通信信号是因为：<br>电流源作为通讯信号时，多仪表间电阻串联，会产生超过变送器能力的负载，且会在信号负端电位不同的仪表中产生干扰，而无法集中供电。</p>\n<p>「二」本安和隔爆有什么区别？</p>\n<p>本安即本质安全，指通过安全栅，传输信号能量不足以引爆可燃气体等。</p>\n<p>隔爆通过外壳，保证内部火花不引起外部爆炸。</p>\n<p>「三」什么是干接点，什么是湿节点？</p>\n<p>干节点即无缘开关，节点间无极性，可互换。</p>\n<p>湿节点即有缘开关，节点间有极性，不能互换。</p>\n","site":{"data":{}},"excerpt":"<p>对工业现场的一些信号传输问题，查找资料记录于此。</p>","more":"<p>「一」标准信号为什么采用4-20mA电流（1-5V电压）？</p>\n<p>工业中常见的非电物理量，如温度，压力，速度等，无法直接读取，需要将其转化为模拟量电信号，同时为兼顾设备到监控室的远距离传输，因此采用不易干扰的4-20mA电流信号。</p>\n<p>电流不宜干扰指：<br>1.工业现场的噪声功率弱，但能达到数V，此时电流通常处于nA等级，相较于电压，电流的误差更小。<br>2，电流源内阻趋于无穷大，可忽略串联导线中的电阻，在双绞线上远距离传输种精度更高。<br>3.电压源会在通过导线电阻时产生一定的压降，噪声接收端的误差，</p>\n<p>电流为4-20mA的原因是：<br>上限20mA出于防爆要求，此时电流通断引起的火花能量不足以引燃瓦斯。<br>下限4mA出于检测线路需求，0mA可检测断线，常用2mA作为断线报警值。</p>\n<p>1-5V电压常用于控制室仪表间通讯，便于多仪表接收同一信号。</p>\n<p>不使用电流源作为通信信号是因为：<br>电流源作为通讯信号时，多仪表间电阻串联，会产生超过变送器能力的负载，且会在信号负端电位不同的仪表中产生干扰，而无法集中供电。</p>\n<p>「二」本安和隔爆有什么区别？</p>\n<p>本安即本质安全，指通过安全栅，传输信号能量不足以引爆可燃气体等。</p>\n<p>隔爆通过外壳，保证内部火花不引起外部爆炸。</p>\n<p>「三」什么是干接点，什么是湿节点？</p>\n<p>干节点即无缘开关，节点间无极性，可互换。</p>\n<p>湿节点即有缘开关，节点间有极性，不能互换。</p>"},{"layout":"post","title":"更换Hexo博客部署方式","comments":1,"date":"2020-06-29T13:57:19.000Z","_content":"半年多没更新博客，突然忘记如何推送文本，太可怕了，特意找到之前教程，重新记录一下。原作者是[CrazyMilk](https://www.zhihu.com/question/21193762/answer/79109280)。\n<!--more-->\n\n### 部署\n1. 在GitHub上创建一个用来存放博客的仓库；\n2. 创建分支，使其拥有两个分支：master 和 Hexo；\n3. 设置Hexo为默认分支，\n4. 使用git clone拷贝仓库到本地；\n5. 在拷贝到本地的仓库文件夹内运行Git bash;\n6. 依次执行（Hexo分支）：\n\t>npm install hexo  \n\t>hexo init  \n\t>npm install  \n\t>npm install hexo-deployer-git\n\t注：事后发现hexo init只能在空文件夹下执行，仓库不是空文件夹，可在别的文件夹执行init，后全选拷贝过来。\n\n7. 修改_config.yml中的deploy参数，分支改为master；\n8. 依次执行：\n\t>git add .\n\t>git commit -m \"...\"\n\t>git push origin hexo\n9. 执行hexo g -d生成网站并部署到GitHub上。\n\n### 发布\n1. 在仓库文件夹内运行Git bash;\n2. 执行Hexo n \"文章名\"；\n3. 依次执行（此步在Hexo分支建立网页文件）：\n\t>git add .\n\t>git commit -m \"...\"\n\t>git push origin hexo\n4. 执行hexo g -d生成网页并部署到GitHub上（此步生成网页存放在master）。\n\n### 迁移\n1. 使用git clone拷贝仓库到本地（默认Hexo分支）;\n2. 在拷贝到本地的文件夹内运行Git bash;\n3. 依次运行命令：\n\t>npm install hexo\n\t>npm install\n\t>npm install hexo-deployer-git","source":"_posts/更换Hexo博客部署方式.md","raw":"---\nlayout: post\ntitle: 更换Hexo博客部署方式\ncomments: true\ntags:\n  - Hexo\ndate: 2020-06-29 21:57:19\n---\n半年多没更新博客，突然忘记如何推送文本，太可怕了，特意找到之前教程，重新记录一下。原作者是[CrazyMilk](https://www.zhihu.com/question/21193762/answer/79109280)。\n<!--more-->\n\n### 部署\n1. 在GitHub上创建一个用来存放博客的仓库；\n2. 创建分支，使其拥有两个分支：master 和 Hexo；\n3. 设置Hexo为默认分支，\n4. 使用git clone拷贝仓库到本地；\n5. 在拷贝到本地的仓库文件夹内运行Git bash;\n6. 依次执行（Hexo分支）：\n\t>npm install hexo  \n\t>hexo init  \n\t>npm install  \n\t>npm install hexo-deployer-git\n\t注：事后发现hexo init只能在空文件夹下执行，仓库不是空文件夹，可在别的文件夹执行init，后全选拷贝过来。\n\n7. 修改_config.yml中的deploy参数，分支改为master；\n8. 依次执行：\n\t>git add .\n\t>git commit -m \"...\"\n\t>git push origin hexo\n9. 执行hexo g -d生成网站并部署到GitHub上。\n\n### 发布\n1. 在仓库文件夹内运行Git bash;\n2. 执行Hexo n \"文章名\"；\n3. 依次执行（此步在Hexo分支建立网页文件）：\n\t>git add .\n\t>git commit -m \"...\"\n\t>git push origin hexo\n4. 执行hexo g -d生成网页并部署到GitHub上（此步生成网页存放在master）。\n\n### 迁移\n1. 使用git clone拷贝仓库到本地（默认Hexo分支）;\n2. 在拷贝到本地的文件夹内运行Git bash;\n3. 依次运行命令：\n\t>npm install hexo\n\t>npm install\n\t>npm install hexo-deployer-git","slug":"更换Hexo博客部署方式","published":1,"updated":"2021-11-28T14:49:37.594Z","photos":[],"link":"","_id":"cl4kyqfuj000t20r512fj77oa","content":"<p>半年多没更新博客，突然忘记如何推送文本，太可怕了，特意找到之前教程，重新记录一下。原作者是<a href=\"https://www.zhihu.com/question/21193762/answer/79109280\">CrazyMilk</a>。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h3><ol>\n<li><p>在GitHub上创建一个用来存放博客的仓库；</p>\n</li>\n<li><p>创建分支，使其拥有两个分支：master 和 Hexo；</p>\n</li>\n<li><p>设置Hexo为默认分支，</p>\n</li>\n<li><p>使用git clone拷贝仓库到本地；</p>\n</li>\n<li><p>在拷贝到本地的仓库文件夹内运行Git bash;</p>\n</li>\n<li><p>依次执行（Hexo分支）：</p>\n<blockquote>\n<p>npm install hexo<br>hexo init<br>npm install<br>npm install hexo-deployer-git<br> 注：事后发现hexo init只能在空文件夹下执行，仓库不是空文件夹，可在别的文件夹执行init，后全选拷贝过来。</p>\n</blockquote>\n</li>\n<li><p>修改_config.yml中的deploy参数，分支改为master；</p>\n</li>\n<li><p>依次执行：</p>\n<blockquote>\n<p>git add .<br>git commit -m “…”<br>git push origin hexo</p>\n</blockquote>\n</li>\n<li><p>执行hexo g -d生成网站并部署到GitHub上。</p>\n</li>\n</ol>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><ol>\n<li>在仓库文件夹内运行Git bash;</li>\n<li>执行Hexo n “文章名”；</li>\n<li>依次执行（此步在Hexo分支建立网页文件）：<blockquote>\n<p>git add .<br>git commit -m “…”<br>git push origin hexo</p>\n</blockquote>\n</li>\n<li>执行hexo g -d生成网页并部署到GitHub上（此步生成网页存放在master）。</li>\n</ol>\n<h3 id=\"迁移\"><a href=\"#迁移\" class=\"headerlink\" title=\"迁移\"></a>迁移</h3><ol>\n<li>使用git clone拷贝仓库到本地（默认Hexo分支）;</li>\n<li>在拷贝到本地的文件夹内运行Git bash;</li>\n<li>依次运行命令：<blockquote>\n<p>npm install hexo<br>npm install<br>npm install hexo-deployer-git</p>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>半年多没更新博客，突然忘记如何推送文本，太可怕了，特意找到之前教程，重新记录一下。原作者是<a href=\"https://www.zhihu.com/question/21193762/answer/79109280\">CrazyMilk</a>。</p>","more":"<h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h3><ol>\n<li><p>在GitHub上创建一个用来存放博客的仓库；</p>\n</li>\n<li><p>创建分支，使其拥有两个分支：master 和 Hexo；</p>\n</li>\n<li><p>设置Hexo为默认分支，</p>\n</li>\n<li><p>使用git clone拷贝仓库到本地；</p>\n</li>\n<li><p>在拷贝到本地的仓库文件夹内运行Git bash;</p>\n</li>\n<li><p>依次执行（Hexo分支）：</p>\n<blockquote>\n<p>npm install hexo<br>hexo init<br>npm install<br>npm install hexo-deployer-git<br> 注：事后发现hexo init只能在空文件夹下执行，仓库不是空文件夹，可在别的文件夹执行init，后全选拷贝过来。</p>\n</blockquote>\n</li>\n<li><p>修改_config.yml中的deploy参数，分支改为master；</p>\n</li>\n<li><p>依次执行：</p>\n<blockquote>\n<p>git add .<br>git commit -m “…”<br>git push origin hexo</p>\n</blockquote>\n</li>\n<li><p>执行hexo g -d生成网站并部署到GitHub上。</p>\n</li>\n</ol>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><ol>\n<li>在仓库文件夹内运行Git bash;</li>\n<li>执行Hexo n “文章名”；</li>\n<li>依次执行（此步在Hexo分支建立网页文件）：<blockquote>\n<p>git add .<br>git commit -m “…”<br>git push origin hexo</p>\n</blockquote>\n</li>\n<li>执行hexo g -d生成网页并部署到GitHub上（此步生成网页存放在master）。</li>\n</ol>\n<h3 id=\"迁移\"><a href=\"#迁移\" class=\"headerlink\" title=\"迁移\"></a>迁移</h3><ol>\n<li>使用git clone拷贝仓库到本地（默认Hexo分支）;</li>\n<li>在拷贝到本地的文件夹内运行Git bash;</li>\n<li>依次运行命令：<blockquote>\n<p>npm install hexo<br>npm install<br>npm install hexo-deployer-git</p>\n</blockquote>\n</li>\n</ol>"},{"layout":"post","title":"笔记-吴恩达deeplearning之一","comments":1,"date":"2017-09-12T13:19:59.000Z","_content":"最近在网易上听吴恩达的深度学习课程，据说这门课评价很高，是相当不错的深度学习启蒙课之一。  \n吴恩达是斯坦福大学前教授，Google Brain项目发起人、领导者，众所周知的业界大佬。  \n这门课靠无疑问的是全英文教学，不过几天前网易拿到了这门课的正版授权并且专门制作了中文版字幕，机会难得，所以听过之后，在此做做笔记，方便日后翻看。  \n<!--more-->\n\n深度学习通俗来说就是指规模很大的神经网络。\n\n# 什么是神经网络？\n![](/assets/images/170912_1.JPG)  \n举个例子，例如房价的预测，我们想要寻找一个根据房屋面积，预测房价的函数，如图，那么用线性回归拟合曲线的话就是一条直线，当然房价不可能是一个负数，那么将直线下端弯曲一些，并使之结束于0，那么这条线就是我们想要的函数了。这几乎是最简单的神经网络了。  \n![](/assets/images/170912_2.JPG)    \n现将房屋面积作为神经网络的输入，称为x，通过小圆圈，输出价格，称为y，此处小圆圈就是一个独立神经元，这个网络实现了上图房价预测函数（被称为ReLU函数，即修正线性单元）的功能。这是一个很小的神经网络，大一点的神经网络就是把多个神经元堆叠起来。\n![](/assets/images/170912_3.JPG)   \n例如，此时还有房屋的其他特征，房屋面积和卧室数量可以估算家庭人数，邮编可以反映当地步行化程度，邮编和富裕程度可以评估学校质量，然后再考虑人们想要为此花费多少，最后帮你预测出房屋的价格。\n  \n神经网络的神奇之处在于，当实现它之后，只需要输入x，就能够得到y，不管你的训练集有多大，中间过程都将自己完成。小圆圈在神经网络中，被称为隐藏单元，每个输入都同时来自于四个特征。\n\n值得一提的是，神经网络需要喂足够多的数据，即足够多的x,y训练样本。\n\n# 为什么深度学习会兴起？\n![](/assets/images/170912_4.JPG)  \n如图，横轴代表完成任务的数据数量，纵轴代表机器学习算法的性能。\n\n传统机器学习算法的表现，如支持向量机和logistic回归等，对映图中的红色曲线，性能在一开始，会随着数据的增加而上升，但一段时间之后，性能就会进入平台期，因为这些模型无法处理海量数据。在过去的几十年，我们遇到的很多问题，早期只能得到较少的数据量，而现在要收集海量数据轻而易举，远超传统学习算法能发挥作用的规模。\n训练小号的神经网络，如黄色曲线，稍大一点的，如蓝色曲线，非常大的如绿色曲线，算法性能越来越好。  \n  \n注意，要想达到高性能水平的神经网络有两个条件：一是神经网络的训练规模要足够大，以发挥数据规模量巨大的优点，二是需要足够大的数据量。  \n\n规模一直推动深度学习的进步，这里的规模不仅指神经网络的规模，还有“带标签的数据”量的规模。训练量不大时，算法效果取决于你手工设计的组件以及算法处理的一些细节，只有在大数据领域，才能见到神经网络。\n\n# logistic回归\n\nLogistic回归是一种学习算法，用在监督学习问题中，适用于输出标签是0或1的二元分类问题。\n\n举个例子，输入特征向量x，可能是一张图片，你希望识别出这是不是一张猫图，输出一个预测值\\hat{y}，\\hat{y}是对y的预测，正式的说是一个概率值。当输入特征x满足条件时，y就是1，换句话，如果x是图片，你希望\\hat{y}告诉你这张图片是猫的概率。\n\n所以x是一个n_x维向量，logistic回归的参数是w，也是一个n_x维向量，b则是一个实数。那么已知输入x和参数w，b，如何计算预测\\hat{y}呢？\n可以用公式：\\hat{y} = \\sigma(w^T+b)\n\n![](/assets/images/170912_5.JPG)\n如图是sigmoid(z)的函数图形，横轴为z，是一条从0到1的光滑函数。\n\nsigmoid(z)中z是实数，就是\\frac{1}{1+e^{-z}}，当z非常大时，sigmoid(z)很接近1，z非常小时，sigmoid(z)很接近0。所以实现logistic回归时，要做的是学习参数w和b。训练w,b时需要定义一个成本函数。\n\n再此之前，需要先定义下损失函数，损失函数衡量算法的运行情况，衡量预测输出值\\hat{y}和y实际值有多接近。\n\n常用的损失函数：l(\\hat{y},y) = -(ylog\\hat{y}+(1-y)log(1-\\hat{y}))\n\n例如y=1时，损失函数l(\\hat{y},y) = -log\\hat{y}，想要损失函数尽可能的小，那么log\\hat{y}需要尽可能的大，即意味着\\hat{y}要足够大，因为\\hat{y}由sigmoid函数得出，永远不会比1大，那么也就是说\\hat{y}将无限接近于1。  \n另一种情况y=0时，损失函数l(\\hat{y},y） = -log(1-\\hat{y})，想要损失函数尽可能的小，log(1-\\hat{y})需要尽可能的大，意味着\\hat{y}要足够小，因为\\hat{y}由sigmoid函数得出，永远不会比0小，那么也就是说\\hat{y}无限接近于0。\n\n损失函数是在单个训练样本中定义的，它衡量了神经网络在单个训练样本上的表现。下面定义一个成本函数，它衡量的是神经网络在全体训练样本上的表现。\nj(w,b)=\\frac{1}{m} \\sum_{i=1}^{m} l(\\hat{y}^{(i)},y^{(i)})\n\n要习得合适的参数w和b，使得成本函数J(w,b)尽可能地小，可以利用梯度下降法。\n\n## 梯度下降法\n\n梯度下降法所做的就是从初始点开始，朝着最陡的下坡方向走，走一步即为梯度下降的一次迭代。\n![](/assets/images/170912_6.JPG)\n为了方便，先忽略上述b对函数J的影响，仅一维曲线代替多维曲线，梯度下降的做法是重复执行以下的更新操作，\nw := w-\\alphadj(w)/dw,\n\\alpha代表学习率，控制每一次迭代或梯度下降法中的步长。\n\n例如参数w，一开始很大，如图右侧，此时导数为正，新的w值等于w自身减去学习率乘导数，接着w会向左边走一步，像这样，让你的算法，渐渐地减小这个参数w。如果参数w一开始很小，如图左侧，此时倒数为负，新的w值会向右走一步，渐渐地算法会增大这个参数w。\n\n当前只考虑参数w，那么在logistic回归中，成本函数含有参数w和b，同理\nw:=w-\\alpha \\partial j(w,b)/ \\partial w\nb:=b-\\alpha \\partial j(w,b)/ \\partial b\n\n一个神经网络的计算都是按照前向及反向传播过程来实现的，首先计算出神经网络的输出，紧接着进行一个反向传输操作。后者用于计算对应的梯度或导数。\n\n## logistic回归中的梯度下降\n\n回顾公式：\nz=w^T+b\n\\hat{y} = a = \\sigma（z）\nl(a,y)=-(ylog(a)+（1-y）log(1-a))\n\n![](/assets/images/170912_7.JPG)  \n假设样本只有两个特征x_1,x_2,为了计算z,我们需要参数w1,w2和b。\n计算出损失函数l后，先向前一步，计算损失函数的导数da，即结果关于变量a的导数，再向前一步，计算出dz，dz=a-y，向前传播最后一步，计算出w,b需要如何变化，特别的，关于w1的导数dw1=x_1dz，同样的dw2=x_2dz，db=dz。\n\n关于logistic回归的梯度下降法就是先计算出dz，再用dz计算出dw1,dw2和db,然后用梯度下降法的公式更新来参数w1,w2,和b。\nw1:=w1-\\alpha d w1\nw2:=w2-\\alpha d w2\nb:=b-\\alpha db\n\n如上是将梯度下降法应用到logistic回归的单个训练样本上，现在我们要将他应用在m个训练样本上。\n全局成本函数J(w,b)相当于从1到m项的损失函数求和后平均，它表明全局成本函数对w1的导数也同样是各项损失函数对w1导数的平均。\n即\\frac{\\partial}{\\partial w1}J(w,b) = \\frac{1}{m} \\sum_{i=1}^{m} \\frac{\\partial}{\\partial w1} l(a^{(i)},y^{(i)})\n\n同理可得\\partialw2和\\partialb。\n\n\n","source":"_posts/笔记-吴恩达deeplearning之一.md","raw":"---\nlayout: post\ntitle: 笔记-吴恩达deeplearning之一\ncomments: true\ndate: 2017-09-12 21:19:59\ntags:\n- 深度学习\n---\n最近在网易上听吴恩达的深度学习课程，据说这门课评价很高，是相当不错的深度学习启蒙课之一。  \n吴恩达是斯坦福大学前教授，Google Brain项目发起人、领导者，众所周知的业界大佬。  \n这门课靠无疑问的是全英文教学，不过几天前网易拿到了这门课的正版授权并且专门制作了中文版字幕，机会难得，所以听过之后，在此做做笔记，方便日后翻看。  \n<!--more-->\n\n深度学习通俗来说就是指规模很大的神经网络。\n\n# 什么是神经网络？\n![](/assets/images/170912_1.JPG)  \n举个例子，例如房价的预测，我们想要寻找一个根据房屋面积，预测房价的函数，如图，那么用线性回归拟合曲线的话就是一条直线，当然房价不可能是一个负数，那么将直线下端弯曲一些，并使之结束于0，那么这条线就是我们想要的函数了。这几乎是最简单的神经网络了。  \n![](/assets/images/170912_2.JPG)    \n现将房屋面积作为神经网络的输入，称为x，通过小圆圈，输出价格，称为y，此处小圆圈就是一个独立神经元，这个网络实现了上图房价预测函数（被称为ReLU函数，即修正线性单元）的功能。这是一个很小的神经网络，大一点的神经网络就是把多个神经元堆叠起来。\n![](/assets/images/170912_3.JPG)   \n例如，此时还有房屋的其他特征，房屋面积和卧室数量可以估算家庭人数，邮编可以反映当地步行化程度，邮编和富裕程度可以评估学校质量，然后再考虑人们想要为此花费多少，最后帮你预测出房屋的价格。\n  \n神经网络的神奇之处在于，当实现它之后，只需要输入x，就能够得到y，不管你的训练集有多大，中间过程都将自己完成。小圆圈在神经网络中，被称为隐藏单元，每个输入都同时来自于四个特征。\n\n值得一提的是，神经网络需要喂足够多的数据，即足够多的x,y训练样本。\n\n# 为什么深度学习会兴起？\n![](/assets/images/170912_4.JPG)  \n如图，横轴代表完成任务的数据数量，纵轴代表机器学习算法的性能。\n\n传统机器学习算法的表现，如支持向量机和logistic回归等，对映图中的红色曲线，性能在一开始，会随着数据的增加而上升，但一段时间之后，性能就会进入平台期，因为这些模型无法处理海量数据。在过去的几十年，我们遇到的很多问题，早期只能得到较少的数据量，而现在要收集海量数据轻而易举，远超传统学习算法能发挥作用的规模。\n训练小号的神经网络，如黄色曲线，稍大一点的，如蓝色曲线，非常大的如绿色曲线，算法性能越来越好。  \n  \n注意，要想达到高性能水平的神经网络有两个条件：一是神经网络的训练规模要足够大，以发挥数据规模量巨大的优点，二是需要足够大的数据量。  \n\n规模一直推动深度学习的进步，这里的规模不仅指神经网络的规模，还有“带标签的数据”量的规模。训练量不大时，算法效果取决于你手工设计的组件以及算法处理的一些细节，只有在大数据领域，才能见到神经网络。\n\n# logistic回归\n\nLogistic回归是一种学习算法，用在监督学习问题中，适用于输出标签是0或1的二元分类问题。\n\n举个例子，输入特征向量x，可能是一张图片，你希望识别出这是不是一张猫图，输出一个预测值\\hat{y}，\\hat{y}是对y的预测，正式的说是一个概率值。当输入特征x满足条件时，y就是1，换句话，如果x是图片，你希望\\hat{y}告诉你这张图片是猫的概率。\n\n所以x是一个n_x维向量，logistic回归的参数是w，也是一个n_x维向量，b则是一个实数。那么已知输入x和参数w，b，如何计算预测\\hat{y}呢？\n可以用公式：\\hat{y} = \\sigma(w^T+b)\n\n![](/assets/images/170912_5.JPG)\n如图是sigmoid(z)的函数图形，横轴为z，是一条从0到1的光滑函数。\n\nsigmoid(z)中z是实数，就是\\frac{1}{1+e^{-z}}，当z非常大时，sigmoid(z)很接近1，z非常小时，sigmoid(z)很接近0。所以实现logistic回归时，要做的是学习参数w和b。训练w,b时需要定义一个成本函数。\n\n再此之前，需要先定义下损失函数，损失函数衡量算法的运行情况，衡量预测输出值\\hat{y}和y实际值有多接近。\n\n常用的损失函数：l(\\hat{y},y) = -(ylog\\hat{y}+(1-y)log(1-\\hat{y}))\n\n例如y=1时，损失函数l(\\hat{y},y) = -log\\hat{y}，想要损失函数尽可能的小，那么log\\hat{y}需要尽可能的大，即意味着\\hat{y}要足够大，因为\\hat{y}由sigmoid函数得出，永远不会比1大，那么也就是说\\hat{y}将无限接近于1。  \n另一种情况y=0时，损失函数l(\\hat{y},y） = -log(1-\\hat{y})，想要损失函数尽可能的小，log(1-\\hat{y})需要尽可能的大，意味着\\hat{y}要足够小，因为\\hat{y}由sigmoid函数得出，永远不会比0小，那么也就是说\\hat{y}无限接近于0。\n\n损失函数是在单个训练样本中定义的，它衡量了神经网络在单个训练样本上的表现。下面定义一个成本函数，它衡量的是神经网络在全体训练样本上的表现。\nj(w,b)=\\frac{1}{m} \\sum_{i=1}^{m} l(\\hat{y}^{(i)},y^{(i)})\n\n要习得合适的参数w和b，使得成本函数J(w,b)尽可能地小，可以利用梯度下降法。\n\n## 梯度下降法\n\n梯度下降法所做的就是从初始点开始，朝着最陡的下坡方向走，走一步即为梯度下降的一次迭代。\n![](/assets/images/170912_6.JPG)\n为了方便，先忽略上述b对函数J的影响，仅一维曲线代替多维曲线，梯度下降的做法是重复执行以下的更新操作，\nw := w-\\alphadj(w)/dw,\n\\alpha代表学习率，控制每一次迭代或梯度下降法中的步长。\n\n例如参数w，一开始很大，如图右侧，此时导数为正，新的w值等于w自身减去学习率乘导数，接着w会向左边走一步，像这样，让你的算法，渐渐地减小这个参数w。如果参数w一开始很小，如图左侧，此时倒数为负，新的w值会向右走一步，渐渐地算法会增大这个参数w。\n\n当前只考虑参数w，那么在logistic回归中，成本函数含有参数w和b，同理\nw:=w-\\alpha \\partial j(w,b)/ \\partial w\nb:=b-\\alpha \\partial j(w,b)/ \\partial b\n\n一个神经网络的计算都是按照前向及反向传播过程来实现的，首先计算出神经网络的输出，紧接着进行一个反向传输操作。后者用于计算对应的梯度或导数。\n\n## logistic回归中的梯度下降\n\n回顾公式：\nz=w^T+b\n\\hat{y} = a = \\sigma（z）\nl(a,y)=-(ylog(a)+（1-y）log(1-a))\n\n![](/assets/images/170912_7.JPG)  \n假设样本只有两个特征x_1,x_2,为了计算z,我们需要参数w1,w2和b。\n计算出损失函数l后，先向前一步，计算损失函数的导数da，即结果关于变量a的导数，再向前一步，计算出dz，dz=a-y，向前传播最后一步，计算出w,b需要如何变化，特别的，关于w1的导数dw1=x_1dz，同样的dw2=x_2dz，db=dz。\n\n关于logistic回归的梯度下降法就是先计算出dz，再用dz计算出dw1,dw2和db,然后用梯度下降法的公式更新来参数w1,w2,和b。\nw1:=w1-\\alpha d w1\nw2:=w2-\\alpha d w2\nb:=b-\\alpha db\n\n如上是将梯度下降法应用到logistic回归的单个训练样本上，现在我们要将他应用在m个训练样本上。\n全局成本函数J(w,b)相当于从1到m项的损失函数求和后平均，它表明全局成本函数对w1的导数也同样是各项损失函数对w1导数的平均。\n即\\frac{\\partial}{\\partial w1}J(w,b) = \\frac{1}{m} \\sum_{i=1}^{m} \\frac{\\partial}{\\partial w1} l(a^{(i)},y^{(i)})\n\n同理可得\\partialw2和\\partialb。\n\n\n","slug":"笔记-吴恩达deeplearning之一","published":1,"updated":"2021-11-28T14:49:04.005Z","photos":[],"link":"","_id":"cl4kyqfum000u20r59a6t5sms","content":"<p>最近在网易上听吴恩达的深度学习课程，据说这门课评价很高，是相当不错的深度学习启蒙课之一。<br>吴恩达是斯坦福大学前教授，Google Brain项目发起人、领导者，众所周知的业界大佬。<br>这门课靠无疑问的是全英文教学，不过几天前网易拿到了这门课的正版授权并且专门制作了中文版字幕，机会难得，所以听过之后，在此做做笔记，方便日后翻看。  </p>\n<span id=\"more\"></span>\n\n<p>深度学习通俗来说就是指规模很大的神经网络。</p>\n<h1 id=\"什么是神经网络？\"><a href=\"#什么是神经网络？\" class=\"headerlink\" title=\"什么是神经网络？\"></a>什么是神经网络？</h1><p><img src=\"/assets/images/170912_1.JPG\"><br>举个例子，例如房价的预测，我们想要寻找一个根据房屋面积，预测房价的函数，如图，那么用线性回归拟合曲线的话就是一条直线，当然房价不可能是一个负数，那么将直线下端弯曲一些，并使之结束于0，那么这条线就是我们想要的函数了。这几乎是最简单的神经网络了。<br><img src=\"/assets/images/170912_2.JPG\"><br>现将房屋面积作为神经网络的输入，称为x，通过小圆圈，输出价格，称为y，此处小圆圈就是一个独立神经元，这个网络实现了上图房价预测函数（被称为ReLU函数，即修正线性单元）的功能。这是一个很小的神经网络，大一点的神经网络就是把多个神经元堆叠起来。<br><img src=\"/assets/images/170912_3.JPG\"><br>例如，此时还有房屋的其他特征，房屋面积和卧室数量可以估算家庭人数，邮编可以反映当地步行化程度，邮编和富裕程度可以评估学校质量，然后再考虑人们想要为此花费多少，最后帮你预测出房屋的价格。</p>\n<p>神经网络的神奇之处在于，当实现它之后，只需要输入x，就能够得到y，不管你的训练集有多大，中间过程都将自己完成。小圆圈在神经网络中，被称为隐藏单元，每个输入都同时来自于四个特征。</p>\n<p>值得一提的是，神经网络需要喂足够多的数据，即足够多的x,y训练样本。</p>\n<h1 id=\"为什么深度学习会兴起？\"><a href=\"#为什么深度学习会兴起？\" class=\"headerlink\" title=\"为什么深度学习会兴起？\"></a>为什么深度学习会兴起？</h1><p><img src=\"/assets/images/170912_4.JPG\"><br>如图，横轴代表完成任务的数据数量，纵轴代表机器学习算法的性能。</p>\n<p>传统机器学习算法的表现，如支持向量机和logistic回归等，对映图中的红色曲线，性能在一开始，会随着数据的增加而上升，但一段时间之后，性能就会进入平台期，因为这些模型无法处理海量数据。在过去的几十年，我们遇到的很多问题，早期只能得到较少的数据量，而现在要收集海量数据轻而易举，远超传统学习算法能发挥作用的规模。<br>训练小号的神经网络，如黄色曲线，稍大一点的，如蓝色曲线，非常大的如绿色曲线，算法性能越来越好。  </p>\n<p>注意，要想达到高性能水平的神经网络有两个条件：一是神经网络的训练规模要足够大，以发挥数据规模量巨大的优点，二是需要足够大的数据量。  </p>\n<p>规模一直推动深度学习的进步，这里的规模不仅指神经网络的规模，还有“带标签的数据”量的规模。训练量不大时，算法效果取决于你手工设计的组件以及算法处理的一些细节，只有在大数据领域，才能见到神经网络。</p>\n<h1 id=\"logistic回归\"><a href=\"#logistic回归\" class=\"headerlink\" title=\"logistic回归\"></a>logistic回归</h1><p>Logistic回归是一种学习算法，用在监督学习问题中，适用于输出标签是0或1的二元分类问题。</p>\n<p>举个例子，输入特征向量x，可能是一张图片，你希望识别出这是不是一张猫图，输出一个预测值\\hat{y}，\\hat{y}是对y的预测，正式的说是一个概率值。当输入特征x满足条件时，y就是1，换句话，如果x是图片，你希望\\hat{y}告诉你这张图片是猫的概率。</p>\n<p>所以x是一个n_x维向量，logistic回归的参数是w，也是一个n_x维向量，b则是一个实数。那么已知输入x和参数w，b，如何计算预测\\hat{y}呢？<br>可以用公式：\\hat{y} = \\sigma(w^T+b)</p>\n<p><img src=\"/assets/images/170912_5.JPG\"><br>如图是sigmoid(z)的函数图形，横轴为z，是一条从0到1的光滑函数。</p>\n<p>sigmoid(z)中z是实数，就是\\frac{1}{1+e^{-z}}，当z非常大时，sigmoid(z)很接近1，z非常小时，sigmoid(z)很接近0。所以实现logistic回归时，要做的是学习参数w和b。训练w,b时需要定义一个成本函数。</p>\n<p>再此之前，需要先定义下损失函数，损失函数衡量算法的运行情况，衡量预测输出值\\hat{y}和y实际值有多接近。</p>\n<p>常用的损失函数：l(\\hat{y},y) = -(ylog\\hat{y}+(1-y)log(1-\\hat{y}))</p>\n<p>例如y=1时，损失函数l(\\hat{y},y) = -log\\hat{y}，想要损失函数尽可能的小，那么log\\hat{y}需要尽可能的大，即意味着\\hat{y}要足够大，因为\\hat{y}由sigmoid函数得出，永远不会比1大，那么也就是说\\hat{y}将无限接近于1。<br>另一种情况y=0时，损失函数l(\\hat{y},y） = -log(1-\\hat{y})，想要损失函数尽可能的小，log(1-\\hat{y})需要尽可能的大，意味着\\hat{y}要足够小，因为\\hat{y}由sigmoid函数得出，永远不会比0小，那么也就是说\\hat{y}无限接近于0。</p>\n<p>损失函数是在单个训练样本中定义的，它衡量了神经网络在单个训练样本上的表现。下面定义一个成本函数，它衡量的是神经网络在全体训练样本上的表现。<br>j(w,b)=\\frac{1}{m} \\sum_{i=1}^{m} l(\\hat{y}^{(i)},y^{(i)})</p>\n<p>要习得合适的参数w和b，使得成本函数J(w,b)尽可能地小，可以利用梯度下降法。</p>\n<h2 id=\"梯度下降法\"><a href=\"#梯度下降法\" class=\"headerlink\" title=\"梯度下降法\"></a>梯度下降法</h2><p>梯度下降法所做的就是从初始点开始，朝着最陡的下坡方向走，走一步即为梯度下降的一次迭代。<br><img src=\"/assets/images/170912_6.JPG\"><br>为了方便，先忽略上述b对函数J的影响，仅一维曲线代替多维曲线，梯度下降的做法是重复执行以下的更新操作，<br>w := w-\\alphadj(w)/dw,<br>\\alpha代表学习率，控制每一次迭代或梯度下降法中的步长。</p>\n<p>例如参数w，一开始很大，如图右侧，此时导数为正，新的w值等于w自身减去学习率乘导数，接着w会向左边走一步，像这样，让你的算法，渐渐地减小这个参数w。如果参数w一开始很小，如图左侧，此时倒数为负，新的w值会向右走一步，渐渐地算法会增大这个参数w。</p>\n<p>当前只考虑参数w，那么在logistic回归中，成本函数含有参数w和b，同理<br>w:=w-\\alpha \\partial j(w,b)/ \\partial w<br>b:=b-\\alpha \\partial j(w,b)/ \\partial b</p>\n<p>一个神经网络的计算都是按照前向及反向传播过程来实现的，首先计算出神经网络的输出，紧接着进行一个反向传输操作。后者用于计算对应的梯度或导数。</p>\n<h2 id=\"logistic回归中的梯度下降\"><a href=\"#logistic回归中的梯度下降\" class=\"headerlink\" title=\"logistic回归中的梯度下降\"></a>logistic回归中的梯度下降</h2><p>回顾公式：<br>z=w^T+b<br>\\hat{y} = a = \\sigma（z）<br>l(a,y)=-(ylog(a)+（1-y）log(1-a))</p>\n<p><img src=\"/assets/images/170912_7.JPG\"><br>假设样本只有两个特征x_1,x_2,为了计算z,我们需要参数w1,w2和b。<br>计算出损失函数l后，先向前一步，计算损失函数的导数da，即结果关于变量a的导数，再向前一步，计算出dz，dz=a-y，向前传播最后一步，计算出w,b需要如何变化，特别的，关于w1的导数dw1=x_1dz，同样的dw2=x_2dz，db=dz。</p>\n<p>关于logistic回归的梯度下降法就是先计算出dz，再用dz计算出dw1,dw2和db,然后用梯度下降法的公式更新来参数w1,w2,和b。<br>w1:=w1-\\alpha d w1<br>w2:=w2-\\alpha d w2<br>b:=b-\\alpha db</p>\n<p>如上是将梯度下降法应用到logistic回归的单个训练样本上，现在我们要将他应用在m个训练样本上。<br>全局成本函数J(w,b)相当于从1到m项的损失函数求和后平均，它表明全局成本函数对w1的导数也同样是各项损失函数对w1导数的平均。<br>即\\frac{\\partial}{\\partial w1}J(w,b) = \\frac{1}{m} \\sum_{i=1}^{m} \\frac{\\partial}{\\partial w1} l(a^{(i)},y^{(i)})</p>\n<p>同理可得\\partialw2和\\partialb。</p>\n","site":{"data":{}},"excerpt":"<p>最近在网易上听吴恩达的深度学习课程，据说这门课评价很高，是相当不错的深度学习启蒙课之一。<br>吴恩达是斯坦福大学前教授，Google Brain项目发起人、领导者，众所周知的业界大佬。<br>这门课靠无疑问的是全英文教学，不过几天前网易拿到了这门课的正版授权并且专门制作了中文版字幕，机会难得，所以听过之后，在此做做笔记，方便日后翻看。  </p>","more":"<p>深度学习通俗来说就是指规模很大的神经网络。</p>\n<h1 id=\"什么是神经网络？\"><a href=\"#什么是神经网络？\" class=\"headerlink\" title=\"什么是神经网络？\"></a>什么是神经网络？</h1><p><img src=\"/assets/images/170912_1.JPG\"><br>举个例子，例如房价的预测，我们想要寻找一个根据房屋面积，预测房价的函数，如图，那么用线性回归拟合曲线的话就是一条直线，当然房价不可能是一个负数，那么将直线下端弯曲一些，并使之结束于0，那么这条线就是我们想要的函数了。这几乎是最简单的神经网络了。<br><img src=\"/assets/images/170912_2.JPG\"><br>现将房屋面积作为神经网络的输入，称为x，通过小圆圈，输出价格，称为y，此处小圆圈就是一个独立神经元，这个网络实现了上图房价预测函数（被称为ReLU函数，即修正线性单元）的功能。这是一个很小的神经网络，大一点的神经网络就是把多个神经元堆叠起来。<br><img src=\"/assets/images/170912_3.JPG\"><br>例如，此时还有房屋的其他特征，房屋面积和卧室数量可以估算家庭人数，邮编可以反映当地步行化程度，邮编和富裕程度可以评估学校质量，然后再考虑人们想要为此花费多少，最后帮你预测出房屋的价格。</p>\n<p>神经网络的神奇之处在于，当实现它之后，只需要输入x，就能够得到y，不管你的训练集有多大，中间过程都将自己完成。小圆圈在神经网络中，被称为隐藏单元，每个输入都同时来自于四个特征。</p>\n<p>值得一提的是，神经网络需要喂足够多的数据，即足够多的x,y训练样本。</p>\n<h1 id=\"为什么深度学习会兴起？\"><a href=\"#为什么深度学习会兴起？\" class=\"headerlink\" title=\"为什么深度学习会兴起？\"></a>为什么深度学习会兴起？</h1><p><img src=\"/assets/images/170912_4.JPG\"><br>如图，横轴代表完成任务的数据数量，纵轴代表机器学习算法的性能。</p>\n<p>传统机器学习算法的表现，如支持向量机和logistic回归等，对映图中的红色曲线，性能在一开始，会随着数据的增加而上升，但一段时间之后，性能就会进入平台期，因为这些模型无法处理海量数据。在过去的几十年，我们遇到的很多问题，早期只能得到较少的数据量，而现在要收集海量数据轻而易举，远超传统学习算法能发挥作用的规模。<br>训练小号的神经网络，如黄色曲线，稍大一点的，如蓝色曲线，非常大的如绿色曲线，算法性能越来越好。  </p>\n<p>注意，要想达到高性能水平的神经网络有两个条件：一是神经网络的训练规模要足够大，以发挥数据规模量巨大的优点，二是需要足够大的数据量。  </p>\n<p>规模一直推动深度学习的进步，这里的规模不仅指神经网络的规模，还有“带标签的数据”量的规模。训练量不大时，算法效果取决于你手工设计的组件以及算法处理的一些细节，只有在大数据领域，才能见到神经网络。</p>\n<h1 id=\"logistic回归\"><a href=\"#logistic回归\" class=\"headerlink\" title=\"logistic回归\"></a>logistic回归</h1><p>Logistic回归是一种学习算法，用在监督学习问题中，适用于输出标签是0或1的二元分类问题。</p>\n<p>举个例子，输入特征向量x，可能是一张图片，你希望识别出这是不是一张猫图，输出一个预测值\\hat{y}，\\hat{y}是对y的预测，正式的说是一个概率值。当输入特征x满足条件时，y就是1，换句话，如果x是图片，你希望\\hat{y}告诉你这张图片是猫的概率。</p>\n<p>所以x是一个n_x维向量，logistic回归的参数是w，也是一个n_x维向量，b则是一个实数。那么已知输入x和参数w，b，如何计算预测\\hat{y}呢？<br>可以用公式：\\hat{y} = \\sigma(w^T+b)</p>\n<p><img src=\"/assets/images/170912_5.JPG\"><br>如图是sigmoid(z)的函数图形，横轴为z，是一条从0到1的光滑函数。</p>\n<p>sigmoid(z)中z是实数，就是\\frac{1}{1+e^{-z}}，当z非常大时，sigmoid(z)很接近1，z非常小时，sigmoid(z)很接近0。所以实现logistic回归时，要做的是学习参数w和b。训练w,b时需要定义一个成本函数。</p>\n<p>再此之前，需要先定义下损失函数，损失函数衡量算法的运行情况，衡量预测输出值\\hat{y}和y实际值有多接近。</p>\n<p>常用的损失函数：l(\\hat{y},y) = -(ylog\\hat{y}+(1-y)log(1-\\hat{y}))</p>\n<p>例如y=1时，损失函数l(\\hat{y},y) = -log\\hat{y}，想要损失函数尽可能的小，那么log\\hat{y}需要尽可能的大，即意味着\\hat{y}要足够大，因为\\hat{y}由sigmoid函数得出，永远不会比1大，那么也就是说\\hat{y}将无限接近于1。<br>另一种情况y=0时，损失函数l(\\hat{y},y） = -log(1-\\hat{y})，想要损失函数尽可能的小，log(1-\\hat{y})需要尽可能的大，意味着\\hat{y}要足够小，因为\\hat{y}由sigmoid函数得出，永远不会比0小，那么也就是说\\hat{y}无限接近于0。</p>\n<p>损失函数是在单个训练样本中定义的，它衡量了神经网络在单个训练样本上的表现。下面定义一个成本函数，它衡量的是神经网络在全体训练样本上的表现。<br>j(w,b)=\\frac{1}{m} \\sum_{i=1}^{m} l(\\hat{y}^{(i)},y^{(i)})</p>\n<p>要习得合适的参数w和b，使得成本函数J(w,b)尽可能地小，可以利用梯度下降法。</p>\n<h2 id=\"梯度下降法\"><a href=\"#梯度下降法\" class=\"headerlink\" title=\"梯度下降法\"></a>梯度下降法</h2><p>梯度下降法所做的就是从初始点开始，朝着最陡的下坡方向走，走一步即为梯度下降的一次迭代。<br><img src=\"/assets/images/170912_6.JPG\"><br>为了方便，先忽略上述b对函数J的影响，仅一维曲线代替多维曲线，梯度下降的做法是重复执行以下的更新操作，<br>w := w-\\alphadj(w)/dw,<br>\\alpha代表学习率，控制每一次迭代或梯度下降法中的步长。</p>\n<p>例如参数w，一开始很大，如图右侧，此时导数为正，新的w值等于w自身减去学习率乘导数，接着w会向左边走一步，像这样，让你的算法，渐渐地减小这个参数w。如果参数w一开始很小，如图左侧，此时倒数为负，新的w值会向右走一步，渐渐地算法会增大这个参数w。</p>\n<p>当前只考虑参数w，那么在logistic回归中，成本函数含有参数w和b，同理<br>w:=w-\\alpha \\partial j(w,b)/ \\partial w<br>b:=b-\\alpha \\partial j(w,b)/ \\partial b</p>\n<p>一个神经网络的计算都是按照前向及反向传播过程来实现的，首先计算出神经网络的输出，紧接着进行一个反向传输操作。后者用于计算对应的梯度或导数。</p>\n<h2 id=\"logistic回归中的梯度下降\"><a href=\"#logistic回归中的梯度下降\" class=\"headerlink\" title=\"logistic回归中的梯度下降\"></a>logistic回归中的梯度下降</h2><p>回顾公式：<br>z=w^T+b<br>\\hat{y} = a = \\sigma（z）<br>l(a,y)=-(ylog(a)+（1-y）log(1-a))</p>\n<p><img src=\"/assets/images/170912_7.JPG\"><br>假设样本只有两个特征x_1,x_2,为了计算z,我们需要参数w1,w2和b。<br>计算出损失函数l后，先向前一步，计算损失函数的导数da，即结果关于变量a的导数，再向前一步，计算出dz，dz=a-y，向前传播最后一步，计算出w,b需要如何变化，特别的，关于w1的导数dw1=x_1dz，同样的dw2=x_2dz，db=dz。</p>\n<p>关于logistic回归的梯度下降法就是先计算出dz，再用dz计算出dw1,dw2和db,然后用梯度下降法的公式更新来参数w1,w2,和b。<br>w1:=w1-\\alpha d w1<br>w2:=w2-\\alpha d w2<br>b:=b-\\alpha db</p>\n<p>如上是将梯度下降法应用到logistic回归的单个训练样本上，现在我们要将他应用在m个训练样本上。<br>全局成本函数J(w,b)相当于从1到m项的损失函数求和后平均，它表明全局成本函数对w1的导数也同样是各项损失函数对w1导数的平均。<br>即\\frac{\\partial}{\\partial w1}J(w,b) = \\frac{1}{m} \\sum_{i=1}^{m} \\frac{\\partial}{\\partial w1} l(a^{(i)},y^{(i)})</p>\n<p>同理可得\\partialw2和\\partialb。</p>"},{"layout":"post","title":"笔记-吴恩达deeplearning之三","comments":1,"date":"2017-09-18T09:06:10.000Z","_content":"在训练神经网络时，我们需要做出很多决策。\n例如神经网络的层数，含多少个隐藏单元，学习率的值，各层激活函数的选择，一开始不可能预测出这些参数的准确信息。\n实际上，应用型机器学习是一个高度迭代的过程。\n<!--more-->\n# 偏差和方差 \n\n关于深度学习的误差问题，趋势上是分别考虑偏差和方差，越来越少谈及偏差和方差的权衡问题。\n![](/assets/images/170918_1.JPG)\n假设这是数据集，如果拟合一条直线，可能得到一个Logistic回归拟合，如左图，但它并不能很好的拟合该数据集，这种情况偏差较高，称之为“欠拟合”。相反，如果我们拟合一个非常复杂的分类器，比如神经网络，或许非常适合这个数据集，如有图，但看起也不是一种好的拟合方式，分类器方差较高，数据过度拟合。在两者间，或许还有一些如中间这样，复杂度适中，数据拟合适度的分类器，称之为“适度拟合”。\n\n如此这样只有x1和x2两个特征的二维数据集中，我们可以将偏差和方差可视化。但在多维数据集中，绘制数据和可视化分割边界无法实现，但我们能通过几个指标，来研究偏差和方差。\n![](/assets/images/170918_2.JPG)\n沿用猫图分类的例子，理解偏差和方差的两个关键数据是训练集误差和验证集误差。基于人眼辨别的错误率接近0%为基准：  \n假定训练集错误率是1%，验证集错误率是11%，可以看出，训练集设置的很好，而验证集设置相对较差，这种情况，称之为“高方差”。  \n假定训练集错误率是15%，验证集错误率是16%，算法并没有在训练集中得到很好的训练，这种情况称之为“高偏差”。  \n假定训练集错误率是15%，验证集错误率是30%，这种情况下，算法偏差高，方差也很高。  \n假定训练集错误率是0.5%，验证集错误率是1%，这种情况偏差和方差都很低。  \n\n# 训练神经网络的基本方法\n\n在初始模型完成后，首先检查算法的偏差情况，如果偏差高，则试着评估训练集的性能。如果偏差非常高，甚至无法拟合训练集，那将要选择一个新的网络，比如增加更多隐层、花费更多训练时间、采用更先进的优化算法等。\n\n一旦偏差降低到可接受范围，检查方差的情况，为了评估方差，需要查看验证集性能。如果方差高，最好的解决方案就是采用更多的数据，但有时无法获得更多数据时，也可以尝试正则化来减少过拟合。\n\n在机器学习初期阶段，关于所谓的偏差方差权衡的讨论屡见不鲜，因为，我们有很多方法，可以增加偏差、减少方差，也可以减少偏差、减少方差。\n但深度学习的早期阶段，我们没有太多工具可以做到只减少偏差或只减少方差，却不影响到另外一方。\n而现如今在深度学习和大数据时代，我们有工具可以做到在减少偏差的同时，不对另一方产生过多不良影响。\n这就是深度学习对监督学习大有裨益的一个重要原因，也是我们不用太过于关注如何平衡偏差和方差的一个重要原因。\n\n总之，就是不断重复尝试，直到找到一个低偏差，低方差的框架，我们就会得到一个非常规范化的网络。\n\n# 正则化\n\n神经网络过度拟合数据，就会存在高方差的问题，那么最先想到的解决方法可能就是正则化。\n另一个解决方法是准备更多的数据，这也是很可行的方法。\n\n### L2正则化\n以Logistic回归为例，在逻辑回归函数中加入正则化，添加正则化参数\\lambda，该参数常用验证集来配置。\nJ(w,b)=\\frac{1}{m} \\sum_{i=1}^m l(\\hat{y}^{(i)},y^{(i)})+\\frac{\\lambda}{2m}\\|\\|w\\|\\|_2^2\n\n此方法称L2正则化，是最常见的正则化类型。因为w通常是一个高维参数矢量，已经可以表达高偏差问题，而b仅是一个实数，所以b常忽略不计。\n\n以神经网络为例，实现正则化，成本函数包含w^{[1]},b^{[1]}到w^{[L]},b^{[L]}所有参数\nJ(w^{[1]},b^{[1]}…w^{[L]},b^{[L]})  \n=\\frac{1}{m} \\sum_{i=1}^m l(\\hat{y}^{(i)},y^{(i)})        \n   \n+\\frac{\\lambda}{2m} \\sum_{L=1}^L \\|\\|W^{[L]}\\|\\|_F^2\n  \n该矩阵范数被称为“弗罗贝尼乌斯范数”，用下标F表示，它表示一个矩阵中所有元素的平方和。\n\n在弗罗贝尼乌斯范数中，假设正则化\\lambda设置的足够大，那么权重矩阵W^{[L]}将会非常接近于0，即大大减少了隐藏单元的影响，将使神经网络变得很小，但深度很大，它会使网络从过拟合状态变为高偏差状态，但由于有\\lambda的存在，于是网络会接近于中间状态。\n\n### dropout正则化\n![](/assets/images/170918_3.JPG)\n将神经网络复制到右侧，dropout正则化会遍历网络中每一层的每个节点，并在每一个节点上设置消除神节点的概率，假设网络中的每一节点都以抛硬币的方式设置概率，那么每一节点的被保留和被消除的概率都是0.5，设置完节点概率后，我们随机消除掉一些节点，并且删除该节点上的连线，最后我们将得到一个节点更少，规模更小的网络，之后对这个简化后的网络进行训练即可。\n\n实施dropout的结果是它会压缩权重，并完成一些预防过拟合的外层正则化。\n\n在测试阶段不适用dropout，因为在测试阶段预测时应用dropout函数，预测会受到干扰。\n\n#### inverted dropout\n以一个三层网络为例：\n![](/assets/images/170918_4.JPG)\n首先定义向量d^3，表示一个三层的dropout向量，每个样本和每个隐藏单元在d^3中对应的值为1的概率都是keep-prob的值，设为0.8。\n之后从第三层中获取激活函数a^3，等于上面的a^3乘以d^3，其为元素相乘。作用是过滤d^3中所有等于0的元素。\n最后我们向外扩展a^3，用它除以0.8或keep-prob的值。\n\n它的功能是，不论keep-prob的值是多少，都可以确保a^3的期望值不变。\n\n### 其他正则化方法\n\n除了L2正则化、dropout正则化，还有几种方法可以减少神经网络的过拟合。\n#### 数据扩增\n比如以图片作为训练集，通过水平翻转图片(当然也可以进行截取),以扩充训练集，使训练集可以增大一倍，因为训练集有冗余，所以效果不如额外手机一组新图片那么好，但节省了获取图片的花费。\n以这种方式，可以扩增算法数据，进而正则化数据集，减少过拟合。\n\n#### early stoping\n还有一种方法叫early stopping\n![](/assets/images/170918_5.JPG)\n运行梯度下降时，我们可以画出成本函数J的训练趋势，还可以绘制出验证集误差，它可以是验证集上的分类误差，如图，验证集误差通常会先呈下降趋势，然后在某个节点处开始上升。\n\n在训练初期，w值相对很小，所以在长期训练神经网络的过程中，w的值会越变越大，early stopping的作用就是在中间点停止迭代过程，我们将得到一个w值中等大小的弗罗贝尼乌斯范数。\n\n该方法的主要缺点是，在机器学习过程中，不能独立的处理优化成本函数J和正则化这两个问题。\n\n# 梯度消失(梯度爆炸)\n在训练深度网络时，导数或坡度有时会变得非常大，或非常小，这加大了训练的难度。\n![](/assets/images/170918_6.JPG)\n假设正在训练这样一个极深的神经网络，为了简化，令b为0，且使用线性激活函数g(z)=z\n那么输出\\hat{y}=w^{[L]}w^{[L-1]}w^{[L-2]}…w^{[1]}x，（w^{[1]}x=z^{[1]}=a^{[1]}）\n\n通过推理，假设每个矩阵都大于或小于1，哪怕仅大一点点，或小一点点，激活函数将以指数级增长或递减，\\hat{y}的值将会变得极大或极小，从而导致训练难度上升。\n尤其当梯度下降步长较小时，将会花费很长时间来学习。 \n#### 权重初始化\n针对该问题，有一不完整的解决方案，虽不能彻底解决问题，却很有用。\n有助于我们为神经网络更谨慎的选择随机初始化参数。\n\n当只有一个神经元时，有若干输入特征向量,\n则z为若干个w_ix_i之和，此处令b=0暂且忽略\n    \n为了防止预测z值过大或过小，可以看到当n越大时，希望w_{[i]}越小，\n最合理的方法就是设置Var(W_i)=1/n，n表示神经元的输入特征数量  \n实际上要做的就是设置某层权重矩阵W，\n\nW^{[L]}=np.random.randn(shape)*np.sqrt(\\frac{1}{n^{[L-1]}})\n\n如果使用的是Relu激活函数，而不是1/n，方差Var(W_i)设置为2/n效果更好\n初始化时，尤其使用Relu激活函数时，它取决于你对随机变量的熟悉程度\n\n因为它给权重矩阵W设置了合理值，不能比1大很多，也不能比1小很多，所以梯度没有爆炸或消失过快，它确实降低了坡度消失和爆炸问题。\n\n# 梯度检验\n\n在实施backprop时，有一个测试叫做梯度检验，为了确保backprop正确实施，为了实现梯度检验，首先谈谈如何对计算梯度做数值逼近\n\n### 数值逼近\n![](/assets/images/170918_7.JPG)\n函数标记为f(\\theta)，f=(\\theta)=\\theta ^3\n假设\\theta=1，不增大\\theta的值，而是在\\theta右侧设置一个\\theta +\\varepsilon，在左侧设置一个\\theta -\\varepsilon，\n如图，大三角形的高宽比值更接近于\\theta的导数，将右上角的三角形下移，这个大三角形同时考虑了这两个小三角形\n\n所以我们得到的不是一个单边公差而是一个双边公差，\n故高宽比值为:\\frac{f(\\theta +\\varepsilon)-f(\\theta -\\varepsilon)}{2\\varepsilon}，它的期望值接近g(\\theta)\n\n### 梯度检验\n假设网络中含有W^{[1]},b^{[1]},…,W^{[L]},b^{[L]}，为了执行梯度检验，首先将所有参数转换成一个巨大的向量数据，得到巨型向量\\theta，得到成本函数J(\\theta)\n\n接着得到W和b顺序相同的dW^{[1]},db^{[1]},…,dW^{[L]},db^{[L]}数据，用他们来初始化大项量d\\theta，它与\\theta具有相同维度，经过相同的转换和连接运算操作后，可将所有导数转换成一个大向量d\\theta\n\nJ是一个超级参数\\theta的函数，\n为了实施梯度检验，需要循环执行：\nd\\theta _{approx}^{[i]}=\\frac{J(\\theta _1,\\theta _2,…,\\theta _i+\\varepsilon,…)-J(\\theta _1,\\theta _2,…,\\theta _i-\\varepsilon,…)}{2\\varepsilon}\n\n这个值应该逼近d\\theta ^{[i]}\n需要对每个i的每个值都执行这个运算，最后得到两个向量，\nd\\theta和其逼近值d\\theta _{approx}，它与d\\theta维度相同\n需要验证的就是这些向量是否彼此接近\n\n判断向量是否接近时，通常：\n计算两个向量的距离，\\|\\| d\\theta _{approx}-d\\theta \\|\\| _2，  \n\n之后用向量长度做归一化\n分母只是预防向量太大或太小，使这个方程变成比率\n\n如果计算方程得到的值为10^{-7}或更小，则意味着导数逼近很可能是正确的。\n如果值在10^{-5}范围内，就需要注意是否某个值过大。\n如果值在10^{-3}范围内，就需要注意是否存在bug。\n\n### 注意事项\n\n首先，不要在训练中使用梯度检验，它只是用于调试\n第二，如果算法的梯度检验失败，要检查所有项，试着找出bug\n第三，在实施梯度检验时，如果使用正则化，请注意正则化\n第四，梯度检验不能与dropout同时使用\n第五，在随机初始化过程中，先运行梯度检验，然后再训练网络","source":"_posts/笔记-吴恩达deeplearning之三.md","raw":"---\nlayout: post\ntitle: 笔记-吴恩达deeplearning之三\ncomments: true\ndate: 2017-09-18 17:06:10\ntags:\n- 深度学习\n---\n在训练神经网络时，我们需要做出很多决策。\n例如神经网络的层数，含多少个隐藏单元，学习率的值，各层激活函数的选择，一开始不可能预测出这些参数的准确信息。\n实际上，应用型机器学习是一个高度迭代的过程。\n<!--more-->\n# 偏差和方差 \n\n关于深度学习的误差问题，趋势上是分别考虑偏差和方差，越来越少谈及偏差和方差的权衡问题。\n![](/assets/images/170918_1.JPG)\n假设这是数据集，如果拟合一条直线，可能得到一个Logistic回归拟合，如左图，但它并不能很好的拟合该数据集，这种情况偏差较高，称之为“欠拟合”。相反，如果我们拟合一个非常复杂的分类器，比如神经网络，或许非常适合这个数据集，如有图，但看起也不是一种好的拟合方式，分类器方差较高，数据过度拟合。在两者间，或许还有一些如中间这样，复杂度适中，数据拟合适度的分类器，称之为“适度拟合”。\n\n如此这样只有x1和x2两个特征的二维数据集中，我们可以将偏差和方差可视化。但在多维数据集中，绘制数据和可视化分割边界无法实现，但我们能通过几个指标，来研究偏差和方差。\n![](/assets/images/170918_2.JPG)\n沿用猫图分类的例子，理解偏差和方差的两个关键数据是训练集误差和验证集误差。基于人眼辨别的错误率接近0%为基准：  \n假定训练集错误率是1%，验证集错误率是11%，可以看出，训练集设置的很好，而验证集设置相对较差，这种情况，称之为“高方差”。  \n假定训练集错误率是15%，验证集错误率是16%，算法并没有在训练集中得到很好的训练，这种情况称之为“高偏差”。  \n假定训练集错误率是15%，验证集错误率是30%，这种情况下，算法偏差高，方差也很高。  \n假定训练集错误率是0.5%，验证集错误率是1%，这种情况偏差和方差都很低。  \n\n# 训练神经网络的基本方法\n\n在初始模型完成后，首先检查算法的偏差情况，如果偏差高，则试着评估训练集的性能。如果偏差非常高，甚至无法拟合训练集，那将要选择一个新的网络，比如增加更多隐层、花费更多训练时间、采用更先进的优化算法等。\n\n一旦偏差降低到可接受范围，检查方差的情况，为了评估方差，需要查看验证集性能。如果方差高，最好的解决方案就是采用更多的数据，但有时无法获得更多数据时，也可以尝试正则化来减少过拟合。\n\n在机器学习初期阶段，关于所谓的偏差方差权衡的讨论屡见不鲜，因为，我们有很多方法，可以增加偏差、减少方差，也可以减少偏差、减少方差。\n但深度学习的早期阶段，我们没有太多工具可以做到只减少偏差或只减少方差，却不影响到另外一方。\n而现如今在深度学习和大数据时代，我们有工具可以做到在减少偏差的同时，不对另一方产生过多不良影响。\n这就是深度学习对监督学习大有裨益的一个重要原因，也是我们不用太过于关注如何平衡偏差和方差的一个重要原因。\n\n总之，就是不断重复尝试，直到找到一个低偏差，低方差的框架，我们就会得到一个非常规范化的网络。\n\n# 正则化\n\n神经网络过度拟合数据，就会存在高方差的问题，那么最先想到的解决方法可能就是正则化。\n另一个解决方法是准备更多的数据，这也是很可行的方法。\n\n### L2正则化\n以Logistic回归为例，在逻辑回归函数中加入正则化，添加正则化参数\\lambda，该参数常用验证集来配置。\nJ(w,b)=\\frac{1}{m} \\sum_{i=1}^m l(\\hat{y}^{(i)},y^{(i)})+\\frac{\\lambda}{2m}\\|\\|w\\|\\|_2^2\n\n此方法称L2正则化，是最常见的正则化类型。因为w通常是一个高维参数矢量，已经可以表达高偏差问题，而b仅是一个实数，所以b常忽略不计。\n\n以神经网络为例，实现正则化，成本函数包含w^{[1]},b^{[1]}到w^{[L]},b^{[L]}所有参数\nJ(w^{[1]},b^{[1]}…w^{[L]},b^{[L]})  \n=\\frac{1}{m} \\sum_{i=1}^m l(\\hat{y}^{(i)},y^{(i)})        \n   \n+\\frac{\\lambda}{2m} \\sum_{L=1}^L \\|\\|W^{[L]}\\|\\|_F^2\n  \n该矩阵范数被称为“弗罗贝尼乌斯范数”，用下标F表示，它表示一个矩阵中所有元素的平方和。\n\n在弗罗贝尼乌斯范数中，假设正则化\\lambda设置的足够大，那么权重矩阵W^{[L]}将会非常接近于0，即大大减少了隐藏单元的影响，将使神经网络变得很小，但深度很大，它会使网络从过拟合状态变为高偏差状态，但由于有\\lambda的存在，于是网络会接近于中间状态。\n\n### dropout正则化\n![](/assets/images/170918_3.JPG)\n将神经网络复制到右侧，dropout正则化会遍历网络中每一层的每个节点，并在每一个节点上设置消除神节点的概率，假设网络中的每一节点都以抛硬币的方式设置概率，那么每一节点的被保留和被消除的概率都是0.5，设置完节点概率后，我们随机消除掉一些节点，并且删除该节点上的连线，最后我们将得到一个节点更少，规模更小的网络，之后对这个简化后的网络进行训练即可。\n\n实施dropout的结果是它会压缩权重，并完成一些预防过拟合的外层正则化。\n\n在测试阶段不适用dropout，因为在测试阶段预测时应用dropout函数，预测会受到干扰。\n\n#### inverted dropout\n以一个三层网络为例：\n![](/assets/images/170918_4.JPG)\n首先定义向量d^3，表示一个三层的dropout向量，每个样本和每个隐藏单元在d^3中对应的值为1的概率都是keep-prob的值，设为0.8。\n之后从第三层中获取激活函数a^3，等于上面的a^3乘以d^3，其为元素相乘。作用是过滤d^3中所有等于0的元素。\n最后我们向外扩展a^3，用它除以0.8或keep-prob的值。\n\n它的功能是，不论keep-prob的值是多少，都可以确保a^3的期望值不变。\n\n### 其他正则化方法\n\n除了L2正则化、dropout正则化，还有几种方法可以减少神经网络的过拟合。\n#### 数据扩增\n比如以图片作为训练集，通过水平翻转图片(当然也可以进行截取),以扩充训练集，使训练集可以增大一倍，因为训练集有冗余，所以效果不如额外手机一组新图片那么好，但节省了获取图片的花费。\n以这种方式，可以扩增算法数据，进而正则化数据集，减少过拟合。\n\n#### early stoping\n还有一种方法叫early stopping\n![](/assets/images/170918_5.JPG)\n运行梯度下降时，我们可以画出成本函数J的训练趋势，还可以绘制出验证集误差，它可以是验证集上的分类误差，如图，验证集误差通常会先呈下降趋势，然后在某个节点处开始上升。\n\n在训练初期，w值相对很小，所以在长期训练神经网络的过程中，w的值会越变越大，early stopping的作用就是在中间点停止迭代过程，我们将得到一个w值中等大小的弗罗贝尼乌斯范数。\n\n该方法的主要缺点是，在机器学习过程中，不能独立的处理优化成本函数J和正则化这两个问题。\n\n# 梯度消失(梯度爆炸)\n在训练深度网络时，导数或坡度有时会变得非常大，或非常小，这加大了训练的难度。\n![](/assets/images/170918_6.JPG)\n假设正在训练这样一个极深的神经网络，为了简化，令b为0，且使用线性激活函数g(z)=z\n那么输出\\hat{y}=w^{[L]}w^{[L-1]}w^{[L-2]}…w^{[1]}x，（w^{[1]}x=z^{[1]}=a^{[1]}）\n\n通过推理，假设每个矩阵都大于或小于1，哪怕仅大一点点，或小一点点，激活函数将以指数级增长或递减，\\hat{y}的值将会变得极大或极小，从而导致训练难度上升。\n尤其当梯度下降步长较小时，将会花费很长时间来学习。 \n#### 权重初始化\n针对该问题，有一不完整的解决方案，虽不能彻底解决问题，却很有用。\n有助于我们为神经网络更谨慎的选择随机初始化参数。\n\n当只有一个神经元时，有若干输入特征向量,\n则z为若干个w_ix_i之和，此处令b=0暂且忽略\n    \n为了防止预测z值过大或过小，可以看到当n越大时，希望w_{[i]}越小，\n最合理的方法就是设置Var(W_i)=1/n，n表示神经元的输入特征数量  \n实际上要做的就是设置某层权重矩阵W，\n\nW^{[L]}=np.random.randn(shape)*np.sqrt(\\frac{1}{n^{[L-1]}})\n\n如果使用的是Relu激活函数，而不是1/n，方差Var(W_i)设置为2/n效果更好\n初始化时，尤其使用Relu激活函数时，它取决于你对随机变量的熟悉程度\n\n因为它给权重矩阵W设置了合理值，不能比1大很多，也不能比1小很多，所以梯度没有爆炸或消失过快，它确实降低了坡度消失和爆炸问题。\n\n# 梯度检验\n\n在实施backprop时，有一个测试叫做梯度检验，为了确保backprop正确实施，为了实现梯度检验，首先谈谈如何对计算梯度做数值逼近\n\n### 数值逼近\n![](/assets/images/170918_7.JPG)\n函数标记为f(\\theta)，f=(\\theta)=\\theta ^3\n假设\\theta=1，不增大\\theta的值，而是在\\theta右侧设置一个\\theta +\\varepsilon，在左侧设置一个\\theta -\\varepsilon，\n如图，大三角形的高宽比值更接近于\\theta的导数，将右上角的三角形下移，这个大三角形同时考虑了这两个小三角形\n\n所以我们得到的不是一个单边公差而是一个双边公差，\n故高宽比值为:\\frac{f(\\theta +\\varepsilon)-f(\\theta -\\varepsilon)}{2\\varepsilon}，它的期望值接近g(\\theta)\n\n### 梯度检验\n假设网络中含有W^{[1]},b^{[1]},…,W^{[L]},b^{[L]}，为了执行梯度检验，首先将所有参数转换成一个巨大的向量数据，得到巨型向量\\theta，得到成本函数J(\\theta)\n\n接着得到W和b顺序相同的dW^{[1]},db^{[1]},…,dW^{[L]},db^{[L]}数据，用他们来初始化大项量d\\theta，它与\\theta具有相同维度，经过相同的转换和连接运算操作后，可将所有导数转换成一个大向量d\\theta\n\nJ是一个超级参数\\theta的函数，\n为了实施梯度检验，需要循环执行：\nd\\theta _{approx}^{[i]}=\\frac{J(\\theta _1,\\theta _2,…,\\theta _i+\\varepsilon,…)-J(\\theta _1,\\theta _2,…,\\theta _i-\\varepsilon,…)}{2\\varepsilon}\n\n这个值应该逼近d\\theta ^{[i]}\n需要对每个i的每个值都执行这个运算，最后得到两个向量，\nd\\theta和其逼近值d\\theta _{approx}，它与d\\theta维度相同\n需要验证的就是这些向量是否彼此接近\n\n判断向量是否接近时，通常：\n计算两个向量的距离，\\|\\| d\\theta _{approx}-d\\theta \\|\\| _2，  \n\n之后用向量长度做归一化\n分母只是预防向量太大或太小，使这个方程变成比率\n\n如果计算方程得到的值为10^{-7}或更小，则意味着导数逼近很可能是正确的。\n如果值在10^{-5}范围内，就需要注意是否某个值过大。\n如果值在10^{-3}范围内，就需要注意是否存在bug。\n\n### 注意事项\n\n首先，不要在训练中使用梯度检验，它只是用于调试\n第二，如果算法的梯度检验失败，要检查所有项，试着找出bug\n第三，在实施梯度检验时，如果使用正则化，请注意正则化\n第四，梯度检验不能与dropout同时使用\n第五，在随机初始化过程中，先运行梯度检验，然后再训练网络","slug":"笔记-吴恩达deeplearning之三","published":1,"updated":"2021-11-28T14:48:50.062Z","photos":[],"link":"","_id":"cl4kyqfv4000x20r5aizz7dmn","content":"<p>在训练神经网络时，我们需要做出很多决策。<br>例如神经网络的层数，含多少个隐藏单元，学习率的值，各层激活函数的选择，一开始不可能预测出这些参数的准确信息。<br>实际上，应用型机器学习是一个高度迭代的过程。</p>\n<span id=\"more\"></span>\n<h1 id=\"偏差和方差\"><a href=\"#偏差和方差\" class=\"headerlink\" title=\"偏差和方差\"></a>偏差和方差</h1><p>关于深度学习的误差问题，趋势上是分别考虑偏差和方差，越来越少谈及偏差和方差的权衡问题。<br><img src=\"/assets/images/170918_1.JPG\"><br>假设这是数据集，如果拟合一条直线，可能得到一个Logistic回归拟合，如左图，但它并不能很好的拟合该数据集，这种情况偏差较高，称之为“欠拟合”。相反，如果我们拟合一个非常复杂的分类器，比如神经网络，或许非常适合这个数据集，如有图，但看起也不是一种好的拟合方式，分类器方差较高，数据过度拟合。在两者间，或许还有一些如中间这样，复杂度适中，数据拟合适度的分类器，称之为“适度拟合”。</p>\n<p>如此这样只有x1和x2两个特征的二维数据集中，我们可以将偏差和方差可视化。但在多维数据集中，绘制数据和可视化分割边界无法实现，但我们能通过几个指标，来研究偏差和方差。<br><img src=\"/assets/images/170918_2.JPG\"><br>沿用猫图分类的例子，理解偏差和方差的两个关键数据是训练集误差和验证集误差。基于人眼辨别的错误率接近0%为基准：<br>假定训练集错误率是1%，验证集错误率是11%，可以看出，训练集设置的很好，而验证集设置相对较差，这种情况，称之为“高方差”。<br>假定训练集错误率是15%，验证集错误率是16%，算法并没有在训练集中得到很好的训练，这种情况称之为“高偏差”。<br>假定训练集错误率是15%，验证集错误率是30%，这种情况下，算法偏差高，方差也很高。<br>假定训练集错误率是0.5%，验证集错误率是1%，这种情况偏差和方差都很低。  </p>\n<h1 id=\"训练神经网络的基本方法\"><a href=\"#训练神经网络的基本方法\" class=\"headerlink\" title=\"训练神经网络的基本方法\"></a>训练神经网络的基本方法</h1><p>在初始模型完成后，首先检查算法的偏差情况，如果偏差高，则试着评估训练集的性能。如果偏差非常高，甚至无法拟合训练集，那将要选择一个新的网络，比如增加更多隐层、花费更多训练时间、采用更先进的优化算法等。</p>\n<p>一旦偏差降低到可接受范围，检查方差的情况，为了评估方差，需要查看验证集性能。如果方差高，最好的解决方案就是采用更多的数据，但有时无法获得更多数据时，也可以尝试正则化来减少过拟合。</p>\n<p>在机器学习初期阶段，关于所谓的偏差方差权衡的讨论屡见不鲜，因为，我们有很多方法，可以增加偏差、减少方差，也可以减少偏差、减少方差。<br>但深度学习的早期阶段，我们没有太多工具可以做到只减少偏差或只减少方差，却不影响到另外一方。<br>而现如今在深度学习和大数据时代，我们有工具可以做到在减少偏差的同时，不对另一方产生过多不良影响。<br>这就是深度学习对监督学习大有裨益的一个重要原因，也是我们不用太过于关注如何平衡偏差和方差的一个重要原因。</p>\n<p>总之，就是不断重复尝试，直到找到一个低偏差，低方差的框架，我们就会得到一个非常规范化的网络。</p>\n<h1 id=\"正则化\"><a href=\"#正则化\" class=\"headerlink\" title=\"正则化\"></a>正则化</h1><p>神经网络过度拟合数据，就会存在高方差的问题，那么最先想到的解决方法可能就是正则化。<br>另一个解决方法是准备更多的数据，这也是很可行的方法。</p>\n<h3 id=\"L2正则化\"><a href=\"#L2正则化\" class=\"headerlink\" title=\"L2正则化\"></a>L2正则化</h3><p>以Logistic回归为例，在逻辑回归函数中加入正则化，添加正则化参数\\lambda，该参数常用验证集来配置。<br>J(w,b)=\\frac{1}{m} \\sum_{i=1}^m l(\\hat{y}^{(i)},y^{(i)})+\\frac{\\lambda}{2m}||w||_2^2</p>\n<p>此方法称L2正则化，是最常见的正则化类型。因为w通常是一个高维参数矢量，已经可以表达高偏差问题，而b仅是一个实数，所以b常忽略不计。</p>\n<p>以神经网络为例，实现正则化，成本函数包含w^{[1]},b^{[1]}到w^{[L]},b^{[L]}所有参数<br>J(w^{[1]},b^{[1]}…w^{[L]},b^{[L]})<br>=\\frac{1}{m} \\sum_{i=1}^m l(\\hat{y}^{(i)},y^{(i)})        </p>\n<p>+\\frac{\\lambda}{2m} \\sum_{L=1}^L ||W^{[L]}||_F^2</p>\n<p>该矩阵范数被称为“弗罗贝尼乌斯范数”，用下标F表示，它表示一个矩阵中所有元素的平方和。</p>\n<p>在弗罗贝尼乌斯范数中，假设正则化\\lambda设置的足够大，那么权重矩阵W^{[L]}将会非常接近于0，即大大减少了隐藏单元的影响，将使神经网络变得很小，但深度很大，它会使网络从过拟合状态变为高偏差状态，但由于有\\lambda的存在，于是网络会接近于中间状态。</p>\n<h3 id=\"dropout正则化\"><a href=\"#dropout正则化\" class=\"headerlink\" title=\"dropout正则化\"></a>dropout正则化</h3><p><img src=\"/assets/images/170918_3.JPG\"><br>将神经网络复制到右侧，dropout正则化会遍历网络中每一层的每个节点，并在每一个节点上设置消除神节点的概率，假设网络中的每一节点都以抛硬币的方式设置概率，那么每一节点的被保留和被消除的概率都是0.5，设置完节点概率后，我们随机消除掉一些节点，并且删除该节点上的连线，最后我们将得到一个节点更少，规模更小的网络，之后对这个简化后的网络进行训练即可。</p>\n<p>实施dropout的结果是它会压缩权重，并完成一些预防过拟合的外层正则化。</p>\n<p>在测试阶段不适用dropout，因为在测试阶段预测时应用dropout函数，预测会受到干扰。</p>\n<h4 id=\"inverted-dropout\"><a href=\"#inverted-dropout\" class=\"headerlink\" title=\"inverted dropout\"></a>inverted dropout</h4><p>以一个三层网络为例：<br><img src=\"/assets/images/170918_4.JPG\"><br>首先定义向量d^3，表示一个三层的dropout向量，每个样本和每个隐藏单元在d^3中对应的值为1的概率都是keep-prob的值，设为0.8。<br>之后从第三层中获取激活函数a^3，等于上面的a^3乘以d^3，其为元素相乘。作用是过滤d^3中所有等于0的元素。<br>最后我们向外扩展a^3，用它除以0.8或keep-prob的值。</p>\n<p>它的功能是，不论keep-prob的值是多少，都可以确保a^3的期望值不变。</p>\n<h3 id=\"其他正则化方法\"><a href=\"#其他正则化方法\" class=\"headerlink\" title=\"其他正则化方法\"></a>其他正则化方法</h3><p>除了L2正则化、dropout正则化，还有几种方法可以减少神经网络的过拟合。</p>\n<h4 id=\"数据扩增\"><a href=\"#数据扩增\" class=\"headerlink\" title=\"数据扩增\"></a>数据扩增</h4><p>比如以图片作为训练集，通过水平翻转图片(当然也可以进行截取),以扩充训练集，使训练集可以增大一倍，因为训练集有冗余，所以效果不如额外手机一组新图片那么好，但节省了获取图片的花费。<br>以这种方式，可以扩增算法数据，进而正则化数据集，减少过拟合。</p>\n<h4 id=\"early-stoping\"><a href=\"#early-stoping\" class=\"headerlink\" title=\"early stoping\"></a>early stoping</h4><p>还有一种方法叫early stopping<br><img src=\"/assets/images/170918_5.JPG\"><br>运行梯度下降时，我们可以画出成本函数J的训练趋势，还可以绘制出验证集误差，它可以是验证集上的分类误差，如图，验证集误差通常会先呈下降趋势，然后在某个节点处开始上升。</p>\n<p>在训练初期，w值相对很小，所以在长期训练神经网络的过程中，w的值会越变越大，early stopping的作用就是在中间点停止迭代过程，我们将得到一个w值中等大小的弗罗贝尼乌斯范数。</p>\n<p>该方法的主要缺点是，在机器学习过程中，不能独立的处理优化成本函数J和正则化这两个问题。</p>\n<h1 id=\"梯度消失-梯度爆炸\"><a href=\"#梯度消失-梯度爆炸\" class=\"headerlink\" title=\"梯度消失(梯度爆炸)\"></a>梯度消失(梯度爆炸)</h1><p>在训练深度网络时，导数或坡度有时会变得非常大，或非常小，这加大了训练的难度。<br><img src=\"/assets/images/170918_6.JPG\"><br>假设正在训练这样一个极深的神经网络，为了简化，令b为0，且使用线性激活函数g(z)=z<br>那么输出\\hat{y}=w^{[L]}w^{[L-1]}w^{[L-2]}…w^{[1]}x，（w^{[1]}x=z^{[1]}=a^{[1]}）</p>\n<p>通过推理，假设每个矩阵都大于或小于1，哪怕仅大一点点，或小一点点，激活函数将以指数级增长或递减，\\hat{y}的值将会变得极大或极小，从而导致训练难度上升。<br>尤其当梯度下降步长较小时，将会花费很长时间来学习。 </p>\n<h4 id=\"权重初始化\"><a href=\"#权重初始化\" class=\"headerlink\" title=\"权重初始化\"></a>权重初始化</h4><p>针对该问题，有一不完整的解决方案，虽不能彻底解决问题，却很有用。<br>有助于我们为神经网络更谨慎的选择随机初始化参数。</p>\n<p>当只有一个神经元时，有若干输入特征向量,<br>则z为若干个w_ix_i之和，此处令b=0暂且忽略</p>\n<p>为了防止预测z值过大或过小，可以看到当n越大时，希望w_{[i]}越小，<br>最合理的方法就是设置Var(W_i)=1/n，n表示神经元的输入特征数量<br>实际上要做的就是设置某层权重矩阵W，</p>\n<p>W^{[L]}=np.random.randn(shape)*np.sqrt(\\frac{1}{n^{[L-1]}})</p>\n<p>如果使用的是Relu激活函数，而不是1/n，方差Var(W_i)设置为2/n效果更好<br>初始化时，尤其使用Relu激活函数时，它取决于你对随机变量的熟悉程度</p>\n<p>因为它给权重矩阵W设置了合理值，不能比1大很多，也不能比1小很多，所以梯度没有爆炸或消失过快，它确实降低了坡度消失和爆炸问题。</p>\n<h1 id=\"梯度检验\"><a href=\"#梯度检验\" class=\"headerlink\" title=\"梯度检验\"></a>梯度检验</h1><p>在实施backprop时，有一个测试叫做梯度检验，为了确保backprop正确实施，为了实现梯度检验，首先谈谈如何对计算梯度做数值逼近</p>\n<h3 id=\"数值逼近\"><a href=\"#数值逼近\" class=\"headerlink\" title=\"数值逼近\"></a>数值逼近</h3><p><img src=\"/assets/images/170918_7.JPG\"><br>函数标记为f(\\theta)，f=(\\theta)=\\theta ^3<br>假设\\theta=1，不增大\\theta的值，而是在\\theta右侧设置一个\\theta +\\varepsilon，在左侧设置一个\\theta -\\varepsilon，<br>如图，大三角形的高宽比值更接近于\\theta的导数，将右上角的三角形下移，这个大三角形同时考虑了这两个小三角形</p>\n<p>所以我们得到的不是一个单边公差而是一个双边公差，<br>故高宽比值为:\\frac{f(\\theta +\\varepsilon)-f(\\theta -\\varepsilon)}{2\\varepsilon}，它的期望值接近g(\\theta)</p>\n<h3 id=\"梯度检验-1\"><a href=\"#梯度检验-1\" class=\"headerlink\" title=\"梯度检验\"></a>梯度检验</h3><p>假设网络中含有W^{[1]},b^{[1]},…,W^{[L]},b^{[L]}，为了执行梯度检验，首先将所有参数转换成一个巨大的向量数据，得到巨型向量\\theta，得到成本函数J(\\theta)</p>\n<p>接着得到W和b顺序相同的dW^{[1]},db^{[1]},…,dW^{[L]},db^{[L]}数据，用他们来初始化大项量d\\theta，它与\\theta具有相同维度，经过相同的转换和连接运算操作后，可将所有导数转换成一个大向量d\\theta</p>\n<p>J是一个超级参数\\theta的函数，<br>为了实施梯度检验，需要循环执行：<br>d\\theta _{approx}^{[i]}=\\frac{J(\\theta _1,\\theta _2,…,\\theta _i+\\varepsilon,…)-J(\\theta _1,\\theta _2,…,\\theta _i-\\varepsilon,…)}{2\\varepsilon}</p>\n<p>这个值应该逼近d\\theta ^{[i]}<br>需要对每个i的每个值都执行这个运算，最后得到两个向量，<br>d\\theta和其逼近值d\\theta _{approx}，它与d\\theta维度相同<br>需要验证的就是这些向量是否彼此接近</p>\n<p>判断向量是否接近时，通常：<br>计算两个向量的距离，|| d\\theta _{approx}-d\\theta || _2，  </p>\n<p>之后用向量长度做归一化<br>分母只是预防向量太大或太小，使这个方程变成比率</p>\n<p>如果计算方程得到的值为10^{-7}或更小，则意味着导数逼近很可能是正确的。<br>如果值在10^{-5}范围内，就需要注意是否某个值过大。<br>如果值在10^{-3}范围内，就需要注意是否存在bug。</p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><p>首先，不要在训练中使用梯度检验，它只是用于调试<br>第二，如果算法的梯度检验失败，要检查所有项，试着找出bug<br>第三，在实施梯度检验时，如果使用正则化，请注意正则化<br>第四，梯度检验不能与dropout同时使用<br>第五，在随机初始化过程中，先运行梯度检验，然后再训练网络</p>\n","site":{"data":{}},"excerpt":"<p>在训练神经网络时，我们需要做出很多决策。<br>例如神经网络的层数，含多少个隐藏单元，学习率的值，各层激活函数的选择，一开始不可能预测出这些参数的准确信息。<br>实际上，应用型机器学习是一个高度迭代的过程。</p>","more":"<h1 id=\"偏差和方差\"><a href=\"#偏差和方差\" class=\"headerlink\" title=\"偏差和方差\"></a>偏差和方差</h1><p>关于深度学习的误差问题，趋势上是分别考虑偏差和方差，越来越少谈及偏差和方差的权衡问题。<br><img src=\"/assets/images/170918_1.JPG\"><br>假设这是数据集，如果拟合一条直线，可能得到一个Logistic回归拟合，如左图，但它并不能很好的拟合该数据集，这种情况偏差较高，称之为“欠拟合”。相反，如果我们拟合一个非常复杂的分类器，比如神经网络，或许非常适合这个数据集，如有图，但看起也不是一种好的拟合方式，分类器方差较高，数据过度拟合。在两者间，或许还有一些如中间这样，复杂度适中，数据拟合适度的分类器，称之为“适度拟合”。</p>\n<p>如此这样只有x1和x2两个特征的二维数据集中，我们可以将偏差和方差可视化。但在多维数据集中，绘制数据和可视化分割边界无法实现，但我们能通过几个指标，来研究偏差和方差。<br><img src=\"/assets/images/170918_2.JPG\"><br>沿用猫图分类的例子，理解偏差和方差的两个关键数据是训练集误差和验证集误差。基于人眼辨别的错误率接近0%为基准：<br>假定训练集错误率是1%，验证集错误率是11%，可以看出，训练集设置的很好，而验证集设置相对较差，这种情况，称之为“高方差”。<br>假定训练集错误率是15%，验证集错误率是16%，算法并没有在训练集中得到很好的训练，这种情况称之为“高偏差”。<br>假定训练集错误率是15%，验证集错误率是30%，这种情况下，算法偏差高，方差也很高。<br>假定训练集错误率是0.5%，验证集错误率是1%，这种情况偏差和方差都很低。  </p>\n<h1 id=\"训练神经网络的基本方法\"><a href=\"#训练神经网络的基本方法\" class=\"headerlink\" title=\"训练神经网络的基本方法\"></a>训练神经网络的基本方法</h1><p>在初始模型完成后，首先检查算法的偏差情况，如果偏差高，则试着评估训练集的性能。如果偏差非常高，甚至无法拟合训练集，那将要选择一个新的网络，比如增加更多隐层、花费更多训练时间、采用更先进的优化算法等。</p>\n<p>一旦偏差降低到可接受范围，检查方差的情况，为了评估方差，需要查看验证集性能。如果方差高，最好的解决方案就是采用更多的数据，但有时无法获得更多数据时，也可以尝试正则化来减少过拟合。</p>\n<p>在机器学习初期阶段，关于所谓的偏差方差权衡的讨论屡见不鲜，因为，我们有很多方法，可以增加偏差、减少方差，也可以减少偏差、减少方差。<br>但深度学习的早期阶段，我们没有太多工具可以做到只减少偏差或只减少方差，却不影响到另外一方。<br>而现如今在深度学习和大数据时代，我们有工具可以做到在减少偏差的同时，不对另一方产生过多不良影响。<br>这就是深度学习对监督学习大有裨益的一个重要原因，也是我们不用太过于关注如何平衡偏差和方差的一个重要原因。</p>\n<p>总之，就是不断重复尝试，直到找到一个低偏差，低方差的框架，我们就会得到一个非常规范化的网络。</p>\n<h1 id=\"正则化\"><a href=\"#正则化\" class=\"headerlink\" title=\"正则化\"></a>正则化</h1><p>神经网络过度拟合数据，就会存在高方差的问题，那么最先想到的解决方法可能就是正则化。<br>另一个解决方法是准备更多的数据，这也是很可行的方法。</p>\n<h3 id=\"L2正则化\"><a href=\"#L2正则化\" class=\"headerlink\" title=\"L2正则化\"></a>L2正则化</h3><p>以Logistic回归为例，在逻辑回归函数中加入正则化，添加正则化参数\\lambda，该参数常用验证集来配置。<br>J(w,b)=\\frac{1}{m} \\sum_{i=1}^m l(\\hat{y}^{(i)},y^{(i)})+\\frac{\\lambda}{2m}||w||_2^2</p>\n<p>此方法称L2正则化，是最常见的正则化类型。因为w通常是一个高维参数矢量，已经可以表达高偏差问题，而b仅是一个实数，所以b常忽略不计。</p>\n<p>以神经网络为例，实现正则化，成本函数包含w^{[1]},b^{[1]}到w^{[L]},b^{[L]}所有参数<br>J(w^{[1]},b^{[1]}…w^{[L]},b^{[L]})<br>=\\frac{1}{m} \\sum_{i=1}^m l(\\hat{y}^{(i)},y^{(i)})        </p>\n<p>+\\frac{\\lambda}{2m} \\sum_{L=1}^L ||W^{[L]}||_F^2</p>\n<p>该矩阵范数被称为“弗罗贝尼乌斯范数”，用下标F表示，它表示一个矩阵中所有元素的平方和。</p>\n<p>在弗罗贝尼乌斯范数中，假设正则化\\lambda设置的足够大，那么权重矩阵W^{[L]}将会非常接近于0，即大大减少了隐藏单元的影响，将使神经网络变得很小，但深度很大，它会使网络从过拟合状态变为高偏差状态，但由于有\\lambda的存在，于是网络会接近于中间状态。</p>\n<h3 id=\"dropout正则化\"><a href=\"#dropout正则化\" class=\"headerlink\" title=\"dropout正则化\"></a>dropout正则化</h3><p><img src=\"/assets/images/170918_3.JPG\"><br>将神经网络复制到右侧，dropout正则化会遍历网络中每一层的每个节点，并在每一个节点上设置消除神节点的概率，假设网络中的每一节点都以抛硬币的方式设置概率，那么每一节点的被保留和被消除的概率都是0.5，设置完节点概率后，我们随机消除掉一些节点，并且删除该节点上的连线，最后我们将得到一个节点更少，规模更小的网络，之后对这个简化后的网络进行训练即可。</p>\n<p>实施dropout的结果是它会压缩权重，并完成一些预防过拟合的外层正则化。</p>\n<p>在测试阶段不适用dropout，因为在测试阶段预测时应用dropout函数，预测会受到干扰。</p>\n<h4 id=\"inverted-dropout\"><a href=\"#inverted-dropout\" class=\"headerlink\" title=\"inverted dropout\"></a>inverted dropout</h4><p>以一个三层网络为例：<br><img src=\"/assets/images/170918_4.JPG\"><br>首先定义向量d^3，表示一个三层的dropout向量，每个样本和每个隐藏单元在d^3中对应的值为1的概率都是keep-prob的值，设为0.8。<br>之后从第三层中获取激活函数a^3，等于上面的a^3乘以d^3，其为元素相乘。作用是过滤d^3中所有等于0的元素。<br>最后我们向外扩展a^3，用它除以0.8或keep-prob的值。</p>\n<p>它的功能是，不论keep-prob的值是多少，都可以确保a^3的期望值不变。</p>\n<h3 id=\"其他正则化方法\"><a href=\"#其他正则化方法\" class=\"headerlink\" title=\"其他正则化方法\"></a>其他正则化方法</h3><p>除了L2正则化、dropout正则化，还有几种方法可以减少神经网络的过拟合。</p>\n<h4 id=\"数据扩增\"><a href=\"#数据扩增\" class=\"headerlink\" title=\"数据扩增\"></a>数据扩增</h4><p>比如以图片作为训练集，通过水平翻转图片(当然也可以进行截取),以扩充训练集，使训练集可以增大一倍，因为训练集有冗余，所以效果不如额外手机一组新图片那么好，但节省了获取图片的花费。<br>以这种方式，可以扩增算法数据，进而正则化数据集，减少过拟合。</p>\n<h4 id=\"early-stoping\"><a href=\"#early-stoping\" class=\"headerlink\" title=\"early stoping\"></a>early stoping</h4><p>还有一种方法叫early stopping<br><img src=\"/assets/images/170918_5.JPG\"><br>运行梯度下降时，我们可以画出成本函数J的训练趋势，还可以绘制出验证集误差，它可以是验证集上的分类误差，如图，验证集误差通常会先呈下降趋势，然后在某个节点处开始上升。</p>\n<p>在训练初期，w值相对很小，所以在长期训练神经网络的过程中，w的值会越变越大，early stopping的作用就是在中间点停止迭代过程，我们将得到一个w值中等大小的弗罗贝尼乌斯范数。</p>\n<p>该方法的主要缺点是，在机器学习过程中，不能独立的处理优化成本函数J和正则化这两个问题。</p>\n<h1 id=\"梯度消失-梯度爆炸\"><a href=\"#梯度消失-梯度爆炸\" class=\"headerlink\" title=\"梯度消失(梯度爆炸)\"></a>梯度消失(梯度爆炸)</h1><p>在训练深度网络时，导数或坡度有时会变得非常大，或非常小，这加大了训练的难度。<br><img src=\"/assets/images/170918_6.JPG\"><br>假设正在训练这样一个极深的神经网络，为了简化，令b为0，且使用线性激活函数g(z)=z<br>那么输出\\hat{y}=w^{[L]}w^{[L-1]}w^{[L-2]}…w^{[1]}x，（w^{[1]}x=z^{[1]}=a^{[1]}）</p>\n<p>通过推理，假设每个矩阵都大于或小于1，哪怕仅大一点点，或小一点点，激活函数将以指数级增长或递减，\\hat{y}的值将会变得极大或极小，从而导致训练难度上升。<br>尤其当梯度下降步长较小时，将会花费很长时间来学习。 </p>\n<h4 id=\"权重初始化\"><a href=\"#权重初始化\" class=\"headerlink\" title=\"权重初始化\"></a>权重初始化</h4><p>针对该问题，有一不完整的解决方案，虽不能彻底解决问题，却很有用。<br>有助于我们为神经网络更谨慎的选择随机初始化参数。</p>\n<p>当只有一个神经元时，有若干输入特征向量,<br>则z为若干个w_ix_i之和，此处令b=0暂且忽略</p>\n<p>为了防止预测z值过大或过小，可以看到当n越大时，希望w_{[i]}越小，<br>最合理的方法就是设置Var(W_i)=1/n，n表示神经元的输入特征数量<br>实际上要做的就是设置某层权重矩阵W，</p>\n<p>W^{[L]}=np.random.randn(shape)*np.sqrt(\\frac{1}{n^{[L-1]}})</p>\n<p>如果使用的是Relu激活函数，而不是1/n，方差Var(W_i)设置为2/n效果更好<br>初始化时，尤其使用Relu激活函数时，它取决于你对随机变量的熟悉程度</p>\n<p>因为它给权重矩阵W设置了合理值，不能比1大很多，也不能比1小很多，所以梯度没有爆炸或消失过快，它确实降低了坡度消失和爆炸问题。</p>\n<h1 id=\"梯度检验\"><a href=\"#梯度检验\" class=\"headerlink\" title=\"梯度检验\"></a>梯度检验</h1><p>在实施backprop时，有一个测试叫做梯度检验，为了确保backprop正确实施，为了实现梯度检验，首先谈谈如何对计算梯度做数值逼近</p>\n<h3 id=\"数值逼近\"><a href=\"#数值逼近\" class=\"headerlink\" title=\"数值逼近\"></a>数值逼近</h3><p><img src=\"/assets/images/170918_7.JPG\"><br>函数标记为f(\\theta)，f=(\\theta)=\\theta ^3<br>假设\\theta=1，不增大\\theta的值，而是在\\theta右侧设置一个\\theta +\\varepsilon，在左侧设置一个\\theta -\\varepsilon，<br>如图，大三角形的高宽比值更接近于\\theta的导数，将右上角的三角形下移，这个大三角形同时考虑了这两个小三角形</p>\n<p>所以我们得到的不是一个单边公差而是一个双边公差，<br>故高宽比值为:\\frac{f(\\theta +\\varepsilon)-f(\\theta -\\varepsilon)}{2\\varepsilon}，它的期望值接近g(\\theta)</p>\n<h3 id=\"梯度检验-1\"><a href=\"#梯度检验-1\" class=\"headerlink\" title=\"梯度检验\"></a>梯度检验</h3><p>假设网络中含有W^{[1]},b^{[1]},…,W^{[L]},b^{[L]}，为了执行梯度检验，首先将所有参数转换成一个巨大的向量数据，得到巨型向量\\theta，得到成本函数J(\\theta)</p>\n<p>接着得到W和b顺序相同的dW^{[1]},db^{[1]},…,dW^{[L]},db^{[L]}数据，用他们来初始化大项量d\\theta，它与\\theta具有相同维度，经过相同的转换和连接运算操作后，可将所有导数转换成一个大向量d\\theta</p>\n<p>J是一个超级参数\\theta的函数，<br>为了实施梯度检验，需要循环执行：<br>d\\theta _{approx}^{[i]}=\\frac{J(\\theta _1,\\theta _2,…,\\theta _i+\\varepsilon,…)-J(\\theta _1,\\theta _2,…,\\theta _i-\\varepsilon,…)}{2\\varepsilon}</p>\n<p>这个值应该逼近d\\theta ^{[i]}<br>需要对每个i的每个值都执行这个运算，最后得到两个向量，<br>d\\theta和其逼近值d\\theta _{approx}，它与d\\theta维度相同<br>需要验证的就是这些向量是否彼此接近</p>\n<p>判断向量是否接近时，通常：<br>计算两个向量的距离，|| d\\theta _{approx}-d\\theta || _2，  </p>\n<p>之后用向量长度做归一化<br>分母只是预防向量太大或太小，使这个方程变成比率</p>\n<p>如果计算方程得到的值为10^{-7}或更小，则意味着导数逼近很可能是正确的。<br>如果值在10^{-5}范围内，就需要注意是否某个值过大。<br>如果值在10^{-3}范围内，就需要注意是否存在bug。</p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><p>首先，不要在训练中使用梯度检验，它只是用于调试<br>第二，如果算法的梯度检验失败，要检查所有项，试着找出bug<br>第三，在实施梯度检验时，如果使用正则化，请注意正则化<br>第四，梯度检验不能与dropout同时使用<br>第五，在随机初始化过程中，先运行梯度检验，然后再训练网络</p>"},{"layout":"post","title":"笔记-吴恩达deeplearning之二","comments":1,"date":"2017-09-13T12:29:10.000Z","_content":"这门课讲的真清楚，轻轻松松就听得懂，  \n但用markdown输数学公式，真是好麻烦呀。\n<!--more-->\n# 神经网络的表示\n\n首先看看这个只有一个隐含层的神经网络。\n![](/assets/images/170913_1.JPG)\n如图，输入特征x1,x2,x3竖向堆叠起来，这是神经网络的输入层，包含神经网络的输入。另一层的圆圈，称之为隐含层。最后一层只有一个节点，这个只带一个节点的层叫输出层，负责输出预测值\\hat{y}。\n\n当使用神经网络时，训练集包含了输入x，还有目标输出y，隐含层的含义是，在训练集中，这些中间节点的真正数值不得而知。\n\n通常用x来表示输入层，也可用a^{[0]}表示，[]代表层数，a表示激活，意味着网络中不同的值会传递给下一层，下一层隐藏层记为a^{[1]}，并将第一个节点表示为a^{[1]}_1，第二个节点表示为a^{[1]}_2，并依此类推。故这里a^{[1]}是一个四维向量，最后输出层会产生数值a^{[2]}的实数，即\\hat{y}。\n\n这个例子，即所谓的双层神经网络。当计算神经网络层数时不算入输入层，以隐藏层为第一层，输出层为第二层。在符号约定中，将输入层称为第零层。最后，隐藏层和输出层是带有参数的。\n\n# 神经网络如何输出\n![](/assets/images/170913_2.JPG)\n例如之前的Logistic回归，圆圈代表回归计算的两个步骤，首先计算出z，然后计算激活函数，也就是sigmoid(z)函数，所以神经网络只不过多次重复计算这些步骤。\n![](/assets/images/170913_3.JPG)\n如图神经网络中有四个隐层单元，将其对等式进行整理，得四组等式。\n可将其构成矩阵形式，并将w^T的堆叠称之为W，b的堆叠称之为b。\n![](/assets/images/170913_4.JPG)\n可得出z^{[1]}=W^{[1]}x+b^{[1]}，a^{[1]}=\\sigma (z^{[1]})\n\n故当你有个单隐层网络，需要计算四个等式：\nz^{[1]}=W^{[1]}x+b^{[1]}\na^{[1]}=\\sigma (z^{[1]})\nz^{[2]}=W^{[2]}a^{[1]}+b^{[2]}\na^{[2]}=\\sigma (z^{[2]})\n\n要搭建一个神经网络，你可以自己选择隐层里的激活函数，以及神经网络输出单元用什么激活函数，目前为止，我们一直采用\\sigma激活函数，或许有时其它函数效果会更好。\n\n当然最好选择非线性的激活函数，因为如果用线性激活函数，那么神经网络只是把输入线性组合再输出一次，除非你引入非线性激活函数。\n\n# 神经网络的梯度下降法\n### 参数：\n对于单隐层神经网络，我们有维度是(n^{[1]},n^{[0]})的W^{[1]}，(n^{[1]},1)维向量的b^{[1]}，(n^{[2]},n^{[2]})维向量的W^{[2]}，(n^{[2]},1)维向量的b^{[2]}，以及n^{[0]}的多输入特征,n^{[1]}个隐藏单元，n^{[2]}个输出单元。\n### 成本公式：\nJ(W^{[1]},b^{[1]},W^{[2]},b^{[2]})=\\frac{1}{m} \\sum_{i=1}^{m} l(\\hat{y},y)\n### 梯度下降(重复过程):\n计算\\hat{y}^{(i)}，i=1……m\ndW^{[1]}=\\frac{\\partial J}{\\partial W^{[1]}}，db^{[1]}=\\frac{\\partial J}{\\partial b^{[1]}}，……\nW^{[1]} := W^{[1]}-\\alpha dW^{[1]}\nb^{[1]} := b^{[1]}-\\alpha db^{[1]}\nW^{[2]} := W^{[2]}-\\alpha dW^{[2]}\nb^{[2]} := b^{[2]}-\\alpha db^{[2]}\n\n*强调，在训练神经网络时，随机初始化权重w非常重要，若将初始权重设为相等的数，梯度下降算法将完全无效。因为隐含单元将完全一样，意味着节点计算完全一样的函数，即不管梯度下降迭代多少次，将完全没有用处。*\n\n# 神经网络的传播\n\n深度神经网络每一层都有前向传播以及一个相对的反向传播步骤。\n### 前向传播\n输入a^{[l-1]}\n输出a^{[l]}，缓存z^{[l]}，包括w^{[l]},b^{[l]}\nz^{[l]}=w^{[l]}a^{[l-1]}+b^{[l]}\na^{[l]}=g^{[l]} (z^{[l]})\n\n### 反向传播\n输入da^{[l]}\n输出da^{[l-1]},dW^{[L]},db^{[l]}\ndz^{[l]}=da^{[l]}*g^{[l],}(z^[l])\ndw^{[l]}=dz^{[l]}a^{[l-1]}\ndb^{[l]}=dz^{[l]}\nda^{[l-1]}=w^{[l]T}dz^{[l]}\n\n整个传播过程如图所示：\n![](/assets/images/170913_5.JPG)\n前向传播时我们用输入数据x来初始化，反向传播时，若用Logistic回归时，则采用图中da^{[l]}这个公式，由相对于\\hat{y}的损失函数的导数求得。\n","source":"_posts/笔记-吴恩达deeplearning之二.md","raw":"---\nlayout: post\ntitle: 笔记-吴恩达deeplearning之二\ncomments: true\ndate: 2017-09-13 20:29:10\ntags:\n- 深度学习\n---\n这门课讲的真清楚，轻轻松松就听得懂，  \n但用markdown输数学公式，真是好麻烦呀。\n<!--more-->\n# 神经网络的表示\n\n首先看看这个只有一个隐含层的神经网络。\n![](/assets/images/170913_1.JPG)\n如图，输入特征x1,x2,x3竖向堆叠起来，这是神经网络的输入层，包含神经网络的输入。另一层的圆圈，称之为隐含层。最后一层只有一个节点，这个只带一个节点的层叫输出层，负责输出预测值\\hat{y}。\n\n当使用神经网络时，训练集包含了输入x，还有目标输出y，隐含层的含义是，在训练集中，这些中间节点的真正数值不得而知。\n\n通常用x来表示输入层，也可用a^{[0]}表示，[]代表层数，a表示激活，意味着网络中不同的值会传递给下一层，下一层隐藏层记为a^{[1]}，并将第一个节点表示为a^{[1]}_1，第二个节点表示为a^{[1]}_2，并依此类推。故这里a^{[1]}是一个四维向量，最后输出层会产生数值a^{[2]}的实数，即\\hat{y}。\n\n这个例子，即所谓的双层神经网络。当计算神经网络层数时不算入输入层，以隐藏层为第一层，输出层为第二层。在符号约定中，将输入层称为第零层。最后，隐藏层和输出层是带有参数的。\n\n# 神经网络如何输出\n![](/assets/images/170913_2.JPG)\n例如之前的Logistic回归，圆圈代表回归计算的两个步骤，首先计算出z，然后计算激活函数，也就是sigmoid(z)函数，所以神经网络只不过多次重复计算这些步骤。\n![](/assets/images/170913_3.JPG)\n如图神经网络中有四个隐层单元，将其对等式进行整理，得四组等式。\n可将其构成矩阵形式，并将w^T的堆叠称之为W，b的堆叠称之为b。\n![](/assets/images/170913_4.JPG)\n可得出z^{[1]}=W^{[1]}x+b^{[1]}，a^{[1]}=\\sigma (z^{[1]})\n\n故当你有个单隐层网络，需要计算四个等式：\nz^{[1]}=W^{[1]}x+b^{[1]}\na^{[1]}=\\sigma (z^{[1]})\nz^{[2]}=W^{[2]}a^{[1]}+b^{[2]}\na^{[2]}=\\sigma (z^{[2]})\n\n要搭建一个神经网络，你可以自己选择隐层里的激活函数，以及神经网络输出单元用什么激活函数，目前为止，我们一直采用\\sigma激活函数，或许有时其它函数效果会更好。\n\n当然最好选择非线性的激活函数，因为如果用线性激活函数，那么神经网络只是把输入线性组合再输出一次，除非你引入非线性激活函数。\n\n# 神经网络的梯度下降法\n### 参数：\n对于单隐层神经网络，我们有维度是(n^{[1]},n^{[0]})的W^{[1]}，(n^{[1]},1)维向量的b^{[1]}，(n^{[2]},n^{[2]})维向量的W^{[2]}，(n^{[2]},1)维向量的b^{[2]}，以及n^{[0]}的多输入特征,n^{[1]}个隐藏单元，n^{[2]}个输出单元。\n### 成本公式：\nJ(W^{[1]},b^{[1]},W^{[2]},b^{[2]})=\\frac{1}{m} \\sum_{i=1}^{m} l(\\hat{y},y)\n### 梯度下降(重复过程):\n计算\\hat{y}^{(i)}，i=1……m\ndW^{[1]}=\\frac{\\partial J}{\\partial W^{[1]}}，db^{[1]}=\\frac{\\partial J}{\\partial b^{[1]}}，……\nW^{[1]} := W^{[1]}-\\alpha dW^{[1]}\nb^{[1]} := b^{[1]}-\\alpha db^{[1]}\nW^{[2]} := W^{[2]}-\\alpha dW^{[2]}\nb^{[2]} := b^{[2]}-\\alpha db^{[2]}\n\n*强调，在训练神经网络时，随机初始化权重w非常重要，若将初始权重设为相等的数，梯度下降算法将完全无效。因为隐含单元将完全一样，意味着节点计算完全一样的函数，即不管梯度下降迭代多少次，将完全没有用处。*\n\n# 神经网络的传播\n\n深度神经网络每一层都有前向传播以及一个相对的反向传播步骤。\n### 前向传播\n输入a^{[l-1]}\n输出a^{[l]}，缓存z^{[l]}，包括w^{[l]},b^{[l]}\nz^{[l]}=w^{[l]}a^{[l-1]}+b^{[l]}\na^{[l]}=g^{[l]} (z^{[l]})\n\n### 反向传播\n输入da^{[l]}\n输出da^{[l-1]},dW^{[L]},db^{[l]}\ndz^{[l]}=da^{[l]}*g^{[l],}(z^[l])\ndw^{[l]}=dz^{[l]}a^{[l-1]}\ndb^{[l]}=dz^{[l]}\nda^{[l-1]}=w^{[l]T}dz^{[l]}\n\n整个传播过程如图所示：\n![](/assets/images/170913_5.JPG)\n前向传播时我们用输入数据x来初始化，反向传播时，若用Logistic回归时，则采用图中da^{[l]}这个公式，由相对于\\hat{y}的损失函数的导数求得。\n","slug":"笔记-吴恩达deeplearning之二","published":1,"updated":"2021-11-28T14:48:57.930Z","photos":[],"link":"","_id":"cl4kyqfv8000z20r55b0p9y5d","content":"<p>这门课讲的真清楚，轻轻松松就听得懂，<br>但用markdown输数学公式，真是好麻烦呀。</p>\n<span id=\"more\"></span>\n<h1 id=\"神经网络的表示\"><a href=\"#神经网络的表示\" class=\"headerlink\" title=\"神经网络的表示\"></a>神经网络的表示</h1><p>首先看看这个只有一个隐含层的神经网络。<br><img src=\"/assets/images/170913_1.JPG\"><br>如图，输入特征x1,x2,x3竖向堆叠起来，这是神经网络的输入层，包含神经网络的输入。另一层的圆圈，称之为隐含层。最后一层只有一个节点，这个只带一个节点的层叫输出层，负责输出预测值\\hat{y}。</p>\n<p>当使用神经网络时，训练集包含了输入x，还有目标输出y，隐含层的含义是，在训练集中，这些中间节点的真正数值不得而知。</p>\n<p>通常用x来表示输入层，也可用a^{[0]}表示，[]代表层数，a表示激活，意味着网络中不同的值会传递给下一层，下一层隐藏层记为a^{[1]}，并将第一个节点表示为a^{[1]}_1，第二个节点表示为a^{[1]}_2，并依此类推。故这里a^{[1]}是一个四维向量，最后输出层会产生数值a^{[2]}的实数，即\\hat{y}。</p>\n<p>这个例子，即所谓的双层神经网络。当计算神经网络层数时不算入输入层，以隐藏层为第一层，输出层为第二层。在符号约定中，将输入层称为第零层。最后，隐藏层和输出层是带有参数的。</p>\n<h1 id=\"神经网络如何输出\"><a href=\"#神经网络如何输出\" class=\"headerlink\" title=\"神经网络如何输出\"></a>神经网络如何输出</h1><p><img src=\"/assets/images/170913_2.JPG\"><br>例如之前的Logistic回归，圆圈代表回归计算的两个步骤，首先计算出z，然后计算激活函数，也就是sigmoid(z)函数，所以神经网络只不过多次重复计算这些步骤。<br><img src=\"/assets/images/170913_3.JPG\"><br>如图神经网络中有四个隐层单元，将其对等式进行整理，得四组等式。<br>可将其构成矩阵形式，并将w^T的堆叠称之为W，b的堆叠称之为b。<br><img src=\"/assets/images/170913_4.JPG\"><br>可得出z^{[1]}=W^{[1]}x+b^{[1]}，a^{[1]}=\\sigma (z^{[1]})</p>\n<p>故当你有个单隐层网络，需要计算四个等式：<br>z^{[1]}=W^{[1]}x+b^{[1]}<br>a^{[1]}=\\sigma (z^{[1]})<br>z^{[2]}=W^{[2]}a^{[1]}+b^{[2]}<br>a^{[2]}=\\sigma (z^{[2]})</p>\n<p>要搭建一个神经网络，你可以自己选择隐层里的激活函数，以及神经网络输出单元用什么激活函数，目前为止，我们一直采用\\sigma激活函数，或许有时其它函数效果会更好。</p>\n<p>当然最好选择非线性的激活函数，因为如果用线性激活函数，那么神经网络只是把输入线性组合再输出一次，除非你引入非线性激活函数。</p>\n<h1 id=\"神经网络的梯度下降法\"><a href=\"#神经网络的梯度下降法\" class=\"headerlink\" title=\"神经网络的梯度下降法\"></a>神经网络的梯度下降法</h1><h3 id=\"参数：\"><a href=\"#参数：\" class=\"headerlink\" title=\"参数：\"></a>参数：</h3><p>对于单隐层神经网络，我们有维度是(n^{[1]},n^{[0]})的W^{[1]}，(n^{[1]},1)维向量的b^{[1]}，(n^{[2]},n^{[2]})维向量的W^{[2]}，(n^{[2]},1)维向量的b^{[2]}，以及n^{[0]}的多输入特征,n^{[1]}个隐藏单元，n^{[2]}个输出单元。</p>\n<h3 id=\"成本公式：\"><a href=\"#成本公式：\" class=\"headerlink\" title=\"成本公式：\"></a>成本公式：</h3><p>J(W^{[1]},b^{[1]},W^{[2]},b^{[2]})=\\frac{1}{m} \\sum_{i=1}^{m} l(\\hat{y},y)</p>\n<h3 id=\"梯度下降-重复过程\"><a href=\"#梯度下降-重复过程\" class=\"headerlink\" title=\"梯度下降(重复过程):\"></a>梯度下降(重复过程):</h3><p>计算\\hat{y}^{(i)}，i=1……m<br>dW^{[1]}=\\frac{\\partial J}{\\partial W^{[1]}}，db^{[1]}=\\frac{\\partial J}{\\partial b^{[1]}}，……<br>W^{[1]} := W^{[1]}-\\alpha dW^{[1]}<br>b^{[1]} := b^{[1]}-\\alpha db^{[1]}<br>W^{[2]} := W^{[2]}-\\alpha dW^{[2]}<br>b^{[2]} := b^{[2]}-\\alpha db^{[2]}</p>\n<p><em>强调，在训练神经网络时，随机初始化权重w非常重要，若将初始权重设为相等的数，梯度下降算法将完全无效。因为隐含单元将完全一样，意味着节点计算完全一样的函数，即不管梯度下降迭代多少次，将完全没有用处。</em></p>\n<h1 id=\"神经网络的传播\"><a href=\"#神经网络的传播\" class=\"headerlink\" title=\"神经网络的传播\"></a>神经网络的传播</h1><p>深度神经网络每一层都有前向传播以及一个相对的反向传播步骤。</p>\n<h3 id=\"前向传播\"><a href=\"#前向传播\" class=\"headerlink\" title=\"前向传播\"></a>前向传播</h3><p>输入a^{[l-1]}<br>输出a^{[l]}，缓存z^{[l]}，包括w^{[l]},b^{[l]}<br>z^{[l]}=w^{[l]}a^{[l-1]}+b^{[l]}<br>a^{[l]}=g^{[l]} (z^{[l]})</p>\n<h3 id=\"反向传播\"><a href=\"#反向传播\" class=\"headerlink\" title=\"反向传播\"></a>反向传播</h3><p>输入da^{[l]}<br>输出da^{[l-1]},dW^{[L]},db^{[l]}<br>dz^{[l]}=da^{[l]}*g^{[l],}(z^[l])<br>dw^{[l]}=dz^{[l]}a^{[l-1]}<br>db^{[l]}=dz^{[l]}<br>da^{[l-1]}=w^{[l]T}dz^{[l]}</p>\n<p>整个传播过程如图所示：<br><img src=\"/assets/images/170913_5.JPG\"><br>前向传播时我们用输入数据x来初始化，反向传播时，若用Logistic回归时，则采用图中da^{[l]}这个公式，由相对于\\hat{y}的损失函数的导数求得。</p>\n","site":{"data":{}},"excerpt":"<p>这门课讲的真清楚，轻轻松松就听得懂，<br>但用markdown输数学公式，真是好麻烦呀。</p>","more":"<h1 id=\"神经网络的表示\"><a href=\"#神经网络的表示\" class=\"headerlink\" title=\"神经网络的表示\"></a>神经网络的表示</h1><p>首先看看这个只有一个隐含层的神经网络。<br><img src=\"/assets/images/170913_1.JPG\"><br>如图，输入特征x1,x2,x3竖向堆叠起来，这是神经网络的输入层，包含神经网络的输入。另一层的圆圈，称之为隐含层。最后一层只有一个节点，这个只带一个节点的层叫输出层，负责输出预测值\\hat{y}。</p>\n<p>当使用神经网络时，训练集包含了输入x，还有目标输出y，隐含层的含义是，在训练集中，这些中间节点的真正数值不得而知。</p>\n<p>通常用x来表示输入层，也可用a^{[0]}表示，[]代表层数，a表示激活，意味着网络中不同的值会传递给下一层，下一层隐藏层记为a^{[1]}，并将第一个节点表示为a^{[1]}_1，第二个节点表示为a^{[1]}_2，并依此类推。故这里a^{[1]}是一个四维向量，最后输出层会产生数值a^{[2]}的实数，即\\hat{y}。</p>\n<p>这个例子，即所谓的双层神经网络。当计算神经网络层数时不算入输入层，以隐藏层为第一层，输出层为第二层。在符号约定中，将输入层称为第零层。最后，隐藏层和输出层是带有参数的。</p>\n<h1 id=\"神经网络如何输出\"><a href=\"#神经网络如何输出\" class=\"headerlink\" title=\"神经网络如何输出\"></a>神经网络如何输出</h1><p><img src=\"/assets/images/170913_2.JPG\"><br>例如之前的Logistic回归，圆圈代表回归计算的两个步骤，首先计算出z，然后计算激活函数，也就是sigmoid(z)函数，所以神经网络只不过多次重复计算这些步骤。<br><img src=\"/assets/images/170913_3.JPG\"><br>如图神经网络中有四个隐层单元，将其对等式进行整理，得四组等式。<br>可将其构成矩阵形式，并将w^T的堆叠称之为W，b的堆叠称之为b。<br><img src=\"/assets/images/170913_4.JPG\"><br>可得出z^{[1]}=W^{[1]}x+b^{[1]}，a^{[1]}=\\sigma (z^{[1]})</p>\n<p>故当你有个单隐层网络，需要计算四个等式：<br>z^{[1]}=W^{[1]}x+b^{[1]}<br>a^{[1]}=\\sigma (z^{[1]})<br>z^{[2]}=W^{[2]}a^{[1]}+b^{[2]}<br>a^{[2]}=\\sigma (z^{[2]})</p>\n<p>要搭建一个神经网络，你可以自己选择隐层里的激活函数，以及神经网络输出单元用什么激活函数，目前为止，我们一直采用\\sigma激活函数，或许有时其它函数效果会更好。</p>\n<p>当然最好选择非线性的激活函数，因为如果用线性激活函数，那么神经网络只是把输入线性组合再输出一次，除非你引入非线性激活函数。</p>\n<h1 id=\"神经网络的梯度下降法\"><a href=\"#神经网络的梯度下降法\" class=\"headerlink\" title=\"神经网络的梯度下降法\"></a>神经网络的梯度下降法</h1><h3 id=\"参数：\"><a href=\"#参数：\" class=\"headerlink\" title=\"参数：\"></a>参数：</h3><p>对于单隐层神经网络，我们有维度是(n^{[1]},n^{[0]})的W^{[1]}，(n^{[1]},1)维向量的b^{[1]}，(n^{[2]},n^{[2]})维向量的W^{[2]}，(n^{[2]},1)维向量的b^{[2]}，以及n^{[0]}的多输入特征,n^{[1]}个隐藏单元，n^{[2]}个输出单元。</p>\n<h3 id=\"成本公式：\"><a href=\"#成本公式：\" class=\"headerlink\" title=\"成本公式：\"></a>成本公式：</h3><p>J(W^{[1]},b^{[1]},W^{[2]},b^{[2]})=\\frac{1}{m} \\sum_{i=1}^{m} l(\\hat{y},y)</p>\n<h3 id=\"梯度下降-重复过程\"><a href=\"#梯度下降-重复过程\" class=\"headerlink\" title=\"梯度下降(重复过程):\"></a>梯度下降(重复过程):</h3><p>计算\\hat{y}^{(i)}，i=1……m<br>dW^{[1]}=\\frac{\\partial J}{\\partial W^{[1]}}，db^{[1]}=\\frac{\\partial J}{\\partial b^{[1]}}，……<br>W^{[1]} := W^{[1]}-\\alpha dW^{[1]}<br>b^{[1]} := b^{[1]}-\\alpha db^{[1]}<br>W^{[2]} := W^{[2]}-\\alpha dW^{[2]}<br>b^{[2]} := b^{[2]}-\\alpha db^{[2]}</p>\n<p><em>强调，在训练神经网络时，随机初始化权重w非常重要，若将初始权重设为相等的数，梯度下降算法将完全无效。因为隐含单元将完全一样，意味着节点计算完全一样的函数，即不管梯度下降迭代多少次，将完全没有用处。</em></p>\n<h1 id=\"神经网络的传播\"><a href=\"#神经网络的传播\" class=\"headerlink\" title=\"神经网络的传播\"></a>神经网络的传播</h1><p>深度神经网络每一层都有前向传播以及一个相对的反向传播步骤。</p>\n<h3 id=\"前向传播\"><a href=\"#前向传播\" class=\"headerlink\" title=\"前向传播\"></a>前向传播</h3><p>输入a^{[l-1]}<br>输出a^{[l]}，缓存z^{[l]}，包括w^{[l]},b^{[l]}<br>z^{[l]}=w^{[l]}a^{[l-1]}+b^{[l]}<br>a^{[l]}=g^{[l]} (z^{[l]})</p>\n<h3 id=\"反向传播\"><a href=\"#反向传播\" class=\"headerlink\" title=\"反向传播\"></a>反向传播</h3><p>输入da^{[l]}<br>输出da^{[l-1]},dW^{[L]},db^{[l]}<br>dz^{[l]}=da^{[l]}*g^{[l],}(z^[l])<br>dw^{[l]}=dz^{[l]}a^{[l-1]}<br>db^{[l]}=dz^{[l]}<br>da^{[l-1]}=w^{[l]T}dz^{[l]}</p>\n<p>整个传播过程如图所示：<br><img src=\"/assets/images/170913_5.JPG\"><br>前向传播时我们用输入数据x来初始化，反向传播时，若用Logistic回归时，则采用图中da^{[l]}这个公式，由相对于\\hat{y}的损失函数的导数求得。</p>"},{"layout":"post","title":"笔记-吴恩达deeplearning之五","comments":1,"date":"2017-09-21T12:13:03.000Z","_content":"神经网络的改变会涉及到许多不同的超参数设置，\n对于超参数而言，系统地组织调试过程，\n能更加方便有效的找到合适的超参数设定值。\n<!--more-->\n# 超参数的选取\n关于训练深度最难的事情之一，是需要处理的参数的数量，\n学习速率是需要调试的参数中最重要的参数，\n还有一些参数，如Momentum参数、mini batch大小、隐藏单元，重要程度次一级，\n其他因素的重要性排第三，如层数、学习衰减率等\n![](/assets/images/170921_1.JPG)\n在早一代的机器学习算法中，比如你有两个超参数，\n常见的做法是在网格中取样点，然后系统的研究这些数值，\n尝试过所有的参数后，选择出效果最好的一组参数。\n\n在深度学习领用，我们常做的是随机选择点，\n接着用这些随机选取的点试验超参数的效果，\n之所以这么做，是因为很难提前预测哪个超参数更适合。\n\n选择超参数时，另一个惯例是采用由粗糙到精细的策略，\n先在大范围内进行取值，选择出大范围内最好的点，\n或许该点周围还有效果更好的点，接下来，选中这块区域，\n然后在其中更密集地取值或随机取值，通常更为有效。\n\n关于搜索超参数的过程，大致有两种思想流派：\n\n一种是时常照看一个模型，通常是有庞大的数据组，\n但没有许多计算资源或足够的CPU和GPU的前提下，\n即当它在试验时，你也可以定期逐渐改良超参数的设定，\n直至达到想要的结果。\n\n另一种是同时试验多种不同超参数设定的模型，\n前提是拥有足够计算资源或CPU和GPU，\n然后在训练结束，快速选择出工作效果最好的那个。\n\n这两种方式的选择，主要取决于拥有的计算资源。\n\n# Batch归一化\n\n在深度学习兴起后，最重要的一个思想是它的一种算法，\n叫Batch归一化，它会使你的参数搜索问题变得很容易。\n使神经网络对超参数的选择更加稳定，范围更庞大，工作效果也很好。\n\n当训练一个模型，比如Logistic回归时，归一化输入特征(输入样本减去平均数后再除以方差)可以加速学习过程，更易于算法优化。\n\n那么对于更深的模型，没有输入特征值x，但有激活值a^{[L]}时，\n如果想训练这些参数，比如w^{3},b^{3}，那归一化a^{[2]}的平均值和方差，\n以便使w^{3},b^{3}的训练更有意义。\n\n简单来说Batch归一化的作用就是，对于任何一个隐藏层而言，归一化a的值，能够以更快的速度来训练下一层的参数。\n严格的来说，我们真正归一化的不是a，而是z。\n\n### Batch归一化的使用\n在神经网络中，已知一些中间值，假设有一些隐藏单元值，从z^{(1)}到z^{(m)}，\n如下，首先计算平均值，接着计算方差，然后规范化z^{(i)}，\n![](/assets/images/170921_2.JPG)\n现在我们已经将这些z值标准化，使其含平均值0和标准单位方差，\n所以z的每一个分量都含有平均值0和方差1，\n或许我们需要隐藏单元有不同的分布，所以还需计算，\n![](/assets/images/170921_3.JPG)\n通过对\\gamma ,\\beta的合理设置，可以构造含其他平均值和方差的隐藏单元值。\n\nBatch归一化的作用不止适用于输入层，同样适用于神经网络中的深度隐藏层。\n\n假设有如上神经网络，每个节点进行两步计算，\n如果没有进行Batch归一化，z将直接输入激活函数得到a，\n否则，Batch归一化发生在z和a之间，\n\n接下来可以任意选择需要的的优化算法。\n\n使用中Batch归一化通常和训练集的mini-batch一起使用\n\n用第一个mini-batch上计算出z^{[1]}，\n接着Batch归一化，然后再正想传播求得z^{[2]}，\n反向传播后，用梯度下降法更新参数，\n这些都第一个mini-batch上进行的一步梯度下降法，\n\n之后在第二个mini-batch上计算出z^{[1]}，\n然后在此步中使数据Batch归一化，\n如上依此类推，\n也可尝试其他算法来对参数进行更新。\n\n# Softmax回归\n\n该回归能够对多个分类进行预测，而不是之前的两个分类，\n关于Softmax激活函数，对于Softmax层而言，\n\n首先计算一个临时变量t，t=e^{z^{[L]}}，就是对所有元素求幂，\n接着对t归一化，求得a^{[L]}=\\frac{e^{z^{[L]}}}{\\sum_{j=1}^{n} t_i}\n即a^{[L]}可以表示样本属于各分类的可能性\n\n整个计算过程，从计算幂，到得出临时变量t，再归一化，\n将此概括为一个Softmax激活函数。\n\n![](/assets/images/170921_4.JPG)\n例如一个神经网络输出层计算出z，有四个分类，即z为4*1维向量，\n计算临时变量t，对元素进行幂运算。\n最后，令输出层激活函数为Softmax激活函数，输出g，且总和为1。\n\n对于四分类问题，损失函数一般如下，\nl(\\hat{y},y)=- \\sum_{j=1}^{4} j_ilog\\hat{y}_j\n\n# TensorFlow\n\n假设你有一个损失函数J需要最小话，J(w)=w^2-20w+25\n使用TensorFlow将其最小化\n![](/assets/images/170921_5.JPG)","source":"_posts/笔记-吴恩达deeplearning之五.md","raw":"---\nlayout: post\ntitle: 笔记-吴恩达deeplearning之五\ncomments: true\ndate: 2017-09-21 20:13:03\ntags:\n- 深度学习\n---\n神经网络的改变会涉及到许多不同的超参数设置，\n对于超参数而言，系统地组织调试过程，\n能更加方便有效的找到合适的超参数设定值。\n<!--more-->\n# 超参数的选取\n关于训练深度最难的事情之一，是需要处理的参数的数量，\n学习速率是需要调试的参数中最重要的参数，\n还有一些参数，如Momentum参数、mini batch大小、隐藏单元，重要程度次一级，\n其他因素的重要性排第三，如层数、学习衰减率等\n![](/assets/images/170921_1.JPG)\n在早一代的机器学习算法中，比如你有两个超参数，\n常见的做法是在网格中取样点，然后系统的研究这些数值，\n尝试过所有的参数后，选择出效果最好的一组参数。\n\n在深度学习领用，我们常做的是随机选择点，\n接着用这些随机选取的点试验超参数的效果，\n之所以这么做，是因为很难提前预测哪个超参数更适合。\n\n选择超参数时，另一个惯例是采用由粗糙到精细的策略，\n先在大范围内进行取值，选择出大范围内最好的点，\n或许该点周围还有效果更好的点，接下来，选中这块区域，\n然后在其中更密集地取值或随机取值，通常更为有效。\n\n关于搜索超参数的过程，大致有两种思想流派：\n\n一种是时常照看一个模型，通常是有庞大的数据组，\n但没有许多计算资源或足够的CPU和GPU的前提下，\n即当它在试验时，你也可以定期逐渐改良超参数的设定，\n直至达到想要的结果。\n\n另一种是同时试验多种不同超参数设定的模型，\n前提是拥有足够计算资源或CPU和GPU，\n然后在训练结束，快速选择出工作效果最好的那个。\n\n这两种方式的选择，主要取决于拥有的计算资源。\n\n# Batch归一化\n\n在深度学习兴起后，最重要的一个思想是它的一种算法，\n叫Batch归一化，它会使你的参数搜索问题变得很容易。\n使神经网络对超参数的选择更加稳定，范围更庞大，工作效果也很好。\n\n当训练一个模型，比如Logistic回归时，归一化输入特征(输入样本减去平均数后再除以方差)可以加速学习过程，更易于算法优化。\n\n那么对于更深的模型，没有输入特征值x，但有激活值a^{[L]}时，\n如果想训练这些参数，比如w^{3},b^{3}，那归一化a^{[2]}的平均值和方差，\n以便使w^{3},b^{3}的训练更有意义。\n\n简单来说Batch归一化的作用就是，对于任何一个隐藏层而言，归一化a的值，能够以更快的速度来训练下一层的参数。\n严格的来说，我们真正归一化的不是a，而是z。\n\n### Batch归一化的使用\n在神经网络中，已知一些中间值，假设有一些隐藏单元值，从z^{(1)}到z^{(m)}，\n如下，首先计算平均值，接着计算方差，然后规范化z^{(i)}，\n![](/assets/images/170921_2.JPG)\n现在我们已经将这些z值标准化，使其含平均值0和标准单位方差，\n所以z的每一个分量都含有平均值0和方差1，\n或许我们需要隐藏单元有不同的分布，所以还需计算，\n![](/assets/images/170921_3.JPG)\n通过对\\gamma ,\\beta的合理设置，可以构造含其他平均值和方差的隐藏单元值。\n\nBatch归一化的作用不止适用于输入层，同样适用于神经网络中的深度隐藏层。\n\n假设有如上神经网络，每个节点进行两步计算，\n如果没有进行Batch归一化，z将直接输入激活函数得到a，\n否则，Batch归一化发生在z和a之间，\n\n接下来可以任意选择需要的的优化算法。\n\n使用中Batch归一化通常和训练集的mini-batch一起使用\n\n用第一个mini-batch上计算出z^{[1]}，\n接着Batch归一化，然后再正想传播求得z^{[2]}，\n反向传播后，用梯度下降法更新参数，\n这些都第一个mini-batch上进行的一步梯度下降法，\n\n之后在第二个mini-batch上计算出z^{[1]}，\n然后在此步中使数据Batch归一化，\n如上依此类推，\n也可尝试其他算法来对参数进行更新。\n\n# Softmax回归\n\n该回归能够对多个分类进行预测，而不是之前的两个分类，\n关于Softmax激活函数，对于Softmax层而言，\n\n首先计算一个临时变量t，t=e^{z^{[L]}}，就是对所有元素求幂，\n接着对t归一化，求得a^{[L]}=\\frac{e^{z^{[L]}}}{\\sum_{j=1}^{n} t_i}\n即a^{[L]}可以表示样本属于各分类的可能性\n\n整个计算过程，从计算幂，到得出临时变量t，再归一化，\n将此概括为一个Softmax激活函数。\n\n![](/assets/images/170921_4.JPG)\n例如一个神经网络输出层计算出z，有四个分类，即z为4*1维向量，\n计算临时变量t，对元素进行幂运算。\n最后，令输出层激活函数为Softmax激活函数，输出g，且总和为1。\n\n对于四分类问题，损失函数一般如下，\nl(\\hat{y},y)=- \\sum_{j=1}^{4} j_ilog\\hat{y}_j\n\n# TensorFlow\n\n假设你有一个损失函数J需要最小话，J(w)=w^2-20w+25\n使用TensorFlow将其最小化\n![](/assets/images/170921_5.JPG)","slug":"笔记-吴恩达deeplearning之五","published":1,"updated":"2021-11-28T14:49:15.297Z","photos":[],"link":"","_id":"cl4kyqfvd001120r57joh2z6x","content":"<p>神经网络的改变会涉及到许多不同的超参数设置，<br>对于超参数而言，系统地组织调试过程，<br>能更加方便有效的找到合适的超参数设定值。</p>\n<span id=\"more\"></span>\n<h1 id=\"超参数的选取\"><a href=\"#超参数的选取\" class=\"headerlink\" title=\"超参数的选取\"></a>超参数的选取</h1><p>关于训练深度最难的事情之一，是需要处理的参数的数量，<br>学习速率是需要调试的参数中最重要的参数，<br>还有一些参数，如Momentum参数、mini batch大小、隐藏单元，重要程度次一级，<br>其他因素的重要性排第三，如层数、学习衰减率等<br><img src=\"/assets/images/170921_1.JPG\"><br>在早一代的机器学习算法中，比如你有两个超参数，<br>常见的做法是在网格中取样点，然后系统的研究这些数值，<br>尝试过所有的参数后，选择出效果最好的一组参数。</p>\n<p>在深度学习领用，我们常做的是随机选择点，<br>接着用这些随机选取的点试验超参数的效果，<br>之所以这么做，是因为很难提前预测哪个超参数更适合。</p>\n<p>选择超参数时，另一个惯例是采用由粗糙到精细的策略，<br>先在大范围内进行取值，选择出大范围内最好的点，<br>或许该点周围还有效果更好的点，接下来，选中这块区域，<br>然后在其中更密集地取值或随机取值，通常更为有效。</p>\n<p>关于搜索超参数的过程，大致有两种思想流派：</p>\n<p>一种是时常照看一个模型，通常是有庞大的数据组，<br>但没有许多计算资源或足够的CPU和GPU的前提下，<br>即当它在试验时，你也可以定期逐渐改良超参数的设定，<br>直至达到想要的结果。</p>\n<p>另一种是同时试验多种不同超参数设定的模型，<br>前提是拥有足够计算资源或CPU和GPU，<br>然后在训练结束，快速选择出工作效果最好的那个。</p>\n<p>这两种方式的选择，主要取决于拥有的计算资源。</p>\n<h1 id=\"Batch归一化\"><a href=\"#Batch归一化\" class=\"headerlink\" title=\"Batch归一化\"></a>Batch归一化</h1><p>在深度学习兴起后，最重要的一个思想是它的一种算法，<br>叫Batch归一化，它会使你的参数搜索问题变得很容易。<br>使神经网络对超参数的选择更加稳定，范围更庞大，工作效果也很好。</p>\n<p>当训练一个模型，比如Logistic回归时，归一化输入特征(输入样本减去平均数后再除以方差)可以加速学习过程，更易于算法优化。</p>\n<p>那么对于更深的模型，没有输入特征值x，但有激活值a^{[L]}时，<br>如果想训练这些参数，比如w^{3},b^{3}，那归一化a^{[2]}的平均值和方差，<br>以便使w^{3},b^{3}的训练更有意义。</p>\n<p>简单来说Batch归一化的作用就是，对于任何一个隐藏层而言，归一化a的值，能够以更快的速度来训练下一层的参数。<br>严格的来说，我们真正归一化的不是a，而是z。</p>\n<h3 id=\"Batch归一化的使用\"><a href=\"#Batch归一化的使用\" class=\"headerlink\" title=\"Batch归一化的使用\"></a>Batch归一化的使用</h3><p>在神经网络中，已知一些中间值，假设有一些隐藏单元值，从z^{(1)}到z^{(m)}，<br>如下，首先计算平均值，接着计算方差，然后规范化z^{(i)}，<br><img src=\"/assets/images/170921_2.JPG\"><br>现在我们已经将这些z值标准化，使其含平均值0和标准单位方差，<br>所以z的每一个分量都含有平均值0和方差1，<br>或许我们需要隐藏单元有不同的分布，所以还需计算，<br><img src=\"/assets/images/170921_3.JPG\"><br>通过对\\gamma ,\\beta的合理设置，可以构造含其他平均值和方差的隐藏单元值。</p>\n<p>Batch归一化的作用不止适用于输入层，同样适用于神经网络中的深度隐藏层。</p>\n<p>假设有如上神经网络，每个节点进行两步计算，<br>如果没有进行Batch归一化，z将直接输入激活函数得到a，<br>否则，Batch归一化发生在z和a之间，</p>\n<p>接下来可以任意选择需要的的优化算法。</p>\n<p>使用中Batch归一化通常和训练集的mini-batch一起使用</p>\n<p>用第一个mini-batch上计算出z^{[1]}，<br>接着Batch归一化，然后再正想传播求得z^{[2]}，<br>反向传播后，用梯度下降法更新参数，<br>这些都第一个mini-batch上进行的一步梯度下降法，</p>\n<p>之后在第二个mini-batch上计算出z^{[1]}，<br>然后在此步中使数据Batch归一化，<br>如上依此类推，<br>也可尝试其他算法来对参数进行更新。</p>\n<h1 id=\"Softmax回归\"><a href=\"#Softmax回归\" class=\"headerlink\" title=\"Softmax回归\"></a>Softmax回归</h1><p>该回归能够对多个分类进行预测，而不是之前的两个分类，<br>关于Softmax激活函数，对于Softmax层而言，</p>\n<p>首先计算一个临时变量t，t=e^{z^{[L]}}，就是对所有元素求幂，<br>接着对t归一化，求得a^{[L]}=\\frac{e^{z^{[L]}}}{\\sum_{j=1}^{n} t_i}<br>即a^{[L]}可以表示样本属于各分类的可能性</p>\n<p>整个计算过程，从计算幂，到得出临时变量t，再归一化，<br>将此概括为一个Softmax激活函数。</p>\n<p><img src=\"/assets/images/170921_4.JPG\"><br>例如一个神经网络输出层计算出z，有四个分类，即z为4*1维向量，<br>计算临时变量t，对元素进行幂运算。<br>最后，令输出层激活函数为Softmax激活函数，输出g，且总和为1。</p>\n<p>对于四分类问题，损失函数一般如下，<br>l(\\hat{y},y)=- \\sum_{j=1}^{4} j_ilog\\hat{y}_j</p>\n<h1 id=\"TensorFlow\"><a href=\"#TensorFlow\" class=\"headerlink\" title=\"TensorFlow\"></a>TensorFlow</h1><p>假设你有一个损失函数J需要最小话，J(w)=w^2-20w+25<br>使用TensorFlow将其最小化<br><img src=\"/assets/images/170921_5.JPG\"></p>\n","site":{"data":{}},"excerpt":"<p>神经网络的改变会涉及到许多不同的超参数设置，<br>对于超参数而言，系统地组织调试过程，<br>能更加方便有效的找到合适的超参数设定值。</p>","more":"<h1 id=\"超参数的选取\"><a href=\"#超参数的选取\" class=\"headerlink\" title=\"超参数的选取\"></a>超参数的选取</h1><p>关于训练深度最难的事情之一，是需要处理的参数的数量，<br>学习速率是需要调试的参数中最重要的参数，<br>还有一些参数，如Momentum参数、mini batch大小、隐藏单元，重要程度次一级，<br>其他因素的重要性排第三，如层数、学习衰减率等<br><img src=\"/assets/images/170921_1.JPG\"><br>在早一代的机器学习算法中，比如你有两个超参数，<br>常见的做法是在网格中取样点，然后系统的研究这些数值，<br>尝试过所有的参数后，选择出效果最好的一组参数。</p>\n<p>在深度学习领用，我们常做的是随机选择点，<br>接着用这些随机选取的点试验超参数的效果，<br>之所以这么做，是因为很难提前预测哪个超参数更适合。</p>\n<p>选择超参数时，另一个惯例是采用由粗糙到精细的策略，<br>先在大范围内进行取值，选择出大范围内最好的点，<br>或许该点周围还有效果更好的点，接下来，选中这块区域，<br>然后在其中更密集地取值或随机取值，通常更为有效。</p>\n<p>关于搜索超参数的过程，大致有两种思想流派：</p>\n<p>一种是时常照看一个模型，通常是有庞大的数据组，<br>但没有许多计算资源或足够的CPU和GPU的前提下，<br>即当它在试验时，你也可以定期逐渐改良超参数的设定，<br>直至达到想要的结果。</p>\n<p>另一种是同时试验多种不同超参数设定的模型，<br>前提是拥有足够计算资源或CPU和GPU，<br>然后在训练结束，快速选择出工作效果最好的那个。</p>\n<p>这两种方式的选择，主要取决于拥有的计算资源。</p>\n<h1 id=\"Batch归一化\"><a href=\"#Batch归一化\" class=\"headerlink\" title=\"Batch归一化\"></a>Batch归一化</h1><p>在深度学习兴起后，最重要的一个思想是它的一种算法，<br>叫Batch归一化，它会使你的参数搜索问题变得很容易。<br>使神经网络对超参数的选择更加稳定，范围更庞大，工作效果也很好。</p>\n<p>当训练一个模型，比如Logistic回归时，归一化输入特征(输入样本减去平均数后再除以方差)可以加速学习过程，更易于算法优化。</p>\n<p>那么对于更深的模型，没有输入特征值x，但有激活值a^{[L]}时，<br>如果想训练这些参数，比如w^{3},b^{3}，那归一化a^{[2]}的平均值和方差，<br>以便使w^{3},b^{3}的训练更有意义。</p>\n<p>简单来说Batch归一化的作用就是，对于任何一个隐藏层而言，归一化a的值，能够以更快的速度来训练下一层的参数。<br>严格的来说，我们真正归一化的不是a，而是z。</p>\n<h3 id=\"Batch归一化的使用\"><a href=\"#Batch归一化的使用\" class=\"headerlink\" title=\"Batch归一化的使用\"></a>Batch归一化的使用</h3><p>在神经网络中，已知一些中间值，假设有一些隐藏单元值，从z^{(1)}到z^{(m)}，<br>如下，首先计算平均值，接着计算方差，然后规范化z^{(i)}，<br><img src=\"/assets/images/170921_2.JPG\"><br>现在我们已经将这些z值标准化，使其含平均值0和标准单位方差，<br>所以z的每一个分量都含有平均值0和方差1，<br>或许我们需要隐藏单元有不同的分布，所以还需计算，<br><img src=\"/assets/images/170921_3.JPG\"><br>通过对\\gamma ,\\beta的合理设置，可以构造含其他平均值和方差的隐藏单元值。</p>\n<p>Batch归一化的作用不止适用于输入层，同样适用于神经网络中的深度隐藏层。</p>\n<p>假设有如上神经网络，每个节点进行两步计算，<br>如果没有进行Batch归一化，z将直接输入激活函数得到a，<br>否则，Batch归一化发生在z和a之间，</p>\n<p>接下来可以任意选择需要的的优化算法。</p>\n<p>使用中Batch归一化通常和训练集的mini-batch一起使用</p>\n<p>用第一个mini-batch上计算出z^{[1]}，<br>接着Batch归一化，然后再正想传播求得z^{[2]}，<br>反向传播后，用梯度下降法更新参数，<br>这些都第一个mini-batch上进行的一步梯度下降法，</p>\n<p>之后在第二个mini-batch上计算出z^{[1]}，<br>然后在此步中使数据Batch归一化，<br>如上依此类推，<br>也可尝试其他算法来对参数进行更新。</p>\n<h1 id=\"Softmax回归\"><a href=\"#Softmax回归\" class=\"headerlink\" title=\"Softmax回归\"></a>Softmax回归</h1><p>该回归能够对多个分类进行预测，而不是之前的两个分类，<br>关于Softmax激活函数，对于Softmax层而言，</p>\n<p>首先计算一个临时变量t，t=e^{z^{[L]}}，就是对所有元素求幂，<br>接着对t归一化，求得a^{[L]}=\\frac{e^{z^{[L]}}}{\\sum_{j=1}^{n} t_i}<br>即a^{[L]}可以表示样本属于各分类的可能性</p>\n<p>整个计算过程，从计算幂，到得出临时变量t，再归一化，<br>将此概括为一个Softmax激活函数。</p>\n<p><img src=\"/assets/images/170921_4.JPG\"><br>例如一个神经网络输出层计算出z，有四个分类，即z为4*1维向量，<br>计算临时变量t，对元素进行幂运算。<br>最后，令输出层激活函数为Softmax激活函数，输出g，且总和为1。</p>\n<p>对于四分类问题，损失函数一般如下，<br>l(\\hat{y},y)=- \\sum_{j=1}^{4} j_ilog\\hat{y}_j</p>\n<h1 id=\"TensorFlow\"><a href=\"#TensorFlow\" class=\"headerlink\" title=\"TensorFlow\"></a>TensorFlow</h1><p>假设你有一个损失函数J需要最小话，J(w)=w^2-20w+25<br>使用TensorFlow将其最小化<br><img src=\"/assets/images/170921_5.JPG\"></p>"},{"layout":"post","title":"笔记-吴恩达deeplearning之六","comments":1,"date":"2017-09-28T08:59:56.000Z","_content":"假设经过了一段时间的调整，使得分类器准确率达到了90%，\n但对于应用程序来说还是不够好，所以系统还需改善，\n\n比如收集更多的训练数据，或许训练集多样性还不够，\n或者需要更多的反例集，或者梯度下降训练算法可以训练久一点，\n或者尝试一个不同的优化算法，尝试更大规模的神经网络。\n<!--more-->\n但是问题在于，如果一旦做出了错误的选择，完全有可能，\n直到很久之后才知道此路不通，那将浪费大量的时间。\n\n搭建机器学习的挑战是，可尝试的东西太多了\n\n# 正交化\n![](/assets/images/170928.JPG)\n例如老式电视，上面有很多旋钮来调整图像的各种性质，\n如果有一个按钮可以同时调整图像高度、宽度、角度之类的，\n那这台电视将几乎不可能被调好，让图像显示在区域中间。\n\n这种情况下，正交化指电视设计师保证每个按钮只调整一个性质，\n这样调整电视图像将容易得多。\n\n弄好一个监督学习系统，通长需要调节系统，需要确保四件事：\n1. 系统在训练集上得到的结果不错\n2. 系统在开发集上有好的表现\n3. 系统在测试集上也有好的表现\n4. 系统在测试集上成本函数令人满意\n\n如果发现算法对训练集做的很好，但开发集的拟合很差，\n则需要一组正则化旋钮可以调节，使系统满足第二个条件。\n\n如果此时不符合第三个标准，可能调节更大的开发集。\n如果第四个条件不符合，这意味着需要改变开发集或成本函数。\n\n# 单一数字评估指标\n\n单一数字评估指标可以帮你加快进展，\n它会告诉你，尝试的新方法比之前的方法好还是不好，\n当团队开始进行机器学习项目时，可以为问题设置一个单实数评估指标，\n\n应用机器学习是一个非常经验性的过程，用实验结果来改善想法，\n然后继续实验，循环，不断地改进算法。\n\n比如图片分类器，搭建的分类器A，通过改变超参数、训练集等手段，\n现在训练出一个新的分类器B，所以评估一个分类器的合理方式是，\n观察它的查准率和查全率。\n\n但使用查准率和查全率作为指标时，如果分类器A在查全率上表现更好，\n分类器B在查准率上表现更好，那就无法判断哪个分类器更好了。\n所以不推荐使用两个评估标准来选择一个分类器。\n\n在文献中，结合查准率和查全率的标准方法是所谓F1分数，\n非正式的可认为是查准率P和查全率R的调和平均值，\n这个指标在权衡查准率和查全率时很有优势。\n\n# 满足和优化指标\n\n要把顾及到的所有事，组成单实数评估指标并不容易，\n那么还可以设置满足和优化指标。\n\n假设看重分类器的准确度，但除了准确度，还需考虑运行时间，\n那么可以将准确度和运行时间组成一个整体评估指标，\n比如总成本是准确度减去0.5倍运行时间，\n\n也可以选择一个分类器，在满足运行时间下，尽可能降低准确度，\n在这种情况下，准确度可以是一个优化指标，\n因为此时只追求准确度的最大化，运行时间达到要求后就无所谓了，\n这也是一种合理的权衡方式，或者说将准确度和运行时间结合起来的方式。\n\n通过定义优化和满足指标，可以提供一个明确的方式去选择最好的分类器，\n\n# 训练/开发/测试集划分\n\n设立训练集、开发集和测试集的方式，将会大大影响你或你的团队，\n在机器学习方面取得进展的速度。\n\n机器学习的工作流程是，尝试多种思路，用训练集训练不同的模型，\n然后使用开发集来评估不同的思路，然后选择其中一个，\n然后不断地迭代去改善开发集的性能，直到最后得到一个满意的成本，\n再用测试集去评估。\n\n建议：\n开发集和测试集来自同一分布；\n选择能反映未来会得到的数据的开发集和测试集，\n\n在深度学习时代，设立开发集和测试集的方针也在变化，\n\n在机器学习早期中，将取得的全部数据按7:3的比例分成训练集和测试集，\n这样分在数据集很小的时候，是相当合理的，\n但在现代机器学习中，我们可以轻易获得规模很大的数据集，\n或许将98%作为训练集，1%作为开发集，1%作为测试集更为合理。\n\n测试集的目的是完成系统后，评估投产系统的性能，\n策略就是令训练集足够大，能够高置信度评估系统整体性能，\n故除非对最终投产系统有很精确的指标，一般来说测试集不需要很大。\n\n项目进行中，可能会发现目标放错了，这种情况下，应该移动目标。\n例如构建一个图片分类器，试图找到很多目标图片，使用的指标为分类误差，\n算法A和B分别有3%和5%的误差，似乎算法A做的更好，但实际测试时，\n算法A由于某些问题，把很多无关的图片分错类了，\n如果部署算法A，那么用户看到更多目标图片，因为误差小，但它也会给用户推送一些不能接受的无关图片，\n相比之下算法B虽然得到较少的目标图像，但不会推送无关图像，从用户角度，算法B实际上更好一点，\n这个例子中算法A评估指标做得好，但实际是个糟糕的算法。\n\n这种情况发生时，当评估指标无法正确衡量算法之间的优劣时，就需要改变评估指标了，或者改变开发集或测试集。\n\n让一个监督学习算法达到实用，基本上希望可以完成两件事，\n首先，算法对训练集的拟合很好，即可避免偏差很低，\n然后，做到训练集很好，开发集和测试集也很好，即方差不是太大，\n\n想提升机器学习系统的性能，建议看看训练误差和贝叶斯误差估计值间的距离，明白偏差有多大，\n然后看开发误差和训练误差间距离，明白方差问题有多大。\n\n# 误差分析\n\n假设正在调整分类器，取得90%的准确率，相当于10%的误差，\n在开发集上还未达到目标，经检查，算法将狗误判为猫了，\n建议针对狗的算法进行优化，那么是否需要建立针对狗的算法？\n通过误差分析流程，可以尽快知道该方向是否值得行动。\n\n例如：\n首先收集错误标记的开发集例子，\n然后手动检查多少例子是狗，\n如果狗的例子很少，那么就无需在狗上耗费太多精力。\n\n如果正在开发新的机器学习应用，\n应该快速设立开发集和测试集还有指标，\n然后尽快建立第一个机器学习系统原型，\n然后使用偏差方差分析、误差分析来确定下一步方向。","source":"_posts/笔记-吴恩达deeplearning之六.md","raw":"---\nlayout: post\ntitle: 笔记-吴恩达deeplearning之六\ncomments: true\ndate: 2017-09-28 16:59:56\ntags:\n- 深度学习\n---\n假设经过了一段时间的调整，使得分类器准确率达到了90%，\n但对于应用程序来说还是不够好，所以系统还需改善，\n\n比如收集更多的训练数据，或许训练集多样性还不够，\n或者需要更多的反例集，或者梯度下降训练算法可以训练久一点，\n或者尝试一个不同的优化算法，尝试更大规模的神经网络。\n<!--more-->\n但是问题在于，如果一旦做出了错误的选择，完全有可能，\n直到很久之后才知道此路不通，那将浪费大量的时间。\n\n搭建机器学习的挑战是，可尝试的东西太多了\n\n# 正交化\n![](/assets/images/170928.JPG)\n例如老式电视，上面有很多旋钮来调整图像的各种性质，\n如果有一个按钮可以同时调整图像高度、宽度、角度之类的，\n那这台电视将几乎不可能被调好，让图像显示在区域中间。\n\n这种情况下，正交化指电视设计师保证每个按钮只调整一个性质，\n这样调整电视图像将容易得多。\n\n弄好一个监督学习系统，通长需要调节系统，需要确保四件事：\n1. 系统在训练集上得到的结果不错\n2. 系统在开发集上有好的表现\n3. 系统在测试集上也有好的表现\n4. 系统在测试集上成本函数令人满意\n\n如果发现算法对训练集做的很好，但开发集的拟合很差，\n则需要一组正则化旋钮可以调节，使系统满足第二个条件。\n\n如果此时不符合第三个标准，可能调节更大的开发集。\n如果第四个条件不符合，这意味着需要改变开发集或成本函数。\n\n# 单一数字评估指标\n\n单一数字评估指标可以帮你加快进展，\n它会告诉你，尝试的新方法比之前的方法好还是不好，\n当团队开始进行机器学习项目时，可以为问题设置一个单实数评估指标，\n\n应用机器学习是一个非常经验性的过程，用实验结果来改善想法，\n然后继续实验，循环，不断地改进算法。\n\n比如图片分类器，搭建的分类器A，通过改变超参数、训练集等手段，\n现在训练出一个新的分类器B，所以评估一个分类器的合理方式是，\n观察它的查准率和查全率。\n\n但使用查准率和查全率作为指标时，如果分类器A在查全率上表现更好，\n分类器B在查准率上表现更好，那就无法判断哪个分类器更好了。\n所以不推荐使用两个评估标准来选择一个分类器。\n\n在文献中，结合查准率和查全率的标准方法是所谓F1分数，\n非正式的可认为是查准率P和查全率R的调和平均值，\n这个指标在权衡查准率和查全率时很有优势。\n\n# 满足和优化指标\n\n要把顾及到的所有事，组成单实数评估指标并不容易，\n那么还可以设置满足和优化指标。\n\n假设看重分类器的准确度，但除了准确度，还需考虑运行时间，\n那么可以将准确度和运行时间组成一个整体评估指标，\n比如总成本是准确度减去0.5倍运行时间，\n\n也可以选择一个分类器，在满足运行时间下，尽可能降低准确度，\n在这种情况下，准确度可以是一个优化指标，\n因为此时只追求准确度的最大化，运行时间达到要求后就无所谓了，\n这也是一种合理的权衡方式，或者说将准确度和运行时间结合起来的方式。\n\n通过定义优化和满足指标，可以提供一个明确的方式去选择最好的分类器，\n\n# 训练/开发/测试集划分\n\n设立训练集、开发集和测试集的方式，将会大大影响你或你的团队，\n在机器学习方面取得进展的速度。\n\n机器学习的工作流程是，尝试多种思路，用训练集训练不同的模型，\n然后使用开发集来评估不同的思路，然后选择其中一个，\n然后不断地迭代去改善开发集的性能，直到最后得到一个满意的成本，\n再用测试集去评估。\n\n建议：\n开发集和测试集来自同一分布；\n选择能反映未来会得到的数据的开发集和测试集，\n\n在深度学习时代，设立开发集和测试集的方针也在变化，\n\n在机器学习早期中，将取得的全部数据按7:3的比例分成训练集和测试集，\n这样分在数据集很小的时候，是相当合理的，\n但在现代机器学习中，我们可以轻易获得规模很大的数据集，\n或许将98%作为训练集，1%作为开发集，1%作为测试集更为合理。\n\n测试集的目的是完成系统后，评估投产系统的性能，\n策略就是令训练集足够大，能够高置信度评估系统整体性能，\n故除非对最终投产系统有很精确的指标，一般来说测试集不需要很大。\n\n项目进行中，可能会发现目标放错了，这种情况下，应该移动目标。\n例如构建一个图片分类器，试图找到很多目标图片，使用的指标为分类误差，\n算法A和B分别有3%和5%的误差，似乎算法A做的更好，但实际测试时，\n算法A由于某些问题，把很多无关的图片分错类了，\n如果部署算法A，那么用户看到更多目标图片，因为误差小，但它也会给用户推送一些不能接受的无关图片，\n相比之下算法B虽然得到较少的目标图像，但不会推送无关图像，从用户角度，算法B实际上更好一点，\n这个例子中算法A评估指标做得好，但实际是个糟糕的算法。\n\n这种情况发生时，当评估指标无法正确衡量算法之间的优劣时，就需要改变评估指标了，或者改变开发集或测试集。\n\n让一个监督学习算法达到实用，基本上希望可以完成两件事，\n首先，算法对训练集的拟合很好，即可避免偏差很低，\n然后，做到训练集很好，开发集和测试集也很好，即方差不是太大，\n\n想提升机器学习系统的性能，建议看看训练误差和贝叶斯误差估计值间的距离，明白偏差有多大，\n然后看开发误差和训练误差间距离，明白方差问题有多大。\n\n# 误差分析\n\n假设正在调整分类器，取得90%的准确率，相当于10%的误差，\n在开发集上还未达到目标，经检查，算法将狗误判为猫了，\n建议针对狗的算法进行优化，那么是否需要建立针对狗的算法？\n通过误差分析流程，可以尽快知道该方向是否值得行动。\n\n例如：\n首先收集错误标记的开发集例子，\n然后手动检查多少例子是狗，\n如果狗的例子很少，那么就无需在狗上耗费太多精力。\n\n如果正在开发新的机器学习应用，\n应该快速设立开发集和测试集还有指标，\n然后尽快建立第一个机器学习系统原型，\n然后使用偏差方差分析、误差分析来确定下一步方向。","slug":"笔记-吴恩达deeplearning之六","published":1,"updated":"2021-11-28T14:49:22.997Z","photos":[],"link":"","_id":"cl4kyqfvh001320r559io8l04","content":"<p>假设经过了一段时间的调整，使得分类器准确率达到了90%，<br>但对于应用程序来说还是不够好，所以系统还需改善，</p>\n<p>比如收集更多的训练数据，或许训练集多样性还不够，<br>或者需要更多的反例集，或者梯度下降训练算法可以训练久一点，<br>或者尝试一个不同的优化算法，尝试更大规模的神经网络。</p>\n<span id=\"more\"></span>\n<p>但是问题在于，如果一旦做出了错误的选择，完全有可能，<br>直到很久之后才知道此路不通，那将浪费大量的时间。</p>\n<p>搭建机器学习的挑战是，可尝试的东西太多了</p>\n<h1 id=\"正交化\"><a href=\"#正交化\" class=\"headerlink\" title=\"正交化\"></a>正交化</h1><p><img src=\"/assets/images/170928.JPG\"><br>例如老式电视，上面有很多旋钮来调整图像的各种性质，<br>如果有一个按钮可以同时调整图像高度、宽度、角度之类的，<br>那这台电视将几乎不可能被调好，让图像显示在区域中间。</p>\n<p>这种情况下，正交化指电视设计师保证每个按钮只调整一个性质，<br>这样调整电视图像将容易得多。</p>\n<p>弄好一个监督学习系统，通长需要调节系统，需要确保四件事：</p>\n<ol>\n<li>系统在训练集上得到的结果不错</li>\n<li>系统在开发集上有好的表现</li>\n<li>系统在测试集上也有好的表现</li>\n<li>系统在测试集上成本函数令人满意</li>\n</ol>\n<p>如果发现算法对训练集做的很好，但开发集的拟合很差，<br>则需要一组正则化旋钮可以调节，使系统满足第二个条件。</p>\n<p>如果此时不符合第三个标准，可能调节更大的开发集。<br>如果第四个条件不符合，这意味着需要改变开发集或成本函数。</p>\n<h1 id=\"单一数字评估指标\"><a href=\"#单一数字评估指标\" class=\"headerlink\" title=\"单一数字评估指标\"></a>单一数字评估指标</h1><p>单一数字评估指标可以帮你加快进展，<br>它会告诉你，尝试的新方法比之前的方法好还是不好，<br>当团队开始进行机器学习项目时，可以为问题设置一个单实数评估指标，</p>\n<p>应用机器学习是一个非常经验性的过程，用实验结果来改善想法，<br>然后继续实验，循环，不断地改进算法。</p>\n<p>比如图片分类器，搭建的分类器A，通过改变超参数、训练集等手段，<br>现在训练出一个新的分类器B，所以评估一个分类器的合理方式是，<br>观察它的查准率和查全率。</p>\n<p>但使用查准率和查全率作为指标时，如果分类器A在查全率上表现更好，<br>分类器B在查准率上表现更好，那就无法判断哪个分类器更好了。<br>所以不推荐使用两个评估标准来选择一个分类器。</p>\n<p>在文献中，结合查准率和查全率的标准方法是所谓F1分数，<br>非正式的可认为是查准率P和查全率R的调和平均值，<br>这个指标在权衡查准率和查全率时很有优势。</p>\n<h1 id=\"满足和优化指标\"><a href=\"#满足和优化指标\" class=\"headerlink\" title=\"满足和优化指标\"></a>满足和优化指标</h1><p>要把顾及到的所有事，组成单实数评估指标并不容易，<br>那么还可以设置满足和优化指标。</p>\n<p>假设看重分类器的准确度，但除了准确度，还需考虑运行时间，<br>那么可以将准确度和运行时间组成一个整体评估指标，<br>比如总成本是准确度减去0.5倍运行时间，</p>\n<p>也可以选择一个分类器，在满足运行时间下，尽可能降低准确度，<br>在这种情况下，准确度可以是一个优化指标，<br>因为此时只追求准确度的最大化，运行时间达到要求后就无所谓了，<br>这也是一种合理的权衡方式，或者说将准确度和运行时间结合起来的方式。</p>\n<p>通过定义优化和满足指标，可以提供一个明确的方式去选择最好的分类器，</p>\n<h1 id=\"训练-开发-测试集划分\"><a href=\"#训练-开发-测试集划分\" class=\"headerlink\" title=\"训练/开发/测试集划分\"></a>训练/开发/测试集划分</h1><p>设立训练集、开发集和测试集的方式，将会大大影响你或你的团队，<br>在机器学习方面取得进展的速度。</p>\n<p>机器学习的工作流程是，尝试多种思路，用训练集训练不同的模型，<br>然后使用开发集来评估不同的思路，然后选择其中一个，<br>然后不断地迭代去改善开发集的性能，直到最后得到一个满意的成本，<br>再用测试集去评估。</p>\n<p>建议：<br>开发集和测试集来自同一分布；<br>选择能反映未来会得到的数据的开发集和测试集，</p>\n<p>在深度学习时代，设立开发集和测试集的方针也在变化，</p>\n<p>在机器学习早期中，将取得的全部数据按7:3的比例分成训练集和测试集，<br>这样分在数据集很小的时候，是相当合理的，<br>但在现代机器学习中，我们可以轻易获得规模很大的数据集，<br>或许将98%作为训练集，1%作为开发集，1%作为测试集更为合理。</p>\n<p>测试集的目的是完成系统后，评估投产系统的性能，<br>策略就是令训练集足够大，能够高置信度评估系统整体性能，<br>故除非对最终投产系统有很精确的指标，一般来说测试集不需要很大。</p>\n<p>项目进行中，可能会发现目标放错了，这种情况下，应该移动目标。<br>例如构建一个图片分类器，试图找到很多目标图片，使用的指标为分类误差，<br>算法A和B分别有3%和5%的误差，似乎算法A做的更好，但实际测试时，<br>算法A由于某些问题，把很多无关的图片分错类了，<br>如果部署算法A，那么用户看到更多目标图片，因为误差小，但它也会给用户推送一些不能接受的无关图片，<br>相比之下算法B虽然得到较少的目标图像，但不会推送无关图像，从用户角度，算法B实际上更好一点，<br>这个例子中算法A评估指标做得好，但实际是个糟糕的算法。</p>\n<p>这种情况发生时，当评估指标无法正确衡量算法之间的优劣时，就需要改变评估指标了，或者改变开发集或测试集。</p>\n<p>让一个监督学习算法达到实用，基本上希望可以完成两件事，<br>首先，算法对训练集的拟合很好，即可避免偏差很低，<br>然后，做到训练集很好，开发集和测试集也很好，即方差不是太大，</p>\n<p>想提升机器学习系统的性能，建议看看训练误差和贝叶斯误差估计值间的距离，明白偏差有多大，<br>然后看开发误差和训练误差间距离，明白方差问题有多大。</p>\n<h1 id=\"误差分析\"><a href=\"#误差分析\" class=\"headerlink\" title=\"误差分析\"></a>误差分析</h1><p>假设正在调整分类器，取得90%的准确率，相当于10%的误差，<br>在开发集上还未达到目标，经检查，算法将狗误判为猫了，<br>建议针对狗的算法进行优化，那么是否需要建立针对狗的算法？<br>通过误差分析流程，可以尽快知道该方向是否值得行动。</p>\n<p>例如：<br>首先收集错误标记的开发集例子，<br>然后手动检查多少例子是狗，<br>如果狗的例子很少，那么就无需在狗上耗费太多精力。</p>\n<p>如果正在开发新的机器学习应用，<br>应该快速设立开发集和测试集还有指标，<br>然后尽快建立第一个机器学习系统原型，<br>然后使用偏差方差分析、误差分析来确定下一步方向。</p>\n","site":{"data":{}},"excerpt":"<p>假设经过了一段时间的调整，使得分类器准确率达到了90%，<br>但对于应用程序来说还是不够好，所以系统还需改善，</p>\n<p>比如收集更多的训练数据，或许训练集多样性还不够，<br>或者需要更多的反例集，或者梯度下降训练算法可以训练久一点，<br>或者尝试一个不同的优化算法，尝试更大规模的神经网络。</p>","more":"<p>但是问题在于，如果一旦做出了错误的选择，完全有可能，<br>直到很久之后才知道此路不通，那将浪费大量的时间。</p>\n<p>搭建机器学习的挑战是，可尝试的东西太多了</p>\n<h1 id=\"正交化\"><a href=\"#正交化\" class=\"headerlink\" title=\"正交化\"></a>正交化</h1><p><img src=\"/assets/images/170928.JPG\"><br>例如老式电视，上面有很多旋钮来调整图像的各种性质，<br>如果有一个按钮可以同时调整图像高度、宽度、角度之类的，<br>那这台电视将几乎不可能被调好，让图像显示在区域中间。</p>\n<p>这种情况下，正交化指电视设计师保证每个按钮只调整一个性质，<br>这样调整电视图像将容易得多。</p>\n<p>弄好一个监督学习系统，通长需要调节系统，需要确保四件事：</p>\n<ol>\n<li>系统在训练集上得到的结果不错</li>\n<li>系统在开发集上有好的表现</li>\n<li>系统在测试集上也有好的表现</li>\n<li>系统在测试集上成本函数令人满意</li>\n</ol>\n<p>如果发现算法对训练集做的很好，但开发集的拟合很差，<br>则需要一组正则化旋钮可以调节，使系统满足第二个条件。</p>\n<p>如果此时不符合第三个标准，可能调节更大的开发集。<br>如果第四个条件不符合，这意味着需要改变开发集或成本函数。</p>\n<h1 id=\"单一数字评估指标\"><a href=\"#单一数字评估指标\" class=\"headerlink\" title=\"单一数字评估指标\"></a>单一数字评估指标</h1><p>单一数字评估指标可以帮你加快进展，<br>它会告诉你，尝试的新方法比之前的方法好还是不好，<br>当团队开始进行机器学习项目时，可以为问题设置一个单实数评估指标，</p>\n<p>应用机器学习是一个非常经验性的过程，用实验结果来改善想法，<br>然后继续实验，循环，不断地改进算法。</p>\n<p>比如图片分类器，搭建的分类器A，通过改变超参数、训练集等手段，<br>现在训练出一个新的分类器B，所以评估一个分类器的合理方式是，<br>观察它的查准率和查全率。</p>\n<p>但使用查准率和查全率作为指标时，如果分类器A在查全率上表现更好，<br>分类器B在查准率上表现更好，那就无法判断哪个分类器更好了。<br>所以不推荐使用两个评估标准来选择一个分类器。</p>\n<p>在文献中，结合查准率和查全率的标准方法是所谓F1分数，<br>非正式的可认为是查准率P和查全率R的调和平均值，<br>这个指标在权衡查准率和查全率时很有优势。</p>\n<h1 id=\"满足和优化指标\"><a href=\"#满足和优化指标\" class=\"headerlink\" title=\"满足和优化指标\"></a>满足和优化指标</h1><p>要把顾及到的所有事，组成单实数评估指标并不容易，<br>那么还可以设置满足和优化指标。</p>\n<p>假设看重分类器的准确度，但除了准确度，还需考虑运行时间，<br>那么可以将准确度和运行时间组成一个整体评估指标，<br>比如总成本是准确度减去0.5倍运行时间，</p>\n<p>也可以选择一个分类器，在满足运行时间下，尽可能降低准确度，<br>在这种情况下，准确度可以是一个优化指标，<br>因为此时只追求准确度的最大化，运行时间达到要求后就无所谓了，<br>这也是一种合理的权衡方式，或者说将准确度和运行时间结合起来的方式。</p>\n<p>通过定义优化和满足指标，可以提供一个明确的方式去选择最好的分类器，</p>\n<h1 id=\"训练-开发-测试集划分\"><a href=\"#训练-开发-测试集划分\" class=\"headerlink\" title=\"训练/开发/测试集划分\"></a>训练/开发/测试集划分</h1><p>设立训练集、开发集和测试集的方式，将会大大影响你或你的团队，<br>在机器学习方面取得进展的速度。</p>\n<p>机器学习的工作流程是，尝试多种思路，用训练集训练不同的模型，<br>然后使用开发集来评估不同的思路，然后选择其中一个，<br>然后不断地迭代去改善开发集的性能，直到最后得到一个满意的成本，<br>再用测试集去评估。</p>\n<p>建议：<br>开发集和测试集来自同一分布；<br>选择能反映未来会得到的数据的开发集和测试集，</p>\n<p>在深度学习时代，设立开发集和测试集的方针也在变化，</p>\n<p>在机器学习早期中，将取得的全部数据按7:3的比例分成训练集和测试集，<br>这样分在数据集很小的时候，是相当合理的，<br>但在现代机器学习中，我们可以轻易获得规模很大的数据集，<br>或许将98%作为训练集，1%作为开发集，1%作为测试集更为合理。</p>\n<p>测试集的目的是完成系统后，评估投产系统的性能，<br>策略就是令训练集足够大，能够高置信度评估系统整体性能，<br>故除非对最终投产系统有很精确的指标，一般来说测试集不需要很大。</p>\n<p>项目进行中，可能会发现目标放错了，这种情况下，应该移动目标。<br>例如构建一个图片分类器，试图找到很多目标图片，使用的指标为分类误差，<br>算法A和B分别有3%和5%的误差，似乎算法A做的更好，但实际测试时，<br>算法A由于某些问题，把很多无关的图片分错类了，<br>如果部署算法A，那么用户看到更多目标图片，因为误差小，但它也会给用户推送一些不能接受的无关图片，<br>相比之下算法B虽然得到较少的目标图像，但不会推送无关图像，从用户角度，算法B实际上更好一点，<br>这个例子中算法A评估指标做得好，但实际是个糟糕的算法。</p>\n<p>这种情况发生时，当评估指标无法正确衡量算法之间的优劣时，就需要改变评估指标了，或者改变开发集或测试集。</p>\n<p>让一个监督学习算法达到实用，基本上希望可以完成两件事，<br>首先，算法对训练集的拟合很好，即可避免偏差很低，<br>然后，做到训练集很好，开发集和测试集也很好，即方差不是太大，</p>\n<p>想提升机器学习系统的性能，建议看看训练误差和贝叶斯误差估计值间的距离，明白偏差有多大，<br>然后看开发误差和训练误差间距离，明白方差问题有多大。</p>\n<h1 id=\"误差分析\"><a href=\"#误差分析\" class=\"headerlink\" title=\"误差分析\"></a>误差分析</h1><p>假设正在调整分类器，取得90%的准确率，相当于10%的误差，<br>在开发集上还未达到目标，经检查，算法将狗误判为猫了，<br>建议针对狗的算法进行优化，那么是否需要建立针对狗的算法？<br>通过误差分析流程，可以尽快知道该方向是否值得行动。</p>\n<p>例如：<br>首先收集错误标记的开发集例子，<br>然后手动检查多少例子是狗，<br>如果狗的例子很少，那么就无需在狗上耗费太多精力。</p>\n<p>如果正在开发新的机器学习应用，<br>应该快速设立开发集和测试集还有指标，<br>然后尽快建立第一个机器学习系统原型，<br>然后使用偏差方差分析、误差分析来确定下一步方向。</p>"},{"layout":"post","title":"笔记-吴恩达deeplearning之四","comments":1,"date":"2017-09-19T09:30:18.000Z","_content":"机器学习的应用是一个高度依赖经验的过程，\n伴随着大量迭代的过程，需要训练诸多模型，才能找到适合的那一个，\n所以优化算法能够帮助你快速训练模型。\n使用好用的优化算法能够大大提高你的团队的效率，\n<!--more-->\n# mini-batch梯度下降法\n\n众所周知，向量化能够有效地对所有m个例子进行计算，允许处理整个训练集，而无需某个明确的公式，所以我们要把训练样本放到巨大的矩阵X中去，X=[x^{(1)}x^{(2)}x^{(3)}…x^{(m)}]，(n_x,m)\nY也是如此，Y=[y^{(1)}y^{(2)}y^{(3)}…y^{(m)}]，(1,m)\n\n但如果m很大的话，处理速度仍然缓慢，在对整个训练集执行梯度下降法时，\n你必须处理整个训练集，才能进行一步梯度下降法，\n然后你需要再重新处理，才能进行下一步梯度下降法，\n所以你在处理完整个样本的训练集之前，先让梯度下降法处理一部分，你的算法速度会更快。\n\n你可以把训练集X分割为小一点的子训练集，这些子集被取名为Mini-batch，以X^{t}表示\nY也应相应的拆分，以Y^{t}表示,Mini-batch的数量t组成了X^{t}和Y^{t}\n\n运行Mini-batch梯度下降法时，\nfor t=1,...,5000(假设共有5000训练集)\nz^{[1]}=W^{[1]}X{{t}}+b^{[1]}\nA^{[1]}=g^{[1]}(z^{[1]})\n…\nA^{[L]}=g^{[L]}(z^{[L]})\n\nJ^{t}=\\frac{1}{1000}\\sum_{i=1}^L l(\\hat{y}^{(i)},y^{(i)})+\\frac{\\lambda}{2*1000} \\sum \\|\\|W^{[L]}\\|\\|_F^2，(假设子集规模1000,hat{y}^{(i)},y^{(i)}皆来自于子集)\n之后对J^{t}做反向传播及梯度下降，\n并循环上述步骤，知道收敛到一个合适的精度。\n\n![](/assets/images/170919_1.JPG)\n使用batch梯度下降法时，每次迭代都需要遍历整个训练集，可预期每次迭代的成本都会下降，\n所以如果成本函数J是迭代次数的一个函数，它会随着每次迭代而减少，\n使用Mini-batch梯度下降法时，如果你做出成本函数在整个过程中的图，\n并不是每次迭代都是下降的，走向朝下，但会有很多噪声。\n\n噪声原因也许是因为子集比较容易计算时，成本会低一些，较难计算时，成本会高一些，所以才会出现这些摆动。\n\n需要决定的变量之一是Mini-batch的大小，m是训练集的大小，\n极端情况下，Mini-batch的打小等于m，其实就是batch梯度下降法，\n另一个极端情况，假设Mini-batch的大小为1，就有了新的算法，叫随机梯度下降法\n\nMini-batch大小的选择指导原则：\n首先，如果训练集较小(少于2000个样本)，直接使用batch梯度下降法\n不然，数目较大的话，一般的Mini-batch大小为64到512，基于电脑使用，如果大小是2的次方，代码会运行快一些\n最后，Mini-batch中，X^{t}和Y^{t}要符合CPU/GPU内存，取决于你的应用方向以及训练集大小\n\n# 指数加权平均\n\n还有一些方法比梯度下降法速度快，要理解这些算法，需要用到指数加权平均，在统计中也叫做指数加权移动平均\n![](/assets/images/170919_2.JPG)\n例如温度统计，统计全年温度变化情况，\n夏季温度转暖，然后冬季降温，用数据作图，\n\n如果计算趋势的话，也就是温度的局部平均值，要做的是先使V_0=0，每天用0.9的加权数乘之前的数值，再加上当日温度\nv_1=0.9v_0+0.1\\theta _1\nv_2=0.9v_1+0.1\\theta _2\n…\n依此类推\n\n![](/assets/images/170919_3.JPG)\n权值越大，波动越小，曲线约平坦，因为会多平均几天温度\n缺点是曲线会进一步右移\n\n计算移动平均数时，因为v_0=0，故一开始曲线起点会比较低，不能很好的估测出一年中前两天的温度，\n故需要进行偏差修正，让估测变得更好，更准确\n\n也就是不用v_t，而是用\\frac{v_t}{(1-\\beta ^t)}\n随着t的增加，\\beta ^t将接近于0，所以当t很大时，修正偏差几乎没有作用，不过在开始阶段，修正偏差可一帮助你更好的预测。\n\n# Momentum梯度下降法\n\n其运行速度总是快于标准的梯度下降算法\n基本思想是计算梯度的指数加权平均数，并利用该梯度更新你的权重\n\n在每次迭代过程中，计算微分dw,db，之后用公式\n![](/assets/images/170919_4.JPG)\n\n这样就可以减缓梯度下降的幅度，因此你的算法走了一条更加直接的路径\n在抵达最小值的路上减小了摆动\n\n# RMSprop算法\n\n全程是root mean squre prop算法，\n我们需要用的新符号S_dw,S_db\n\n接着RMSprop会这样更新参数值\n![](/assets/images/170919_5.JPG)\n\n我们希望S_dw相对较小，保持w方向上的变化\n而又希望S_db相对较大，减缓b方向上的变化\n\nRMSprop的影响就是更新后b方向上摆动较小，而w方向继续推进\n以及可以用一个更大的学习率\\alpha加快学习\n\n# Adam优化算法\n\nAdam本质上就是将Momentum和RMSprop结合在一起\n\n使用Adam算法，首先要初始化\nv_dw=0，S_dw=0，v_db=0，S_db=0\n在迭代过程中\n用mini-batch梯度下降法计算dw,db\n接着用Momentum指数加权平均数计算\n![](/assets/images/170919_6.JPG)\n接着用RMSprop进行更新\n![](/assets/images/170919_7.JPG)\n\n一般使用Adam时需要计算偏差修正\n![](/assets/images/170919_8.JPG)\n\n最后更新权重\n![](/assets/images/170919_9.JPG)\n\n# 学习率衰减 \n\n加快学习算法的一个方法就是随时间慢慢减少学习率，称之为学习率衰减\n\n假设使用mini batch梯度下降时，迭代过程中会有噪音，朝向最小值方向下降，但可能不会精确的收敛，所以算法在最小点附近摆动，因为此时用的学习率是固定值\n\n如果慢慢减少学习率的话，在初期，学习率还相对较大，学习速度也相对较快，但随着学习率降低，学习速度也会慢慢变小，所以算法会在最小值附近一小块区域内摆动\n而不是在训练过程中，大幅度在最小值附近摆动\n\n所以学习率衰减的本质在于，在学习初期，能承受较大步伐，但在开始收敛时，小的学习率能让步伐小一点\n\n衰减学习率时，要遍历一次数据\n可将学习率设为\\frac{1}{1+decay-rate*epoch-num}\\alpha _0\n此处衰减率decay-rate是一个需要调整的超参数\n\n# 局部最优\n\n初期，人们担心优化算法会困在极差的局部最优，不过随着深度学习理论的不断发展，我们对局部最优的理解也发生了改变。\n![](/assets/images/170919_10.JPG)\n左图中，似乎各处都分布着局部最优，我们会认为梯度下降或者某个算法可能会困在一个局部最优中，而不会抵达全局最优\n\n但这个理解并不正确，实际上，如果创建一个神经网络，通常梯度为零的点并不是图中的局部最优点，\n实际上成本函数的零梯度点通常是鞍点，也就是有图上的蓝点\n\n一个具有高维空间的函数，如果梯度为0，那么它在每个方向都可能是凸函数，也可能是凹函数，因此在高维空间中，更有可能碰到鞍点，而不是局部最优点\n\n我们对低维度空间的大部分直觉，并不能应用到高维度空间中\n\n所以\n1. 我们的算法并不太可能困在极差的局部最优中，条件是你在训练较大的神经网络\n2. 平稳段会使学习变得缓慢，可以使用优化算法加速学习\n","source":"_posts/笔记-吴恩达deeplearning之四.md","raw":"---\nlayout: post\ntitle: 笔记-吴恩达deeplearning之四\ncomments: true\ndate: 2017-09-19 17:30:18\ntags:\n- 深度学习\n---\n机器学习的应用是一个高度依赖经验的过程，\n伴随着大量迭代的过程，需要训练诸多模型，才能找到适合的那一个，\n所以优化算法能够帮助你快速训练模型。\n使用好用的优化算法能够大大提高你的团队的效率，\n<!--more-->\n# mini-batch梯度下降法\n\n众所周知，向量化能够有效地对所有m个例子进行计算，允许处理整个训练集，而无需某个明确的公式，所以我们要把训练样本放到巨大的矩阵X中去，X=[x^{(1)}x^{(2)}x^{(3)}…x^{(m)}]，(n_x,m)\nY也是如此，Y=[y^{(1)}y^{(2)}y^{(3)}…y^{(m)}]，(1,m)\n\n但如果m很大的话，处理速度仍然缓慢，在对整个训练集执行梯度下降法时，\n你必须处理整个训练集，才能进行一步梯度下降法，\n然后你需要再重新处理，才能进行下一步梯度下降法，\n所以你在处理完整个样本的训练集之前，先让梯度下降法处理一部分，你的算法速度会更快。\n\n你可以把训练集X分割为小一点的子训练集，这些子集被取名为Mini-batch，以X^{t}表示\nY也应相应的拆分，以Y^{t}表示,Mini-batch的数量t组成了X^{t}和Y^{t}\n\n运行Mini-batch梯度下降法时，\nfor t=1,...,5000(假设共有5000训练集)\nz^{[1]}=W^{[1]}X{{t}}+b^{[1]}\nA^{[1]}=g^{[1]}(z^{[1]})\n…\nA^{[L]}=g^{[L]}(z^{[L]})\n\nJ^{t}=\\frac{1}{1000}\\sum_{i=1}^L l(\\hat{y}^{(i)},y^{(i)})+\\frac{\\lambda}{2*1000} \\sum \\|\\|W^{[L]}\\|\\|_F^2，(假设子集规模1000,hat{y}^{(i)},y^{(i)}皆来自于子集)\n之后对J^{t}做反向传播及梯度下降，\n并循环上述步骤，知道收敛到一个合适的精度。\n\n![](/assets/images/170919_1.JPG)\n使用batch梯度下降法时，每次迭代都需要遍历整个训练集，可预期每次迭代的成本都会下降，\n所以如果成本函数J是迭代次数的一个函数，它会随着每次迭代而减少，\n使用Mini-batch梯度下降法时，如果你做出成本函数在整个过程中的图，\n并不是每次迭代都是下降的，走向朝下，但会有很多噪声。\n\n噪声原因也许是因为子集比较容易计算时，成本会低一些，较难计算时，成本会高一些，所以才会出现这些摆动。\n\n需要决定的变量之一是Mini-batch的大小，m是训练集的大小，\n极端情况下，Mini-batch的打小等于m，其实就是batch梯度下降法，\n另一个极端情况，假设Mini-batch的大小为1，就有了新的算法，叫随机梯度下降法\n\nMini-batch大小的选择指导原则：\n首先，如果训练集较小(少于2000个样本)，直接使用batch梯度下降法\n不然，数目较大的话，一般的Mini-batch大小为64到512，基于电脑使用，如果大小是2的次方，代码会运行快一些\n最后，Mini-batch中，X^{t}和Y^{t}要符合CPU/GPU内存，取决于你的应用方向以及训练集大小\n\n# 指数加权平均\n\n还有一些方法比梯度下降法速度快，要理解这些算法，需要用到指数加权平均，在统计中也叫做指数加权移动平均\n![](/assets/images/170919_2.JPG)\n例如温度统计，统计全年温度变化情况，\n夏季温度转暖，然后冬季降温，用数据作图，\n\n如果计算趋势的话，也就是温度的局部平均值，要做的是先使V_0=0，每天用0.9的加权数乘之前的数值，再加上当日温度\nv_1=0.9v_0+0.1\\theta _1\nv_2=0.9v_1+0.1\\theta _2\n…\n依此类推\n\n![](/assets/images/170919_3.JPG)\n权值越大，波动越小，曲线约平坦，因为会多平均几天温度\n缺点是曲线会进一步右移\n\n计算移动平均数时，因为v_0=0，故一开始曲线起点会比较低，不能很好的估测出一年中前两天的温度，\n故需要进行偏差修正，让估测变得更好，更准确\n\n也就是不用v_t，而是用\\frac{v_t}{(1-\\beta ^t)}\n随着t的增加，\\beta ^t将接近于0，所以当t很大时，修正偏差几乎没有作用，不过在开始阶段，修正偏差可一帮助你更好的预测。\n\n# Momentum梯度下降法\n\n其运行速度总是快于标准的梯度下降算法\n基本思想是计算梯度的指数加权平均数，并利用该梯度更新你的权重\n\n在每次迭代过程中，计算微分dw,db，之后用公式\n![](/assets/images/170919_4.JPG)\n\n这样就可以减缓梯度下降的幅度，因此你的算法走了一条更加直接的路径\n在抵达最小值的路上减小了摆动\n\n# RMSprop算法\n\n全程是root mean squre prop算法，\n我们需要用的新符号S_dw,S_db\n\n接着RMSprop会这样更新参数值\n![](/assets/images/170919_5.JPG)\n\n我们希望S_dw相对较小，保持w方向上的变化\n而又希望S_db相对较大，减缓b方向上的变化\n\nRMSprop的影响就是更新后b方向上摆动较小，而w方向继续推进\n以及可以用一个更大的学习率\\alpha加快学习\n\n# Adam优化算法\n\nAdam本质上就是将Momentum和RMSprop结合在一起\n\n使用Adam算法，首先要初始化\nv_dw=0，S_dw=0，v_db=0，S_db=0\n在迭代过程中\n用mini-batch梯度下降法计算dw,db\n接着用Momentum指数加权平均数计算\n![](/assets/images/170919_6.JPG)\n接着用RMSprop进行更新\n![](/assets/images/170919_7.JPG)\n\n一般使用Adam时需要计算偏差修正\n![](/assets/images/170919_8.JPG)\n\n最后更新权重\n![](/assets/images/170919_9.JPG)\n\n# 学习率衰减 \n\n加快学习算法的一个方法就是随时间慢慢减少学习率，称之为学习率衰减\n\n假设使用mini batch梯度下降时，迭代过程中会有噪音，朝向最小值方向下降，但可能不会精确的收敛，所以算法在最小点附近摆动，因为此时用的学习率是固定值\n\n如果慢慢减少学习率的话，在初期，学习率还相对较大，学习速度也相对较快，但随着学习率降低，学习速度也会慢慢变小，所以算法会在最小值附近一小块区域内摆动\n而不是在训练过程中，大幅度在最小值附近摆动\n\n所以学习率衰减的本质在于，在学习初期，能承受较大步伐，但在开始收敛时，小的学习率能让步伐小一点\n\n衰减学习率时，要遍历一次数据\n可将学习率设为\\frac{1}{1+decay-rate*epoch-num}\\alpha _0\n此处衰减率decay-rate是一个需要调整的超参数\n\n# 局部最优\n\n初期，人们担心优化算法会困在极差的局部最优，不过随着深度学习理论的不断发展，我们对局部最优的理解也发生了改变。\n![](/assets/images/170919_10.JPG)\n左图中，似乎各处都分布着局部最优，我们会认为梯度下降或者某个算法可能会困在一个局部最优中，而不会抵达全局最优\n\n但这个理解并不正确，实际上，如果创建一个神经网络，通常梯度为零的点并不是图中的局部最优点，\n实际上成本函数的零梯度点通常是鞍点，也就是有图上的蓝点\n\n一个具有高维空间的函数，如果梯度为0，那么它在每个方向都可能是凸函数，也可能是凹函数，因此在高维空间中，更有可能碰到鞍点，而不是局部最优点\n\n我们对低维度空间的大部分直觉，并不能应用到高维度空间中\n\n所以\n1. 我们的算法并不太可能困在极差的局部最优中，条件是你在训练较大的神经网络\n2. 平稳段会使学习变得缓慢，可以使用优化算法加速学习\n","slug":"笔记-吴恩达deeplearning之四","published":1,"updated":"2021-11-28T14:48:42.524Z","photos":[],"link":"","_id":"cl4kyqfvn001520r5axc2c3ly","content":"<p>机器学习的应用是一个高度依赖经验的过程，<br>伴随着大量迭代的过程，需要训练诸多模型，才能找到适合的那一个，<br>所以优化算法能够帮助你快速训练模型。<br>使用好用的优化算法能够大大提高你的团队的效率，</p>\n<span id=\"more\"></span>\n<h1 id=\"mini-batch梯度下降法\"><a href=\"#mini-batch梯度下降法\" class=\"headerlink\" title=\"mini-batch梯度下降法\"></a>mini-batch梯度下降法</h1><p>众所周知，向量化能够有效地对所有m个例子进行计算，允许处理整个训练集，而无需某个明确的公式，所以我们要把训练样本放到巨大的矩阵X中去，X=[x^{(1)}x^{(2)}x^{(3)}…x^{(m)}]，(n_x,m)<br>Y也是如此，Y=[y^{(1)}y^{(2)}y^{(3)}…y^{(m)}]，(1,m)</p>\n<p>但如果m很大的话，处理速度仍然缓慢，在对整个训练集执行梯度下降法时，<br>你必须处理整个训练集，才能进行一步梯度下降法，<br>然后你需要再重新处理，才能进行下一步梯度下降法，<br>所以你在处理完整个样本的训练集之前，先让梯度下降法处理一部分，你的算法速度会更快。</p>\n<p>你可以把训练集X分割为小一点的子训练集，这些子集被取名为Mini-batch，以X^{t}表示<br>Y也应相应的拆分，以Y^{t}表示,Mini-batch的数量t组成了X^{t}和Y^{t}</p>\n<p>运行Mini-batch梯度下降法时，<br>for t=1,…,5000(假设共有5000训练集)<br>z^{[1]}=W^{[1]}X+b^{[1]}<br>A^{[1]}=g^{[1]}(z^{[1]})<br>…<br>A^{[L]}=g^{[L]}(z^{[L]})</p>\n<p>J^{t}=\\frac{1}{1000}\\sum_{i=1}^L l(\\hat{y}^{(i)},y^{(i)})+\\frac{\\lambda}{2*1000} \\sum ||W^{[L]}||_F^2，(假设子集规模1000,hat{y}^{(i)},y^{(i)}皆来自于子集)<br>之后对J^{t}做反向传播及梯度下降，<br>并循环上述步骤，知道收敛到一个合适的精度。</p>\n<p><img src=\"/assets/images/170919_1.JPG\"><br>使用batch梯度下降法时，每次迭代都需要遍历整个训练集，可预期每次迭代的成本都会下降，<br>所以如果成本函数J是迭代次数的一个函数，它会随着每次迭代而减少，<br>使用Mini-batch梯度下降法时，如果你做出成本函数在整个过程中的图，<br>并不是每次迭代都是下降的，走向朝下，但会有很多噪声。</p>\n<p>噪声原因也许是因为子集比较容易计算时，成本会低一些，较难计算时，成本会高一些，所以才会出现这些摆动。</p>\n<p>需要决定的变量之一是Mini-batch的大小，m是训练集的大小，<br>极端情况下，Mini-batch的打小等于m，其实就是batch梯度下降法，<br>另一个极端情况，假设Mini-batch的大小为1，就有了新的算法，叫随机梯度下降法</p>\n<p>Mini-batch大小的选择指导原则：<br>首先，如果训练集较小(少于2000个样本)，直接使用batch梯度下降法<br>不然，数目较大的话，一般的Mini-batch大小为64到512，基于电脑使用，如果大小是2的次方，代码会运行快一些<br>最后，Mini-batch中，X^{t}和Y^{t}要符合CPU/GPU内存，取决于你的应用方向以及训练集大小</p>\n<h1 id=\"指数加权平均\"><a href=\"#指数加权平均\" class=\"headerlink\" title=\"指数加权平均\"></a>指数加权平均</h1><p>还有一些方法比梯度下降法速度快，要理解这些算法，需要用到指数加权平均，在统计中也叫做指数加权移动平均<br><img src=\"/assets/images/170919_2.JPG\"><br>例如温度统计，统计全年温度变化情况，<br>夏季温度转暖，然后冬季降温，用数据作图，</p>\n<p>如果计算趋势的话，也就是温度的局部平均值，要做的是先使V_0=0，每天用0.9的加权数乘之前的数值，再加上当日温度<br>v_1=0.9v_0+0.1\\theta _1<br>v_2=0.9v_1+0.1\\theta _2<br>…<br>依此类推</p>\n<p><img src=\"/assets/images/170919_3.JPG\"><br>权值越大，波动越小，曲线约平坦，因为会多平均几天温度<br>缺点是曲线会进一步右移</p>\n<p>计算移动平均数时，因为v_0=0，故一开始曲线起点会比较低，不能很好的估测出一年中前两天的温度，<br>故需要进行偏差修正，让估测变得更好，更准确</p>\n<p>也就是不用v_t，而是用\\frac{v_t}{(1-\\beta ^t)}<br>随着t的增加，\\beta ^t将接近于0，所以当t很大时，修正偏差几乎没有作用，不过在开始阶段，修正偏差可一帮助你更好的预测。</p>\n<h1 id=\"Momentum梯度下降法\"><a href=\"#Momentum梯度下降法\" class=\"headerlink\" title=\"Momentum梯度下降法\"></a>Momentum梯度下降法</h1><p>其运行速度总是快于标准的梯度下降算法<br>基本思想是计算梯度的指数加权平均数，并利用该梯度更新你的权重</p>\n<p>在每次迭代过程中，计算微分dw,db，之后用公式<br><img src=\"/assets/images/170919_4.JPG\"></p>\n<p>这样就可以减缓梯度下降的幅度，因此你的算法走了一条更加直接的路径<br>在抵达最小值的路上减小了摆动</p>\n<h1 id=\"RMSprop算法\"><a href=\"#RMSprop算法\" class=\"headerlink\" title=\"RMSprop算法\"></a>RMSprop算法</h1><p>全程是root mean squre prop算法，<br>我们需要用的新符号S_dw,S_db</p>\n<p>接着RMSprop会这样更新参数值<br><img src=\"/assets/images/170919_5.JPG\"></p>\n<p>我们希望S_dw相对较小，保持w方向上的变化<br>而又希望S_db相对较大，减缓b方向上的变化</p>\n<p>RMSprop的影响就是更新后b方向上摆动较小，而w方向继续推进<br>以及可以用一个更大的学习率\\alpha加快学习</p>\n<h1 id=\"Adam优化算法\"><a href=\"#Adam优化算法\" class=\"headerlink\" title=\"Adam优化算法\"></a>Adam优化算法</h1><p>Adam本质上就是将Momentum和RMSprop结合在一起</p>\n<p>使用Adam算法，首先要初始化<br>v_dw=0，S_dw=0，v_db=0，S_db=0<br>在迭代过程中<br>用mini-batch梯度下降法计算dw,db<br>接着用Momentum指数加权平均数计算<br><img src=\"/assets/images/170919_6.JPG\"><br>接着用RMSprop进行更新<br><img src=\"/assets/images/170919_7.JPG\"></p>\n<p>一般使用Adam时需要计算偏差修正<br><img src=\"/assets/images/170919_8.JPG\"></p>\n<p>最后更新权重<br><img src=\"/assets/images/170919_9.JPG\"></p>\n<h1 id=\"学习率衰减\"><a href=\"#学习率衰减\" class=\"headerlink\" title=\"学习率衰减\"></a>学习率衰减</h1><p>加快学习算法的一个方法就是随时间慢慢减少学习率，称之为学习率衰减</p>\n<p>假设使用mini batch梯度下降时，迭代过程中会有噪音，朝向最小值方向下降，但可能不会精确的收敛，所以算法在最小点附近摆动，因为此时用的学习率是固定值</p>\n<p>如果慢慢减少学习率的话，在初期，学习率还相对较大，学习速度也相对较快，但随着学习率降低，学习速度也会慢慢变小，所以算法会在最小值附近一小块区域内摆动<br>而不是在训练过程中，大幅度在最小值附近摆动</p>\n<p>所以学习率衰减的本质在于，在学习初期，能承受较大步伐，但在开始收敛时，小的学习率能让步伐小一点</p>\n<p>衰减学习率时，要遍历一次数据<br>可将学习率设为\\frac{1}{1+decay-rate*epoch-num}\\alpha _0<br>此处衰减率decay-rate是一个需要调整的超参数</p>\n<h1 id=\"局部最优\"><a href=\"#局部最优\" class=\"headerlink\" title=\"局部最优\"></a>局部最优</h1><p>初期，人们担心优化算法会困在极差的局部最优，不过随着深度学习理论的不断发展，我们对局部最优的理解也发生了改变。<br><img src=\"/assets/images/170919_10.JPG\"><br>左图中，似乎各处都分布着局部最优，我们会认为梯度下降或者某个算法可能会困在一个局部最优中，而不会抵达全局最优</p>\n<p>但这个理解并不正确，实际上，如果创建一个神经网络，通常梯度为零的点并不是图中的局部最优点，<br>实际上成本函数的零梯度点通常是鞍点，也就是有图上的蓝点</p>\n<p>一个具有高维空间的函数，如果梯度为0，那么它在每个方向都可能是凸函数，也可能是凹函数，因此在高维空间中，更有可能碰到鞍点，而不是局部最优点</p>\n<p>我们对低维度空间的大部分直觉，并不能应用到高维度空间中</p>\n<p>所以</p>\n<ol>\n<li>我们的算法并不太可能困在极差的局部最优中，条件是你在训练较大的神经网络</li>\n<li>平稳段会使学习变得缓慢，可以使用优化算法加速学习</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>机器学习的应用是一个高度依赖经验的过程，<br>伴随着大量迭代的过程，需要训练诸多模型，才能找到适合的那一个，<br>所以优化算法能够帮助你快速训练模型。<br>使用好用的优化算法能够大大提高你的团队的效率，</p>","more":"<h1 id=\"mini-batch梯度下降法\"><a href=\"#mini-batch梯度下降法\" class=\"headerlink\" title=\"mini-batch梯度下降法\"></a>mini-batch梯度下降法</h1><p>众所周知，向量化能够有效地对所有m个例子进行计算，允许处理整个训练集，而无需某个明确的公式，所以我们要把训练样本放到巨大的矩阵X中去，X=[x^{(1)}x^{(2)}x^{(3)}…x^{(m)}]，(n_x,m)<br>Y也是如此，Y=[y^{(1)}y^{(2)}y^{(3)}…y^{(m)}]，(1,m)</p>\n<p>但如果m很大的话，处理速度仍然缓慢，在对整个训练集执行梯度下降法时，<br>你必须处理整个训练集，才能进行一步梯度下降法，<br>然后你需要再重新处理，才能进行下一步梯度下降法，<br>所以你在处理完整个样本的训练集之前，先让梯度下降法处理一部分，你的算法速度会更快。</p>\n<p>你可以把训练集X分割为小一点的子训练集，这些子集被取名为Mini-batch，以X^{t}表示<br>Y也应相应的拆分，以Y^{t}表示,Mini-batch的数量t组成了X^{t}和Y^{t}</p>\n<p>运行Mini-batch梯度下降法时，<br>for t=1,…,5000(假设共有5000训练集)<br>z^{[1]}=W^{[1]}X+b^{[1]}<br>A^{[1]}=g^{[1]}(z^{[1]})<br>…<br>A^{[L]}=g^{[L]}(z^{[L]})</p>\n<p>J^{t}=\\frac{1}{1000}\\sum_{i=1}^L l(\\hat{y}^{(i)},y^{(i)})+\\frac{\\lambda}{2*1000} \\sum ||W^{[L]}||_F^2，(假设子集规模1000,hat{y}^{(i)},y^{(i)}皆来自于子集)<br>之后对J^{t}做反向传播及梯度下降，<br>并循环上述步骤，知道收敛到一个合适的精度。</p>\n<p><img src=\"/assets/images/170919_1.JPG\"><br>使用batch梯度下降法时，每次迭代都需要遍历整个训练集，可预期每次迭代的成本都会下降，<br>所以如果成本函数J是迭代次数的一个函数，它会随着每次迭代而减少，<br>使用Mini-batch梯度下降法时，如果你做出成本函数在整个过程中的图，<br>并不是每次迭代都是下降的，走向朝下，但会有很多噪声。</p>\n<p>噪声原因也许是因为子集比较容易计算时，成本会低一些，较难计算时，成本会高一些，所以才会出现这些摆动。</p>\n<p>需要决定的变量之一是Mini-batch的大小，m是训练集的大小，<br>极端情况下，Mini-batch的打小等于m，其实就是batch梯度下降法，<br>另一个极端情况，假设Mini-batch的大小为1，就有了新的算法，叫随机梯度下降法</p>\n<p>Mini-batch大小的选择指导原则：<br>首先，如果训练集较小(少于2000个样本)，直接使用batch梯度下降法<br>不然，数目较大的话，一般的Mini-batch大小为64到512，基于电脑使用，如果大小是2的次方，代码会运行快一些<br>最后，Mini-batch中，X^{t}和Y^{t}要符合CPU/GPU内存，取决于你的应用方向以及训练集大小</p>\n<h1 id=\"指数加权平均\"><a href=\"#指数加权平均\" class=\"headerlink\" title=\"指数加权平均\"></a>指数加权平均</h1><p>还有一些方法比梯度下降法速度快，要理解这些算法，需要用到指数加权平均，在统计中也叫做指数加权移动平均<br><img src=\"/assets/images/170919_2.JPG\"><br>例如温度统计，统计全年温度变化情况，<br>夏季温度转暖，然后冬季降温，用数据作图，</p>\n<p>如果计算趋势的话，也就是温度的局部平均值，要做的是先使V_0=0，每天用0.9的加权数乘之前的数值，再加上当日温度<br>v_1=0.9v_0+0.1\\theta _1<br>v_2=0.9v_1+0.1\\theta _2<br>…<br>依此类推</p>\n<p><img src=\"/assets/images/170919_3.JPG\"><br>权值越大，波动越小，曲线约平坦，因为会多平均几天温度<br>缺点是曲线会进一步右移</p>\n<p>计算移动平均数时，因为v_0=0，故一开始曲线起点会比较低，不能很好的估测出一年中前两天的温度，<br>故需要进行偏差修正，让估测变得更好，更准确</p>\n<p>也就是不用v_t，而是用\\frac{v_t}{(1-\\beta ^t)}<br>随着t的增加，\\beta ^t将接近于0，所以当t很大时，修正偏差几乎没有作用，不过在开始阶段，修正偏差可一帮助你更好的预测。</p>\n<h1 id=\"Momentum梯度下降法\"><a href=\"#Momentum梯度下降法\" class=\"headerlink\" title=\"Momentum梯度下降法\"></a>Momentum梯度下降法</h1><p>其运行速度总是快于标准的梯度下降算法<br>基本思想是计算梯度的指数加权平均数，并利用该梯度更新你的权重</p>\n<p>在每次迭代过程中，计算微分dw,db，之后用公式<br><img src=\"/assets/images/170919_4.JPG\"></p>\n<p>这样就可以减缓梯度下降的幅度，因此你的算法走了一条更加直接的路径<br>在抵达最小值的路上减小了摆动</p>\n<h1 id=\"RMSprop算法\"><a href=\"#RMSprop算法\" class=\"headerlink\" title=\"RMSprop算法\"></a>RMSprop算法</h1><p>全程是root mean squre prop算法，<br>我们需要用的新符号S_dw,S_db</p>\n<p>接着RMSprop会这样更新参数值<br><img src=\"/assets/images/170919_5.JPG\"></p>\n<p>我们希望S_dw相对较小，保持w方向上的变化<br>而又希望S_db相对较大，减缓b方向上的变化</p>\n<p>RMSprop的影响就是更新后b方向上摆动较小，而w方向继续推进<br>以及可以用一个更大的学习率\\alpha加快学习</p>\n<h1 id=\"Adam优化算法\"><a href=\"#Adam优化算法\" class=\"headerlink\" title=\"Adam优化算法\"></a>Adam优化算法</h1><p>Adam本质上就是将Momentum和RMSprop结合在一起</p>\n<p>使用Adam算法，首先要初始化<br>v_dw=0，S_dw=0，v_db=0，S_db=0<br>在迭代过程中<br>用mini-batch梯度下降法计算dw,db<br>接着用Momentum指数加权平均数计算<br><img src=\"/assets/images/170919_6.JPG\"><br>接着用RMSprop进行更新<br><img src=\"/assets/images/170919_7.JPG\"></p>\n<p>一般使用Adam时需要计算偏差修正<br><img src=\"/assets/images/170919_8.JPG\"></p>\n<p>最后更新权重<br><img src=\"/assets/images/170919_9.JPG\"></p>\n<h1 id=\"学习率衰减\"><a href=\"#学习率衰减\" class=\"headerlink\" title=\"学习率衰减\"></a>学习率衰减</h1><p>加快学习算法的一个方法就是随时间慢慢减少学习率，称之为学习率衰减</p>\n<p>假设使用mini batch梯度下降时，迭代过程中会有噪音，朝向最小值方向下降，但可能不会精确的收敛，所以算法在最小点附近摆动，因为此时用的学习率是固定值</p>\n<p>如果慢慢减少学习率的话，在初期，学习率还相对较大，学习速度也相对较快，但随着学习率降低，学习速度也会慢慢变小，所以算法会在最小值附近一小块区域内摆动<br>而不是在训练过程中，大幅度在最小值附近摆动</p>\n<p>所以学习率衰减的本质在于，在学习初期，能承受较大步伐，但在开始收敛时，小的学习率能让步伐小一点</p>\n<p>衰减学习率时，要遍历一次数据<br>可将学习率设为\\frac{1}{1+decay-rate*epoch-num}\\alpha _0<br>此处衰减率decay-rate是一个需要调整的超参数</p>\n<h1 id=\"局部最优\"><a href=\"#局部最优\" class=\"headerlink\" title=\"局部最优\"></a>局部最优</h1><p>初期，人们担心优化算法会困在极差的局部最优，不过随着深度学习理论的不断发展，我们对局部最优的理解也发生了改变。<br><img src=\"/assets/images/170919_10.JPG\"><br>左图中，似乎各处都分布着局部最优，我们会认为梯度下降或者某个算法可能会困在一个局部最优中，而不会抵达全局最优</p>\n<p>但这个理解并不正确，实际上，如果创建一个神经网络，通常梯度为零的点并不是图中的局部最优点，<br>实际上成本函数的零梯度点通常是鞍点，也就是有图上的蓝点</p>\n<p>一个具有高维空间的函数，如果梯度为0，那么它在每个方向都可能是凸函数，也可能是凹函数，因此在高维空间中，更有可能碰到鞍点，而不是局部最优点</p>\n<p>我们对低维度空间的大部分直觉，并不能应用到高维度空间中</p>\n<p>所以</p>\n<ol>\n<li>我们的算法并不太可能困在极差的局部最优中，条件是你在训练较大的神经网络</li>\n<li>平稳段会使学习变得缓慢，可以使用优化算法加速学习</li>\n</ol>"},{"layout":"post","title":"粒子群算法","comments":1,"date":"2018-06-05T08:24:07.000Z","_content":"![](/assets/images/180605_1.jpg)\n粒子群优化算法是在1995年由Eberhart博士和Kennedy博士一起提出的，\n算法从随机解出发，通过迭代寻找最优解，通过适应度来评价解的品质。\n<!--more-->\n粒子群算法源于鸟群飞行觅食行为，它的基本核心是利用群体中的个体对信息的共享，\n从而使得整个群体的运动在问题求解空间中产生从无序到有序的演化过程，从而获得问题的最优解。\n\n举个网上看到的例子，一群鸟在一片区域内寻找一只虫子，但它们不确定虫子的位置，只能知道自己距离虫子有多远，以及哪只鸟最接近虫子。那么鸟群要想聚集到虫子的位置，就需要离虫子最近的鸟依照当前速度方向飞行，别的鸟飞向那只离虫子最近的鸟的位置，整个飞行过程是动态的，那么经过不断的调整，鸟群就会向虫子的位置聚集。\n\n在PSO算法中，每一个优化问题的解就是空间中的一只鸟（粒子），问题的最优解就是鸟群寻找的虫子。所有粒子都有一个位置向量（解空间中的位置）和速度向量（下次飞行的方向和速度），根据目标函数判断当前位置的适应值。种群中的粒子除了根据自身的“经验”（历史位置）进行学习以外，还可以根据种群中最优粒子的“经验”来学习，从而确定下一次迭代时需要如何调整和改变飞行的方向和速度。就这样逐步迭代，最终整个种群的粒子就会逐步趋于最优解。\n\n## 算法框架\n令Xi=(xi1,xi2,...,xin)代表粒子i的位置向量，Vi=(vi1,vi2,...,vin)代表粒子i的速度向量，最早的粒子群优化算法迭代算子形式为：\n速度向量迭代公式：\n![](/assets/images/180605_2.jpg)\n位置向量迭代公式：\n![](/assets/images/180605_3.jpg)\n公式中，$Pbest_i$和$Gbest$分别代表粒子i的历史最佳位置向量和种群历史最佳位置向量。\n\n但在后期研究中，上述公式中$V_i$的更新太随机，从而使得整个PSO算法的全局优化能力很强，但是局部搜索能力较差。而实际上，我们需要在算法迭代后期，种群应该具有更强的局部搜索能力。于是Shi和Eberhart通过引入惯性权重修改了速度迭代公式：\n![](/assets/images/180605_4.jpg)\n式中$\\omega$称为PSO的惯性权重，取值介于[0,1]之间，一般从0.9开始随着迭代进行递减，迭代结束时为0.1。参数c为学习因子，一般设置为1.4961，r为[0,1]间的随机概率值。\n\n粒子群优化算法步骤如下：\n1. 种群初始化，计算个体适应值，选出局部最优位置向量和种群全局最优位置向量。\n2. 设置迭代次数；\n3. 更新个体速度向量；\n4. 更新个体位置向量；\n5. 更新局部位置向量和全局位置向量；\n6. 判断是否满足迭代次数，否则进行第三步。\n\n参考文献：\n[群体智能优化算法之粒子群优化算法](http://www.cnblogs.com/maybe2030/p/5043356.html)\n[谁能详细帮我形象详细解释一下粒子群算法？](https://www.zhihu.com/question/23103725)","source":"_posts/粒子群算法.md","raw":"---\nlayout: post\ntitle: 粒子群算法\ncomments: true\ndate: 2018-06-05 16:24:07\ntags:\n- 算法\n---\n![](/assets/images/180605_1.jpg)\n粒子群优化算法是在1995年由Eberhart博士和Kennedy博士一起提出的，\n算法从随机解出发，通过迭代寻找最优解，通过适应度来评价解的品质。\n<!--more-->\n粒子群算法源于鸟群飞行觅食行为，它的基本核心是利用群体中的个体对信息的共享，\n从而使得整个群体的运动在问题求解空间中产生从无序到有序的演化过程，从而获得问题的最优解。\n\n举个网上看到的例子，一群鸟在一片区域内寻找一只虫子，但它们不确定虫子的位置，只能知道自己距离虫子有多远，以及哪只鸟最接近虫子。那么鸟群要想聚集到虫子的位置，就需要离虫子最近的鸟依照当前速度方向飞行，别的鸟飞向那只离虫子最近的鸟的位置，整个飞行过程是动态的，那么经过不断的调整，鸟群就会向虫子的位置聚集。\n\n在PSO算法中，每一个优化问题的解就是空间中的一只鸟（粒子），问题的最优解就是鸟群寻找的虫子。所有粒子都有一个位置向量（解空间中的位置）和速度向量（下次飞行的方向和速度），根据目标函数判断当前位置的适应值。种群中的粒子除了根据自身的“经验”（历史位置）进行学习以外，还可以根据种群中最优粒子的“经验”来学习，从而确定下一次迭代时需要如何调整和改变飞行的方向和速度。就这样逐步迭代，最终整个种群的粒子就会逐步趋于最优解。\n\n## 算法框架\n令Xi=(xi1,xi2,...,xin)代表粒子i的位置向量，Vi=(vi1,vi2,...,vin)代表粒子i的速度向量，最早的粒子群优化算法迭代算子形式为：\n速度向量迭代公式：\n![](/assets/images/180605_2.jpg)\n位置向量迭代公式：\n![](/assets/images/180605_3.jpg)\n公式中，$Pbest_i$和$Gbest$分别代表粒子i的历史最佳位置向量和种群历史最佳位置向量。\n\n但在后期研究中，上述公式中$V_i$的更新太随机，从而使得整个PSO算法的全局优化能力很强，但是局部搜索能力较差。而实际上，我们需要在算法迭代后期，种群应该具有更强的局部搜索能力。于是Shi和Eberhart通过引入惯性权重修改了速度迭代公式：\n![](/assets/images/180605_4.jpg)\n式中$\\omega$称为PSO的惯性权重，取值介于[0,1]之间，一般从0.9开始随着迭代进行递减，迭代结束时为0.1。参数c为学习因子，一般设置为1.4961，r为[0,1]间的随机概率值。\n\n粒子群优化算法步骤如下：\n1. 种群初始化，计算个体适应值，选出局部最优位置向量和种群全局最优位置向量。\n2. 设置迭代次数；\n3. 更新个体速度向量；\n4. 更新个体位置向量；\n5. 更新局部位置向量和全局位置向量；\n6. 判断是否满足迭代次数，否则进行第三步。\n\n参考文献：\n[群体智能优化算法之粒子群优化算法](http://www.cnblogs.com/maybe2030/p/5043356.html)\n[谁能详细帮我形象详细解释一下粒子群算法？](https://www.zhihu.com/question/23103725)","slug":"粒子群算法","published":1,"updated":"2021-01-16T10:10:12.000Z","photos":[],"link":"","_id":"cl4kyqfvr001720r530j4bm22","content":"<p><img src=\"/assets/images/180605_1.jpg\"><br>粒子群优化算法是在1995年由Eberhart博士和Kennedy博士一起提出的，<br>算法从随机解出发，通过迭代寻找最优解，通过适应度来评价解的品质。</p>\n<span id=\"more\"></span>\n<p>粒子群算法源于鸟群飞行觅食行为，它的基本核心是利用群体中的个体对信息的共享，<br>从而使得整个群体的运动在问题求解空间中产生从无序到有序的演化过程，从而获得问题的最优解。</p>\n<p>举个网上看到的例子，一群鸟在一片区域内寻找一只虫子，但它们不确定虫子的位置，只能知道自己距离虫子有多远，以及哪只鸟最接近虫子。那么鸟群要想聚集到虫子的位置，就需要离虫子最近的鸟依照当前速度方向飞行，别的鸟飞向那只离虫子最近的鸟的位置，整个飞行过程是动态的，那么经过不断的调整，鸟群就会向虫子的位置聚集。</p>\n<p>在PSO算法中，每一个优化问题的解就是空间中的一只鸟（粒子），问题的最优解就是鸟群寻找的虫子。所有粒子都有一个位置向量（解空间中的位置）和速度向量（下次飞行的方向和速度），根据目标函数判断当前位置的适应值。种群中的粒子除了根据自身的“经验”（历史位置）进行学习以外，还可以根据种群中最优粒子的“经验”来学习，从而确定下一次迭代时需要如何调整和改变飞行的方向和速度。就这样逐步迭代，最终整个种群的粒子就会逐步趋于最优解。</p>\n<h2 id=\"算法框架\"><a href=\"#算法框架\" class=\"headerlink\" title=\"算法框架\"></a>算法框架</h2><p>令Xi=(xi1,xi2,…,xin)代表粒子i的位置向量，Vi=(vi1,vi2,…,vin)代表粒子i的速度向量，最早的粒子群优化算法迭代算子形式为：<br>速度向量迭代公式：<br><img src=\"/assets/images/180605_2.jpg\"><br>位置向量迭代公式：<br><img src=\"/assets/images/180605_3.jpg\"><br>公式中，$Pbest_i$和$Gbest$分别代表粒子i的历史最佳位置向量和种群历史最佳位置向量。</p>\n<p>但在后期研究中，上述公式中$V_i$的更新太随机，从而使得整个PSO算法的全局优化能力很强，但是局部搜索能力较差。而实际上，我们需要在算法迭代后期，种群应该具有更强的局部搜索能力。于是Shi和Eberhart通过引入惯性权重修改了速度迭代公式：<br><img src=\"/assets/images/180605_4.jpg\"><br>式中$\\omega$称为PSO的惯性权重，取值介于[0,1]之间，一般从0.9开始随着迭代进行递减，迭代结束时为0.1。参数c为学习因子，一般设置为1.4961，r为[0,1]间的随机概率值。</p>\n<p>粒子群优化算法步骤如下：</p>\n<ol>\n<li>种群初始化，计算个体适应值，选出局部最优位置向量和种群全局最优位置向量。</li>\n<li>设置迭代次数；</li>\n<li>更新个体速度向量；</li>\n<li>更新个体位置向量；</li>\n<li>更新局部位置向量和全局位置向量；</li>\n<li>判断是否满足迭代次数，否则进行第三步。</li>\n</ol>\n<p>参考文献：<br><a href=\"http://www.cnblogs.com/maybe2030/p/5043356.html\">群体智能优化算法之粒子群优化算法</a><br><a href=\"https://www.zhihu.com/question/23103725\">谁能详细帮我形象详细解释一下粒子群算法？</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/assets/images/180605_1.jpg\"><br>粒子群优化算法是在1995年由Eberhart博士和Kennedy博士一起提出的，<br>算法从随机解出发，通过迭代寻找最优解，通过适应度来评价解的品质。</p>","more":"<p>粒子群算法源于鸟群飞行觅食行为，它的基本核心是利用群体中的个体对信息的共享，<br>从而使得整个群体的运动在问题求解空间中产生从无序到有序的演化过程，从而获得问题的最优解。</p>\n<p>举个网上看到的例子，一群鸟在一片区域内寻找一只虫子，但它们不确定虫子的位置，只能知道自己距离虫子有多远，以及哪只鸟最接近虫子。那么鸟群要想聚集到虫子的位置，就需要离虫子最近的鸟依照当前速度方向飞行，别的鸟飞向那只离虫子最近的鸟的位置，整个飞行过程是动态的，那么经过不断的调整，鸟群就会向虫子的位置聚集。</p>\n<p>在PSO算法中，每一个优化问题的解就是空间中的一只鸟（粒子），问题的最优解就是鸟群寻找的虫子。所有粒子都有一个位置向量（解空间中的位置）和速度向量（下次飞行的方向和速度），根据目标函数判断当前位置的适应值。种群中的粒子除了根据自身的“经验”（历史位置）进行学习以外，还可以根据种群中最优粒子的“经验”来学习，从而确定下一次迭代时需要如何调整和改变飞行的方向和速度。就这样逐步迭代，最终整个种群的粒子就会逐步趋于最优解。</p>\n<h2 id=\"算法框架\"><a href=\"#算法框架\" class=\"headerlink\" title=\"算法框架\"></a>算法框架</h2><p>令Xi=(xi1,xi2,…,xin)代表粒子i的位置向量，Vi=(vi1,vi2,…,vin)代表粒子i的速度向量，最早的粒子群优化算法迭代算子形式为：<br>速度向量迭代公式：<br><img src=\"/assets/images/180605_2.jpg\"><br>位置向量迭代公式：<br><img src=\"/assets/images/180605_3.jpg\"><br>公式中，$Pbest_i$和$Gbest$分别代表粒子i的历史最佳位置向量和种群历史最佳位置向量。</p>\n<p>但在后期研究中，上述公式中$V_i$的更新太随机，从而使得整个PSO算法的全局优化能力很强，但是局部搜索能力较差。而实际上，我们需要在算法迭代后期，种群应该具有更强的局部搜索能力。于是Shi和Eberhart通过引入惯性权重修改了速度迭代公式：<br><img src=\"/assets/images/180605_4.jpg\"><br>式中$\\omega$称为PSO的惯性权重，取值介于[0,1]之间，一般从0.9开始随着迭代进行递减，迭代结束时为0.1。参数c为学习因子，一般设置为1.4961，r为[0,1]间的随机概率值。</p>\n<p>粒子群优化算法步骤如下：</p>\n<ol>\n<li>种群初始化，计算个体适应值，选出局部最优位置向量和种群全局最优位置向量。</li>\n<li>设置迭代次数；</li>\n<li>更新个体速度向量；</li>\n<li>更新个体位置向量；</li>\n<li>更新局部位置向量和全局位置向量；</li>\n<li>判断是否满足迭代次数，否则进行第三步。</li>\n</ol>\n<p>参考文献：<br><a href=\"http://www.cnblogs.com/maybe2030/p/5043356.html\">群体智能优化算法之粒子群优化算法</a><br><a href=\"https://www.zhihu.com/question/23103725\">谁能详细帮我形象详细解释一下粒子群算法？</a></p>"},{"layout":"post","title":"系统托管McAfee小图标消失的处理","comments":1,"date":"2020-06-30T12:09:54.000Z","_content":"McAfee的小图标不见了，但任务管理器能看到相关进程，那就重新让它显示吧。\n<!--more-->\n\n1. 检查任务管理器，看代理服务是不是正在运行。\n![](/assets/images/200630_1.jpg)\n\n2. 打开McAfee存放cmdagent.exe应用程序的文件夹，路径通常为C:\\Program Files\\McAfee\\Agent。\n![](/assets/images/200630_2.jpg)\n\n3. 进入命令行程序，且此时命令行执行路径为该文件夹。\n![](/assets/images/200630_3.jpg)\n \n4. 英文输入下，在CMD命令行中键入”cmdagent.exe” -s，即可弹出McAfee代理监视器界面，同时系统托盘中出现了McAfee的代理小图标。\n![](/assets/images/200630_4.jpg)\n\n5. 结束，此时系统托盘的代理小图标就出现了。","source":"_posts/系统托管McAfee小图标消失的处理.md","raw":"---\nlayout: post\ntitle: 系统托管McAfee小图标消失的处理\ncomments: true\ntags:\n  - McAfee\ndate: 2020-06-30 20:09:54\n---\nMcAfee的小图标不见了，但任务管理器能看到相关进程，那就重新让它显示吧。\n<!--more-->\n\n1. 检查任务管理器，看代理服务是不是正在运行。\n![](/assets/images/200630_1.jpg)\n\n2. 打开McAfee存放cmdagent.exe应用程序的文件夹，路径通常为C:\\Program Files\\McAfee\\Agent。\n![](/assets/images/200630_2.jpg)\n\n3. 进入命令行程序，且此时命令行执行路径为该文件夹。\n![](/assets/images/200630_3.jpg)\n \n4. 英文输入下，在CMD命令行中键入”cmdagent.exe” -s，即可弹出McAfee代理监视器界面，同时系统托盘中出现了McAfee的代理小图标。\n![](/assets/images/200630_4.jpg)\n\n5. 结束，此时系统托盘的代理小图标就出现了。","slug":"系统托管McAfee小图标消失的处理","published":1,"updated":"2021-11-28T14:50:10.306Z","photos":[],"link":"","_id":"cl4kyqfvv001920r54qg5463p","content":"<p>McAfee的小图标不见了，但任务管理器能看到相关进程，那就重新让它显示吧。</p>\n<span id=\"more\"></span>\n\n<ol>\n<li><p>检查任务管理器，看代理服务是不是正在运行。<br><img src=\"/assets/images/200630_1.jpg\"></p>\n</li>\n<li><p>打开McAfee存放cmdagent.exe应用程序的文件夹，路径通常为C:\\Program Files\\McAfee\\Agent。<br><img src=\"/assets/images/200630_2.jpg\"></p>\n</li>\n<li><p>进入命令行程序，且此时命令行执行路径为该文件夹。<br><img src=\"/assets/images/200630_3.jpg\"></p>\n</li>\n<li><p>英文输入下，在CMD命令行中键入”cmdagent.exe” -s，即可弹出McAfee代理监视器界面，同时系统托盘中出现了McAfee的代理小图标。<br><img src=\"/assets/images/200630_4.jpg\"></p>\n</li>\n<li><p>结束，此时系统托盘的代理小图标就出现了。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>McAfee的小图标不见了，但任务管理器能看到相关进程，那就重新让它显示吧。</p>","more":"<ol>\n<li><p>检查任务管理器，看代理服务是不是正在运行。<br><img src=\"/assets/images/200630_1.jpg\"></p>\n</li>\n<li><p>打开McAfee存放cmdagent.exe应用程序的文件夹，路径通常为C:\\Program Files\\McAfee\\Agent。<br><img src=\"/assets/images/200630_2.jpg\"></p>\n</li>\n<li><p>进入命令行程序，且此时命令行执行路径为该文件夹。<br><img src=\"/assets/images/200630_3.jpg\"></p>\n</li>\n<li><p>英文输入下，在CMD命令行中键入”cmdagent.exe” -s，即可弹出McAfee代理监视器界面，同时系统托盘中出现了McAfee的代理小图标。<br><img src=\"/assets/images/200630_4.jpg\"></p>\n</li>\n<li><p>结束，此时系统托盘的代理小图标就出现了。</p>\n</li>\n</ol>"},{"layout":"post","title":"纵横交叉算法","comments":1,"date":"2018-05-24T07:15:47.000Z","_content":"![](/assets/images/180524_1.jpg)  \n纵横交叉算法是一种新型的群体智能搜索算法，\n据[知网可查](http://kns.cnki.net/kcms/detail/detail.aspx?FileName=SJES14061700208503&DBName=SJES&DBCode=SJES&v=Mjc1MDZyaTNXY3hEOGVXUUwzd1plWnVIaW5oVTdiSUoxb1JhUlE9TmlmT2ZiSzhIdGZOcUk5Rlp1c0hDWHc2b0JFYTYwdDRUZw==)，该算法好像由2014年出自广东工业大学。\n<!--more-->\n纵横交叉算法受孔子中庸思想和遗传算法的启发，采用双向搜索机制，即横向交叉和纵向交叉。\n在父代种群进化迭代的过程中分别在横向和纵向两个方向各自产生中庸解，并通过竞争机制与父代进行竞争，优胜者保留作为新的父代，适应度较差的将被淘汰，\n竞争机制可以保证种群中的个体粒子始终维持历史上的最优，且这种迭代方式可以大大加速种群的收敛速度。\n\n# 原理\n种群由个体例子组成，搜寻方式为双向交叉，\n迭代过程由两种交叉方式在每代中交替进行，\n每次迭代进行竞争，择优保留位新的种群。\n\n算法流程图如下：\n![](/assets/images/180524_2.jpg)  \n\n## 横向交叉\n横向交叉是在群体中两个不同个体粒子所有维之间进行一种算数交叉。\n1. 获取父代种群X，种群规模大小为矩阵X的行数M，问题解空间的维数为矩阵X的列数D；\n2. 对父代种群X中所有个体粒子不重复随机配对，方法为：在1至N_1之间产生N_1个不重复的整数系列，将配对序号保存在矩阵B中；\n3. 从矩阵B中去处相邻两个数作为父代配对例子的编号i，j;\n4. 父代粒子X(i)和X(j)在第d维进行横向交叉运算，则它的子代繁殖采用如下公式：   \n![](/assets/images/180524_3.jpg) \n式中，r是[0，1]上均匀分布的随机数；c是[-1,1]上均匀分布的随机数；X(i,d)和X(j,d)分别是父代种群中的个体粒子X(i)和X(j)的第d维；MS_{(hc)}分别是X(i,d)和X(j,d)通过横向交叉产生的第d维子代。\n5. 重复步骤3和步骤4，最终获得横向交叉产生的中庸解，保存在中庸解矩阵MS_{(hc)}中；\n6. 执行竞争，获取横向交叉占优解，保存在DS_{(hc)}中。\n\n横向交叉始终在内部空间以较大的概率进行搜索，而对其外圈空间则以线性减少的概率进行搜索。\n\n## 纵向交叉\n纵向交叉是种群每个个体不同维之间所产生的交叉运算。\n1. 获取父代种群X(横向交叉产生的占优解)，种群规模大小为矩阵X的行数M，问题解空间的维数为矩阵X的列数D\n2. 对父代种群X每一维进行归一化操作；\n3. 对种群中所有的维进行不重复两两随机配对，方法为：在1至N_2之间产生N_2个不重复的整数系列，将配对序号保存在矩阵B中；\n4. 按顺序从矩阵B中取出相邻两个数即为配对的维序号d_1,d_2;\n5. 在纵向交叉概率为P_{(vc)}条件下，种群中所有的个体X(i)。根据公式产生子代:   \n![](/assets/images/180524_4.jpg) \n式中MS_{(vc)}(i,d_1)是个体X(i)的第d_1维和第d_2维通过纵向交叉产生的第d_1维子代。\n6. 重复步骤4和步骤5；\n7. 对MS_{(vc)}进行反归一化操作，最终获得纵向交叉产生的中庸解，保存在中庸解矩阵中；\n8. 执行竞争，获取纵向交叉占优解，保存在DS_{(vc)}中。\n\n纵向交叉发生在同一个体不同维之间，能有效防止维局部最优。防止不同维变量交叉超出维度限定，需要归一化处理。","source":"_posts/纵横交叉算法.md","raw":"---\nlayout: post\ntitle: 纵横交叉算法\ncomments: true\ndate: 2018-05-24 15:15:47\ntags:\n- 算法\n---\n![](/assets/images/180524_1.jpg)  \n纵横交叉算法是一种新型的群体智能搜索算法，\n据[知网可查](http://kns.cnki.net/kcms/detail/detail.aspx?FileName=SJES14061700208503&DBName=SJES&DBCode=SJES&v=Mjc1MDZyaTNXY3hEOGVXUUwzd1plWnVIaW5oVTdiSUoxb1JhUlE9TmlmT2ZiSzhIdGZOcUk5Rlp1c0hDWHc2b0JFYTYwdDRUZw==)，该算法好像由2014年出自广东工业大学。\n<!--more-->\n纵横交叉算法受孔子中庸思想和遗传算法的启发，采用双向搜索机制，即横向交叉和纵向交叉。\n在父代种群进化迭代的过程中分别在横向和纵向两个方向各自产生中庸解，并通过竞争机制与父代进行竞争，优胜者保留作为新的父代，适应度较差的将被淘汰，\n竞争机制可以保证种群中的个体粒子始终维持历史上的最优，且这种迭代方式可以大大加速种群的收敛速度。\n\n# 原理\n种群由个体例子组成，搜寻方式为双向交叉，\n迭代过程由两种交叉方式在每代中交替进行，\n每次迭代进行竞争，择优保留位新的种群。\n\n算法流程图如下：\n![](/assets/images/180524_2.jpg)  \n\n## 横向交叉\n横向交叉是在群体中两个不同个体粒子所有维之间进行一种算数交叉。\n1. 获取父代种群X，种群规模大小为矩阵X的行数M，问题解空间的维数为矩阵X的列数D；\n2. 对父代种群X中所有个体粒子不重复随机配对，方法为：在1至N_1之间产生N_1个不重复的整数系列，将配对序号保存在矩阵B中；\n3. 从矩阵B中去处相邻两个数作为父代配对例子的编号i，j;\n4. 父代粒子X(i)和X(j)在第d维进行横向交叉运算，则它的子代繁殖采用如下公式：   \n![](/assets/images/180524_3.jpg) \n式中，r是[0，1]上均匀分布的随机数；c是[-1,1]上均匀分布的随机数；X(i,d)和X(j,d)分别是父代种群中的个体粒子X(i)和X(j)的第d维；MS_{(hc)}分别是X(i,d)和X(j,d)通过横向交叉产生的第d维子代。\n5. 重复步骤3和步骤4，最终获得横向交叉产生的中庸解，保存在中庸解矩阵MS_{(hc)}中；\n6. 执行竞争，获取横向交叉占优解，保存在DS_{(hc)}中。\n\n横向交叉始终在内部空间以较大的概率进行搜索，而对其外圈空间则以线性减少的概率进行搜索。\n\n## 纵向交叉\n纵向交叉是种群每个个体不同维之间所产生的交叉运算。\n1. 获取父代种群X(横向交叉产生的占优解)，种群规模大小为矩阵X的行数M，问题解空间的维数为矩阵X的列数D\n2. 对父代种群X每一维进行归一化操作；\n3. 对种群中所有的维进行不重复两两随机配对，方法为：在1至N_2之间产生N_2个不重复的整数系列，将配对序号保存在矩阵B中；\n4. 按顺序从矩阵B中取出相邻两个数即为配对的维序号d_1,d_2;\n5. 在纵向交叉概率为P_{(vc)}条件下，种群中所有的个体X(i)。根据公式产生子代:   \n![](/assets/images/180524_4.jpg) \n式中MS_{(vc)}(i,d_1)是个体X(i)的第d_1维和第d_2维通过纵向交叉产生的第d_1维子代。\n6. 重复步骤4和步骤5；\n7. 对MS_{(vc)}进行反归一化操作，最终获得纵向交叉产生的中庸解，保存在中庸解矩阵中；\n8. 执行竞争，获取纵向交叉占优解，保存在DS_{(vc)}中。\n\n纵向交叉发生在同一个体不同维之间，能有效防止维局部最优。防止不同维变量交叉超出维度限定，需要归一化处理。","slug":"纵横交叉算法","published":1,"updated":"2021-11-08T00:00:42.554Z","photos":[],"link":"","_id":"cl4kyqfvz001b20r54yzqfhrq","content":"<p><img src=\"/assets/images/180524_1.jpg\"><br>纵横交叉算法是一种新型的群体智能搜索算法，<br>据<a href=\"http://kns.cnki.net/kcms/detail/detail.aspx?FileName=SJES14061700208503&DBName=SJES&DBCode=SJES&v=Mjc1MDZyaTNXY3hEOGVXUUwzd1plWnVIaW5oVTdiSUoxb1JhUlE9TmlmT2ZiSzhIdGZOcUk5Rlp1c0hDWHc2b0JFYTYwdDRUZw==\">知网可查</a>，该算法好像由2014年出自广东工业大学。</p>\n<span id=\"more\"></span>\n<p>纵横交叉算法受孔子中庸思想和遗传算法的启发，采用双向搜索机制，即横向交叉和纵向交叉。<br>在父代种群进化迭代的过程中分别在横向和纵向两个方向各自产生中庸解，并通过竞争机制与父代进行竞争，优胜者保留作为新的父代，适应度较差的将被淘汰，<br>竞争机制可以保证种群中的个体粒子始终维持历史上的最优，且这种迭代方式可以大大加速种群的收敛速度。</p>\n<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>种群由个体例子组成，搜寻方式为双向交叉，<br>迭代过程由两种交叉方式在每代中交替进行，<br>每次迭代进行竞争，择优保留位新的种群。</p>\n<p>算法流程图如下：<br><img src=\"/assets/images/180524_2.jpg\">  </p>\n<h2 id=\"横向交叉\"><a href=\"#横向交叉\" class=\"headerlink\" title=\"横向交叉\"></a>横向交叉</h2><p>横向交叉是在群体中两个不同个体粒子所有维之间进行一种算数交叉。</p>\n<ol>\n<li>获取父代种群X，种群规模大小为矩阵X的行数M，问题解空间的维数为矩阵X的列数D；</li>\n<li>对父代种群X中所有个体粒子不重复随机配对，方法为：在1至N_1之间产生N_1个不重复的整数系列，将配对序号保存在矩阵B中；</li>\n<li>从矩阵B中去处相邻两个数作为父代配对例子的编号i，j;</li>\n<li>父代粒子X(i)和X(j)在第d维进行横向交叉运算，则它的子代繁殖采用如下公式：<br><img src=\"/assets/images/180524_3.jpg\"><br>式中，r是[0，1]上均匀分布的随机数；c是[-1,1]上均匀分布的随机数；X(i,d)和X(j,d)分别是父代种群中的个体粒子X(i)和X(j)的第d维；MS_{(hc)}分别是X(i,d)和X(j,d)通过横向交叉产生的第d维子代。</li>\n<li>重复步骤3和步骤4，最终获得横向交叉产生的中庸解，保存在中庸解矩阵MS_{(hc)}中；</li>\n<li>执行竞争，获取横向交叉占优解，保存在DS_{(hc)}中。</li>\n</ol>\n<p>横向交叉始终在内部空间以较大的概率进行搜索，而对其外圈空间则以线性减少的概率进行搜索。</p>\n<h2 id=\"纵向交叉\"><a href=\"#纵向交叉\" class=\"headerlink\" title=\"纵向交叉\"></a>纵向交叉</h2><p>纵向交叉是种群每个个体不同维之间所产生的交叉运算。</p>\n<ol>\n<li>获取父代种群X(横向交叉产生的占优解)，种群规模大小为矩阵X的行数M，问题解空间的维数为矩阵X的列数D</li>\n<li>对父代种群X每一维进行归一化操作；</li>\n<li>对种群中所有的维进行不重复两两随机配对，方法为：在1至N_2之间产生N_2个不重复的整数系列，将配对序号保存在矩阵B中；</li>\n<li>按顺序从矩阵B中取出相邻两个数即为配对的维序号d_1,d_2;</li>\n<li>在纵向交叉概率为P_{(vc)}条件下，种群中所有的个体X(i)。根据公式产生子代:<br><img src=\"/assets/images/180524_4.jpg\"><br>式中MS_{(vc)}(i,d_1)是个体X(i)的第d_1维和第d_2维通过纵向交叉产生的第d_1维子代。</li>\n<li>重复步骤4和步骤5；</li>\n<li>对MS_{(vc)}进行反归一化操作，最终获得纵向交叉产生的中庸解，保存在中庸解矩阵中；</li>\n<li>执行竞争，获取纵向交叉占优解，保存在DS_{(vc)}中。</li>\n</ol>\n<p>纵向交叉发生在同一个体不同维之间，能有效防止维局部最优。防止不同维变量交叉超出维度限定，需要归一化处理。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/assets/images/180524_1.jpg\"><br>纵横交叉算法是一种新型的群体智能搜索算法，<br>据<a href=\"http://kns.cnki.net/kcms/detail/detail.aspx?FileName=SJES14061700208503&DBName=SJES&DBCode=SJES&v=Mjc1MDZyaTNXY3hEOGVXUUwzd1plWnVIaW5oVTdiSUoxb1JhUlE9TmlmT2ZiSzhIdGZOcUk5Rlp1c0hDWHc2b0JFYTYwdDRUZw==\">知网可查</a>，该算法好像由2014年出自广东工业大学。</p>","more":"<p>纵横交叉算法受孔子中庸思想和遗传算法的启发，采用双向搜索机制，即横向交叉和纵向交叉。<br>在父代种群进化迭代的过程中分别在横向和纵向两个方向各自产生中庸解，并通过竞争机制与父代进行竞争，优胜者保留作为新的父代，适应度较差的将被淘汰，<br>竞争机制可以保证种群中的个体粒子始终维持历史上的最优，且这种迭代方式可以大大加速种群的收敛速度。</p>\n<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>种群由个体例子组成，搜寻方式为双向交叉，<br>迭代过程由两种交叉方式在每代中交替进行，<br>每次迭代进行竞争，择优保留位新的种群。</p>\n<p>算法流程图如下：<br><img src=\"/assets/images/180524_2.jpg\">  </p>\n<h2 id=\"横向交叉\"><a href=\"#横向交叉\" class=\"headerlink\" title=\"横向交叉\"></a>横向交叉</h2><p>横向交叉是在群体中两个不同个体粒子所有维之间进行一种算数交叉。</p>\n<ol>\n<li>获取父代种群X，种群规模大小为矩阵X的行数M，问题解空间的维数为矩阵X的列数D；</li>\n<li>对父代种群X中所有个体粒子不重复随机配对，方法为：在1至N_1之间产生N_1个不重复的整数系列，将配对序号保存在矩阵B中；</li>\n<li>从矩阵B中去处相邻两个数作为父代配对例子的编号i，j;</li>\n<li>父代粒子X(i)和X(j)在第d维进行横向交叉运算，则它的子代繁殖采用如下公式：<br><img src=\"/assets/images/180524_3.jpg\"><br>式中，r是[0，1]上均匀分布的随机数；c是[-1,1]上均匀分布的随机数；X(i,d)和X(j,d)分别是父代种群中的个体粒子X(i)和X(j)的第d维；MS_{(hc)}分别是X(i,d)和X(j,d)通过横向交叉产生的第d维子代。</li>\n<li>重复步骤3和步骤4，最终获得横向交叉产生的中庸解，保存在中庸解矩阵MS_{(hc)}中；</li>\n<li>执行竞争，获取横向交叉占优解，保存在DS_{(hc)}中。</li>\n</ol>\n<p>横向交叉始终在内部空间以较大的概率进行搜索，而对其外圈空间则以线性减少的概率进行搜索。</p>\n<h2 id=\"纵向交叉\"><a href=\"#纵向交叉\" class=\"headerlink\" title=\"纵向交叉\"></a>纵向交叉</h2><p>纵向交叉是种群每个个体不同维之间所产生的交叉运算。</p>\n<ol>\n<li>获取父代种群X(横向交叉产生的占优解)，种群规模大小为矩阵X的行数M，问题解空间的维数为矩阵X的列数D</li>\n<li>对父代种群X每一维进行归一化操作；</li>\n<li>对种群中所有的维进行不重复两两随机配对，方法为：在1至N_2之间产生N_2个不重复的整数系列，将配对序号保存在矩阵B中；</li>\n<li>按顺序从矩阵B中取出相邻两个数即为配对的维序号d_1,d_2;</li>\n<li>在纵向交叉概率为P_{(vc)}条件下，种群中所有的个体X(i)。根据公式产生子代:<br><img src=\"/assets/images/180524_4.jpg\"><br>式中MS_{(vc)}(i,d_1)是个体X(i)的第d_1维和第d_2维通过纵向交叉产生的第d_1维子代。</li>\n<li>重复步骤4和步骤5；</li>\n<li>对MS_{(vc)}进行反归一化操作，最终获得纵向交叉产生的中庸解，保存在中庸解矩阵中；</li>\n<li>执行竞争，获取纵向交叉占优解，保存在DS_{(vc)}中。</li>\n</ol>\n<p>纵向交叉发生在同一个体不同维之间，能有效防止维局部最优。防止不同维变量交叉超出维度限定，需要归一化处理。</p>"},{"layout":"post","title":"经验模态分解","comments":1,"date":"2018-04-16T13:34:03.000Z","_content":"![](/assets/images/180416.jpg)  \nEMD经验模态分解是黄锷（N.E.Huang）与于1998年提出的一种自适应信号时频处理方法，\n适用于非线性非平稳信号的分析处理。\n<!--more-->\n摘一段来自维基百科的简介：\n>**经验模态分解**（Empirical Mode Decomposition，简称EMD)方法被认为是2000年来以傅立叶变换为基础的线性和稳态频谱分析的一个重大突破，该方法是依据数据自身的时间尺度特征来进行信号分解，无须预先设定任何基函数。该方法的关键是经验模式分解，它能使复杂信号分解为有限个本征模函数（Intrinsic Mode Function，简称IMF），所分解出来的各IMF分量包含了原信号的不同时间尺度的局部特征信号。经验模态分解法能使非平稳数据进行平稳化处理，再进行希尔伯特变换获得时频谱图，得到有物理意义的频率。与短时傅立叶变换、小波分解等方法相比，这种方法是直观的、直接的、后验的和自适应的，因为基函数是由数据本身所分解得到。由于分解是基于信号序列时间尺度的局部特性，因此具有自适应性。\n>\n\n早期由于技术手段的限制，对信号的分析只能停留在时域或者频域上，\n简单信号还能适用，但对于频率不停变化的非平稳信号来说就不太够用了，\n例如无法得到信号的频率和时间对映的变化。\n\n若干年前，Hilbert提出了一个瞬时频率的概念，采用的方法就是希尔伯特变换。\n关于瞬时频率的定义不太唯一，但利用希尔伯特变换求取瞬时频率的话，有一个先决条件，\n要求信号关于0轴对称，也就是说现实中大部分的信号求取瞬时频率是没有意义的。\n\n于是黄锷先生基于这个问题，提出了EMD方法，它能将复杂信号分解为有限个IMF分量，\n各IMF分量包含原信号的不同时间尺度的局部特征信号。\n\nIMF定义：\n>1.函数在整个时间范围内，局部极值点和过零点的数目相等，或者最多差一个；\n2.任意时刻点，局部最大值的包络线(上包络线)和局部最小值的包络线(下包络线)平均必须为0。\n>\n\n经过EMD分解的到的IMF分量大致满足信号关于0轴对称这一要求，于是信号的瞬时频率开始有了意义，\n经验模态分解和希尔伯特变换合起来也被称为希尔伯特黄变换。\n\n### EMD步骤\n1.寻找信号局部极大值和极小值点；\n2.利用三次自然样条连接极大值点和极小值点，构成上下包络线；\n3.用原始信号减去上下包络线的均值，判断差值是否符合IMF定义；\n4.若符合，将此差值作为IMF分量，原始信号减去此IMF分量后作为新的信号；\n5.重复上述步骤，直至剩余信号为一个单调函数。\n\n### EMD不足\nEMD方法也有一些不足的地方，比如说它用到了局部极大极小值，但信号两端的极值难以判断，\n就有可能产生端点效应，且比较容易产生模态混叠现象。\n\n之后有其他学者对EMD进行改进，提出了EEMD和CEEMD等的方法，能较为有效的解决模态混叠的问题。","source":"_posts/经验模态分解.md","raw":"---\nlayout: post\ntitle: 经验模态分解\ncomments: true\ndate: 2018-04-16 21:34:03\ntags:\n- 算法\n---\n![](/assets/images/180416.jpg)  \nEMD经验模态分解是黄锷（N.E.Huang）与于1998年提出的一种自适应信号时频处理方法，\n适用于非线性非平稳信号的分析处理。\n<!--more-->\n摘一段来自维基百科的简介：\n>**经验模态分解**（Empirical Mode Decomposition，简称EMD)方法被认为是2000年来以傅立叶变换为基础的线性和稳态频谱分析的一个重大突破，该方法是依据数据自身的时间尺度特征来进行信号分解，无须预先设定任何基函数。该方法的关键是经验模式分解，它能使复杂信号分解为有限个本征模函数（Intrinsic Mode Function，简称IMF），所分解出来的各IMF分量包含了原信号的不同时间尺度的局部特征信号。经验模态分解法能使非平稳数据进行平稳化处理，再进行希尔伯特变换获得时频谱图，得到有物理意义的频率。与短时傅立叶变换、小波分解等方法相比，这种方法是直观的、直接的、后验的和自适应的，因为基函数是由数据本身所分解得到。由于分解是基于信号序列时间尺度的局部特性，因此具有自适应性。\n>\n\n早期由于技术手段的限制，对信号的分析只能停留在时域或者频域上，\n简单信号还能适用，但对于频率不停变化的非平稳信号来说就不太够用了，\n例如无法得到信号的频率和时间对映的变化。\n\n若干年前，Hilbert提出了一个瞬时频率的概念，采用的方法就是希尔伯特变换。\n关于瞬时频率的定义不太唯一，但利用希尔伯特变换求取瞬时频率的话，有一个先决条件，\n要求信号关于0轴对称，也就是说现实中大部分的信号求取瞬时频率是没有意义的。\n\n于是黄锷先生基于这个问题，提出了EMD方法，它能将复杂信号分解为有限个IMF分量，\n各IMF分量包含原信号的不同时间尺度的局部特征信号。\n\nIMF定义：\n>1.函数在整个时间范围内，局部极值点和过零点的数目相等，或者最多差一个；\n2.任意时刻点，局部最大值的包络线(上包络线)和局部最小值的包络线(下包络线)平均必须为0。\n>\n\n经过EMD分解的到的IMF分量大致满足信号关于0轴对称这一要求，于是信号的瞬时频率开始有了意义，\n经验模态分解和希尔伯特变换合起来也被称为希尔伯特黄变换。\n\n### EMD步骤\n1.寻找信号局部极大值和极小值点；\n2.利用三次自然样条连接极大值点和极小值点，构成上下包络线；\n3.用原始信号减去上下包络线的均值，判断差值是否符合IMF定义；\n4.若符合，将此差值作为IMF分量，原始信号减去此IMF分量后作为新的信号；\n5.重复上述步骤，直至剩余信号为一个单调函数。\n\n### EMD不足\nEMD方法也有一些不足的地方，比如说它用到了局部极大极小值，但信号两端的极值难以判断，\n就有可能产生端点效应，且比较容易产生模态混叠现象。\n\n之后有其他学者对EMD进行改进，提出了EEMD和CEEMD等的方法，能较为有效的解决模态混叠的问题。","slug":"经验模态分解","published":1,"updated":"2021-01-16T10:10:12.000Z","photos":[],"link":"","_id":"cl4kyqfw2001d20r53dmycp2c","content":"<p><img src=\"/assets/images/180416.jpg\"><br>EMD经验模态分解是黄锷（N.E.Huang）与于1998年提出的一种自适应信号时频处理方法，<br>适用于非线性非平稳信号的分析处理。</p>\n<span id=\"more\"></span>\n<p>摘一段来自维基百科的简介：</p>\n<blockquote>\n<p><strong>经验模态分解</strong>（Empirical Mode Decomposition，简称EMD)方法被认为是2000年来以傅立叶变换为基础的线性和稳态频谱分析的一个重大突破，该方法是依据数据自身的时间尺度特征来进行信号分解，无须预先设定任何基函数。该方法的关键是经验模式分解，它能使复杂信号分解为有限个本征模函数（Intrinsic Mode Function，简称IMF），所分解出来的各IMF分量包含了原信号的不同时间尺度的局部特征信号。经验模态分解法能使非平稳数据进行平稳化处理，再进行希尔伯特变换获得时频谱图，得到有物理意义的频率。与短时傅立叶变换、小波分解等方法相比，这种方法是直观的、直接的、后验的和自适应的，因为基函数是由数据本身所分解得到。由于分解是基于信号序列时间尺度的局部特性，因此具有自适应性。</p>\n</blockquote>\n<p>早期由于技术手段的限制，对信号的分析只能停留在时域或者频域上，<br>简单信号还能适用，但对于频率不停变化的非平稳信号来说就不太够用了，<br>例如无法得到信号的频率和时间对映的变化。</p>\n<p>若干年前，Hilbert提出了一个瞬时频率的概念，采用的方法就是希尔伯特变换。<br>关于瞬时频率的定义不太唯一，但利用希尔伯特变换求取瞬时频率的话，有一个先决条件，<br>要求信号关于0轴对称，也就是说现实中大部分的信号求取瞬时频率是没有意义的。</p>\n<p>于是黄锷先生基于这个问题，提出了EMD方法，它能将复杂信号分解为有限个IMF分量，<br>各IMF分量包含原信号的不同时间尺度的局部特征信号。</p>\n<p>IMF定义：</p>\n<blockquote>\n<p>1.函数在整个时间范围内，局部极值点和过零点的数目相等，或者最多差一个；<br>2.任意时刻点，局部最大值的包络线(上包络线)和局部最小值的包络线(下包络线)平均必须为0。</p>\n</blockquote>\n<p>经过EMD分解的到的IMF分量大致满足信号关于0轴对称这一要求，于是信号的瞬时频率开始有了意义，<br>经验模态分解和希尔伯特变换合起来也被称为希尔伯特黄变换。</p>\n<h3 id=\"EMD步骤\"><a href=\"#EMD步骤\" class=\"headerlink\" title=\"EMD步骤\"></a>EMD步骤</h3><p>1.寻找信号局部极大值和极小值点；<br>2.利用三次自然样条连接极大值点和极小值点，构成上下包络线；<br>3.用原始信号减去上下包络线的均值，判断差值是否符合IMF定义；<br>4.若符合，将此差值作为IMF分量，原始信号减去此IMF分量后作为新的信号；<br>5.重复上述步骤，直至剩余信号为一个单调函数。</p>\n<h3 id=\"EMD不足\"><a href=\"#EMD不足\" class=\"headerlink\" title=\"EMD不足\"></a>EMD不足</h3><p>EMD方法也有一些不足的地方，比如说它用到了局部极大极小值，但信号两端的极值难以判断，<br>就有可能产生端点效应，且比较容易产生模态混叠现象。</p>\n<p>之后有其他学者对EMD进行改进，提出了EEMD和CEEMD等的方法，能较为有效的解决模态混叠的问题。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/assets/images/180416.jpg\"><br>EMD经验模态分解是黄锷（N.E.Huang）与于1998年提出的一种自适应信号时频处理方法，<br>适用于非线性非平稳信号的分析处理。</p>","more":"<p>摘一段来自维基百科的简介：</p>\n<blockquote>\n<p><strong>经验模态分解</strong>（Empirical Mode Decomposition，简称EMD)方法被认为是2000年来以傅立叶变换为基础的线性和稳态频谱分析的一个重大突破，该方法是依据数据自身的时间尺度特征来进行信号分解，无须预先设定任何基函数。该方法的关键是经验模式分解，它能使复杂信号分解为有限个本征模函数（Intrinsic Mode Function，简称IMF），所分解出来的各IMF分量包含了原信号的不同时间尺度的局部特征信号。经验模态分解法能使非平稳数据进行平稳化处理，再进行希尔伯特变换获得时频谱图，得到有物理意义的频率。与短时傅立叶变换、小波分解等方法相比，这种方法是直观的、直接的、后验的和自适应的，因为基函数是由数据本身所分解得到。由于分解是基于信号序列时间尺度的局部特性，因此具有自适应性。</p>\n</blockquote>\n<p>早期由于技术手段的限制，对信号的分析只能停留在时域或者频域上，<br>简单信号还能适用，但对于频率不停变化的非平稳信号来说就不太够用了，<br>例如无法得到信号的频率和时间对映的变化。</p>\n<p>若干年前，Hilbert提出了一个瞬时频率的概念，采用的方法就是希尔伯特变换。<br>关于瞬时频率的定义不太唯一，但利用希尔伯特变换求取瞬时频率的话，有一个先决条件，<br>要求信号关于0轴对称，也就是说现实中大部分的信号求取瞬时频率是没有意义的。</p>\n<p>于是黄锷先生基于这个问题，提出了EMD方法，它能将复杂信号分解为有限个IMF分量，<br>各IMF分量包含原信号的不同时间尺度的局部特征信号。</p>\n<p>IMF定义：</p>\n<blockquote>\n<p>1.函数在整个时间范围内，局部极值点和过零点的数目相等，或者最多差一个；<br>2.任意时刻点，局部最大值的包络线(上包络线)和局部最小值的包络线(下包络线)平均必须为0。</p>\n</blockquote>\n<p>经过EMD分解的到的IMF分量大致满足信号关于0轴对称这一要求，于是信号的瞬时频率开始有了意义，<br>经验模态分解和希尔伯特变换合起来也被称为希尔伯特黄变换。</p>\n<h3 id=\"EMD步骤\"><a href=\"#EMD步骤\" class=\"headerlink\" title=\"EMD步骤\"></a>EMD步骤</h3><p>1.寻找信号局部极大值和极小值点；<br>2.利用三次自然样条连接极大值点和极小值点，构成上下包络线；<br>3.用原始信号减去上下包络线的均值，判断差值是否符合IMF定义；<br>4.若符合，将此差值作为IMF分量，原始信号减去此IMF分量后作为新的信号；<br>5.重复上述步骤，直至剩余信号为一个单调函数。</p>\n<h3 id=\"EMD不足\"><a href=\"#EMD不足\" class=\"headerlink\" title=\"EMD不足\"></a>EMD不足</h3><p>EMD方法也有一些不足的地方，比如说它用到了局部极大极小值，但信号两端的极值难以判断，<br>就有可能产生端点效应，且比较容易产生模态混叠现象。</p>\n<p>之后有其他学者对EMD进行改进，提出了EEMD和CEEMD等的方法，能较为有效的解决模态混叠的问题。</p>"},{"layout":"post","title":"给Hexo添加Valine评论","comments":1,"date":"2020-01-13T13:03:28.000Z","_content":"博客之前一直没有评论系统，因为刚建博客的时候，市面上还能用的只有畅言和Disqus，而Disqus需要魔法，畅言需要备案。\n<!--more-->\n后来出了个Gitment，是基于GitHub的，但也需要有账号才能评论，所以一直没去搞，直到前几天发现一个新的评论系统[Valine](https://valine.js.org/)，它不需要后端，而且支持Emoji，马上搞起。\n\n>Valine 诞生于2017年8月7日，是一款基于LeanCloud的快速、简洁且高效的无后端评论系统。\n\n>理论上支持但不限于静态博客，目前已有Hexo、Jekyll、Typecho、Hugo、Ghost 等博客程序在使用Valine。\n\n我的博客基于Hexo，以下教程针对Hexo博客，参考[yilia大佬的教程](https://github.com/litten/hexo-theme-yilia/pull/646)。\n\n因为Valine是基于[LeanCloud](https://www.leancloud.cn/)的，所以我们需要先在官网上注册一个账号，如果只是想用Valine的评论功能，那这个LeanCloud可以简单看作为一个存储评论的仓库。\n\n1.注册成功后，进入控制台，随便创建一个应用；\n![](/assets/images/200113_1.jpg)\n2.进入设置，点击左侧应用Keys，记录一下AppID和AppKey；\n![](/assets/images/200113_2.jpg)\n3.点击左侧安全中心，因为只是用来存储评论，所以关掉其他功能；\n![](/assets/images/200113_3.jpg)\n4.在下方Web安全域名处添加你的博客域名，防止记录到别的网站评论；\n![](/assets/images/200113_4.jpg)\n5.在Hexo博客主题的配置文件_config.yml中添加如下代码；\n``` bash\nvaline: \n appid: '步骤2记录的AppID'\n appkey: '步骤2记录的AppKey'\n verify: false\n notify: false\n avatar: mm\n placeholder: '评论框占位符'\n```\n6.在主题文件layout/_partial/article.ejs中添加如下代码；\n\n``` bash\n  <% if (theme.valine && theme.valine.appid && theme.valine.appkey){ %>\n    <section id=\"comments\" style=\"margin:10px;padding:10px;background:#fff;\">\n      <%- partial('post/valine', {\n        key: post.slug,\n        title: post.title,\n        url: config.url+url_for(post.path)\n        }) %>\n    </section>\n  <% } %>\n<% } %>\n```\n\n7.在主题文件layout/_partial/post/内新建valine.ejs文件，代码如下：\n``` bash\n<div id=\"vcomment\" class=\"comment\"></div> \n<script src=\"//cdn1.lncld.net/static/js/3.0.4/av-min.js\"></script>\n<script src=\"//unpkg.com/valine/dist/Valine.min.js\"></script>\n<script>\n   var notify = '<%= theme.valine.notify %>' == true ? true : false;\n   var verify = '<%= theme.valine.verify %>' == true ? true : false;\n    window.onload = function() {\n        new Valine({\n            el: '.comment',\n            notify: notify,\n            verify: verify,\n            app_id: \"<%= theme.valine.appid %>\",\n            app_key: \"<%= theme.valine.appkey %>\",\n            placeholder: \"<%= theme.valine.placeholder %>\",\n            avatar:\"<%= theme.valine.avatar %>\"\n        });\n    }\n</script>\n```\n\n8.重新编译下Hexo，评论系统就完成了。\n\n``` bash\nhexo g\nhexo d\n```\n\n目前评论系统的头像是基于[Gravatar](http://cn.gravatar.com/)的，如果想使用自己的头像，需要自行注册，在评论的时候填写注册邮箱即可。\n\n默认的匿名头像由如下7种，可自行修改步骤5中的avatar: mm；\n![](/assets/images/200113_5.jpg)","source":"_posts/给Hexo添加Valine评论.md","raw":"---\nlayout: post\ntitle: 给Hexo添加Valine评论\ncomments: true\ntags:\n  - Hexo\ndate: 2020-01-13 21:03:28\n---\n博客之前一直没有评论系统，因为刚建博客的时候，市面上还能用的只有畅言和Disqus，而Disqus需要魔法，畅言需要备案。\n<!--more-->\n后来出了个Gitment，是基于GitHub的，但也需要有账号才能评论，所以一直没去搞，直到前几天发现一个新的评论系统[Valine](https://valine.js.org/)，它不需要后端，而且支持Emoji，马上搞起。\n\n>Valine 诞生于2017年8月7日，是一款基于LeanCloud的快速、简洁且高效的无后端评论系统。\n\n>理论上支持但不限于静态博客，目前已有Hexo、Jekyll、Typecho、Hugo、Ghost 等博客程序在使用Valine。\n\n我的博客基于Hexo，以下教程针对Hexo博客，参考[yilia大佬的教程](https://github.com/litten/hexo-theme-yilia/pull/646)。\n\n因为Valine是基于[LeanCloud](https://www.leancloud.cn/)的，所以我们需要先在官网上注册一个账号，如果只是想用Valine的评论功能，那这个LeanCloud可以简单看作为一个存储评论的仓库。\n\n1.注册成功后，进入控制台，随便创建一个应用；\n![](/assets/images/200113_1.jpg)\n2.进入设置，点击左侧应用Keys，记录一下AppID和AppKey；\n![](/assets/images/200113_2.jpg)\n3.点击左侧安全中心，因为只是用来存储评论，所以关掉其他功能；\n![](/assets/images/200113_3.jpg)\n4.在下方Web安全域名处添加你的博客域名，防止记录到别的网站评论；\n![](/assets/images/200113_4.jpg)\n5.在Hexo博客主题的配置文件_config.yml中添加如下代码；\n``` bash\nvaline: \n appid: '步骤2记录的AppID'\n appkey: '步骤2记录的AppKey'\n verify: false\n notify: false\n avatar: mm\n placeholder: '评论框占位符'\n```\n6.在主题文件layout/_partial/article.ejs中添加如下代码；\n\n``` bash\n  <% if (theme.valine && theme.valine.appid && theme.valine.appkey){ %>\n    <section id=\"comments\" style=\"margin:10px;padding:10px;background:#fff;\">\n      <%- partial('post/valine', {\n        key: post.slug,\n        title: post.title,\n        url: config.url+url_for(post.path)\n        }) %>\n    </section>\n  <% } %>\n<% } %>\n```\n\n7.在主题文件layout/_partial/post/内新建valine.ejs文件，代码如下：\n``` bash\n<div id=\"vcomment\" class=\"comment\"></div> \n<script src=\"//cdn1.lncld.net/static/js/3.0.4/av-min.js\"></script>\n<script src=\"//unpkg.com/valine/dist/Valine.min.js\"></script>\n<script>\n   var notify = '<%= theme.valine.notify %>' == true ? true : false;\n   var verify = '<%= theme.valine.verify %>' == true ? true : false;\n    window.onload = function() {\n        new Valine({\n            el: '.comment',\n            notify: notify,\n            verify: verify,\n            app_id: \"<%= theme.valine.appid %>\",\n            app_key: \"<%= theme.valine.appkey %>\",\n            placeholder: \"<%= theme.valine.placeholder %>\",\n            avatar:\"<%= theme.valine.avatar %>\"\n        });\n    }\n</script>\n```\n\n8.重新编译下Hexo，评论系统就完成了。\n\n``` bash\nhexo g\nhexo d\n```\n\n目前评论系统的头像是基于[Gravatar](http://cn.gravatar.com/)的，如果想使用自己的头像，需要自行注册，在评论的时候填写注册邮箱即可。\n\n默认的匿名头像由如下7种，可自行修改步骤5中的avatar: mm；\n![](/assets/images/200113_5.jpg)","slug":"给Hexo添加Valine评论","published":1,"updated":"2021-11-28T14:50:33.912Z","photos":[],"link":"","_id":"cl4kyqfw5001f20r55ww80fqf","content":"<p>博客之前一直没有评论系统，因为刚建博客的时候，市面上还能用的只有畅言和Disqus，而Disqus需要魔法，畅言需要备案。</p>\n<span id=\"more\"></span>\n<p>后来出了个Gitment，是基于GitHub的，但也需要有账号才能评论，所以一直没去搞，直到前几天发现一个新的评论系统<a href=\"https://valine.js.org/\">Valine</a>，它不需要后端，而且支持Emoji，马上搞起。</p>\n<blockquote>\n<p>Valine 诞生于2017年8月7日，是一款基于LeanCloud的快速、简洁且高效的无后端评论系统。</p>\n</blockquote>\n<blockquote>\n<p>理论上支持但不限于静态博客，目前已有Hexo、Jekyll、Typecho、Hugo、Ghost 等博客程序在使用Valine。</p>\n</blockquote>\n<p>我的博客基于Hexo，以下教程针对Hexo博客，参考<a href=\"https://github.com/litten/hexo-theme-yilia/pull/646\">yilia大佬的教程</a>。</p>\n<p>因为Valine是基于<a href=\"https://www.leancloud.cn/\">LeanCloud</a>的，所以我们需要先在官网上注册一个账号，如果只是想用Valine的评论功能，那这个LeanCloud可以简单看作为一个存储评论的仓库。</p>\n<p>1.注册成功后，进入控制台，随便创建一个应用；<br><img src=\"/assets/images/200113_1.jpg\"><br>2.进入设置，点击左侧应用Keys，记录一下AppID和AppKey；<br><img src=\"/assets/images/200113_2.jpg\"><br>3.点击左侧安全中心，因为只是用来存储评论，所以关掉其他功能；<br><img src=\"/assets/images/200113_3.jpg\"><br>4.在下方Web安全域名处添加你的博客域名，防止记录到别的网站评论；<br><img src=\"/assets/images/200113_4.jpg\"><br>5.在Hexo博客主题的配置文件_config.yml中添加如下代码；</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">valine: </span><br><span class=\"line\"> appid: <span class=\"string\">&#x27;步骤2记录的AppID&#x27;</span></span><br><span class=\"line\"> appkey: <span class=\"string\">&#x27;步骤2记录的AppKey&#x27;</span></span><br><span class=\"line\"> verify: <span class=\"literal\">false</span></span><br><span class=\"line\"> notify: <span class=\"literal\">false</span></span><br><span class=\"line\"> avatar: mm</span><br><span class=\"line\"> placeholder: <span class=\"string\">&#x27;评论框占位符&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>6.在主题文件layout/_partial/article.ejs中添加如下代码；</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;% <span class=\"keyword\">if</span> (theme.valine &amp;&amp; theme.valine.appid &amp;&amp; theme.valine.appkey)&#123; %&gt;</span><br><span class=\"line\">    &lt;section <span class=\"built_in\">id</span>=<span class=\"string\">&quot;comments&quot;</span> style=<span class=\"string\">&quot;margin:10px;padding:10px;background:#fff;&quot;</span>&gt;</span><br><span class=\"line\">      &lt;%- partial(<span class=\"string\">&#x27;post/valine&#x27;</span>, &#123;</span><br><span class=\"line\">        key: post.slug,</span><br><span class=\"line\">        title: post.title,</span><br><span class=\"line\">        url: config.url+url_for(post.path)</span><br><span class=\"line\">        &#125;) %&gt;</span><br><span class=\"line\">    &lt;/section&gt;</span><br><span class=\"line\">  &lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n\n<p>7.在主题文件layout/_partial/post/内新建valine.ejs文件，代码如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"built_in\">id</span>=<span class=\"string\">&quot;vcomment&quot;</span> class=<span class=\"string\">&quot;comment&quot;</span>&gt;&lt;/div&gt; </span><br><span class=\"line\">&lt;script src=<span class=\"string\">&quot;//cdn1.lncld.net/static/js/3.0.4/av-min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">&quot;//unpkg.com/valine/dist/Valine.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">   var notify = <span class=\"string\">&#x27;&lt;%= theme.valine.notify %&gt;&#x27;</span> == <span class=\"literal\">true</span> ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">   var verify = <span class=\"string\">&#x27;&lt;%= theme.valine.verify %&gt;&#x27;</span> == <span class=\"literal\">true</span> ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">    window.onload = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        new Valine(&#123;</span><br><span class=\"line\">            el: <span class=\"string\">&#x27;.comment&#x27;</span>,</span><br><span class=\"line\">            notify: notify,</span><br><span class=\"line\">            verify: verify,</span><br><span class=\"line\">            app_id: <span class=\"string\">&quot;&lt;%= theme.valine.appid %&gt;&quot;</span>,</span><br><span class=\"line\">            app_key: <span class=\"string\">&quot;&lt;%= theme.valine.appkey %&gt;&quot;</span>,</span><br><span class=\"line\">            placeholder: <span class=\"string\">&quot;&lt;%= theme.valine.placeholder %&gt;&quot;</span>,</span><br><span class=\"line\">            avatar:<span class=\"string\">&quot;&lt;%= theme.valine.avatar %&gt;&quot;</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>8.重新编译下Hexo，评论系统就完成了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p>目前评论系统的头像是基于<a href=\"http://cn.gravatar.com/\">Gravatar</a>的，如果想使用自己的头像，需要自行注册，在评论的时候填写注册邮箱即可。</p>\n<p>默认的匿名头像由如下7种，可自行修改步骤5中的avatar: mm；<br><img src=\"/assets/images/200113_5.jpg\"></p>\n","site":{"data":{}},"excerpt":"<p>博客之前一直没有评论系统，因为刚建博客的时候，市面上还能用的只有畅言和Disqus，而Disqus需要魔法，畅言需要备案。</p>","more":"<p>后来出了个Gitment，是基于GitHub的，但也需要有账号才能评论，所以一直没去搞，直到前几天发现一个新的评论系统<a href=\"https://valine.js.org/\">Valine</a>，它不需要后端，而且支持Emoji，马上搞起。</p>\n<blockquote>\n<p>Valine 诞生于2017年8月7日，是一款基于LeanCloud的快速、简洁且高效的无后端评论系统。</p>\n</blockquote>\n<blockquote>\n<p>理论上支持但不限于静态博客，目前已有Hexo、Jekyll、Typecho、Hugo、Ghost 等博客程序在使用Valine。</p>\n</blockquote>\n<p>我的博客基于Hexo，以下教程针对Hexo博客，参考<a href=\"https://github.com/litten/hexo-theme-yilia/pull/646\">yilia大佬的教程</a>。</p>\n<p>因为Valine是基于<a href=\"https://www.leancloud.cn/\">LeanCloud</a>的，所以我们需要先在官网上注册一个账号，如果只是想用Valine的评论功能，那这个LeanCloud可以简单看作为一个存储评论的仓库。</p>\n<p>1.注册成功后，进入控制台，随便创建一个应用；<br><img src=\"/assets/images/200113_1.jpg\"><br>2.进入设置，点击左侧应用Keys，记录一下AppID和AppKey；<br><img src=\"/assets/images/200113_2.jpg\"><br>3.点击左侧安全中心，因为只是用来存储评论，所以关掉其他功能；<br><img src=\"/assets/images/200113_3.jpg\"><br>4.在下方Web安全域名处添加你的博客域名，防止记录到别的网站评论；<br><img src=\"/assets/images/200113_4.jpg\"><br>5.在Hexo博客主题的配置文件_config.yml中添加如下代码；</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">valine: </span><br><span class=\"line\"> appid: <span class=\"string\">&#x27;步骤2记录的AppID&#x27;</span></span><br><span class=\"line\"> appkey: <span class=\"string\">&#x27;步骤2记录的AppKey&#x27;</span></span><br><span class=\"line\"> verify: <span class=\"literal\">false</span></span><br><span class=\"line\"> notify: <span class=\"literal\">false</span></span><br><span class=\"line\"> avatar: mm</span><br><span class=\"line\"> placeholder: <span class=\"string\">&#x27;评论框占位符&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>6.在主题文件layout/_partial/article.ejs中添加如下代码；</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;% <span class=\"keyword\">if</span> (theme.valine &amp;&amp; theme.valine.appid &amp;&amp; theme.valine.appkey)&#123; %&gt;</span><br><span class=\"line\">    &lt;section <span class=\"built_in\">id</span>=<span class=\"string\">&quot;comments&quot;</span> style=<span class=\"string\">&quot;margin:10px;padding:10px;background:#fff;&quot;</span>&gt;</span><br><span class=\"line\">      &lt;%- partial(<span class=\"string\">&#x27;post/valine&#x27;</span>, &#123;</span><br><span class=\"line\">        key: post.slug,</span><br><span class=\"line\">        title: post.title,</span><br><span class=\"line\">        url: config.url+url_for(post.path)</span><br><span class=\"line\">        &#125;) %&gt;</span><br><span class=\"line\">    &lt;/section&gt;</span><br><span class=\"line\">  &lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n\n<p>7.在主题文件layout/_partial/post/内新建valine.ejs文件，代码如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"built_in\">id</span>=<span class=\"string\">&quot;vcomment&quot;</span> class=<span class=\"string\">&quot;comment&quot;</span>&gt;&lt;/div&gt; </span><br><span class=\"line\">&lt;script src=<span class=\"string\">&quot;//cdn1.lncld.net/static/js/3.0.4/av-min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">&quot;//unpkg.com/valine/dist/Valine.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">   var notify = <span class=\"string\">&#x27;&lt;%= theme.valine.notify %&gt;&#x27;</span> == <span class=\"literal\">true</span> ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">   var verify = <span class=\"string\">&#x27;&lt;%= theme.valine.verify %&gt;&#x27;</span> == <span class=\"literal\">true</span> ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">    window.onload = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        new Valine(&#123;</span><br><span class=\"line\">            el: <span class=\"string\">&#x27;.comment&#x27;</span>,</span><br><span class=\"line\">            notify: notify,</span><br><span class=\"line\">            verify: verify,</span><br><span class=\"line\">            app_id: <span class=\"string\">&quot;&lt;%= theme.valine.appid %&gt;&quot;</span>,</span><br><span class=\"line\">            app_key: <span class=\"string\">&quot;&lt;%= theme.valine.appkey %&gt;&quot;</span>,</span><br><span class=\"line\">            placeholder: <span class=\"string\">&quot;&lt;%= theme.valine.placeholder %&gt;&quot;</span>,</span><br><span class=\"line\">            avatar:<span class=\"string\">&quot;&lt;%= theme.valine.avatar %&gt;&quot;</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>8.重新编译下Hexo，评论系统就完成了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p>目前评论系统的头像是基于<a href=\"http://cn.gravatar.com/\">Gravatar</a>的，如果想使用自己的头像，需要自行注册，在评论的时候填写注册邮箱即可。</p>\n<p>默认的匿名头像由如下7种，可自行修改步骤5中的avatar: mm；<br><img src=\"/assets/images/200113_5.jpg\"></p>"},{"layout":"post","title":"通过WinPE修改计算机本地密码","comments":1,"date":"2020-01-02T11:56:11.000Z","_content":"早上刚修改的Windows本地登陆密码，过了一个小时就忘记了，记忆力告急，还好能通过WinPE重置本地密码，不然就完犊子了。\n<!--more-->\n原理还算简单，Windows的本地密码保存在一个系统文件里，我们能够通过装在U盘里的WinPE系统，进入一个能读取本地磁盘的界面，这时候通过WinPE里的修改密码软件，通过直接修改这个系统文件，来达到强制修改本地密码的目的。\n\n注意：\nWinPE系统需要附带修改密码软件的第三方版，纯净版干净到只能用命令行。\n计算机BIOS的硬盘模式需要改，Win7版后的WinPE集成有AHCI驱动，XP版本得选IDE模式，RAID On可能需要自行准备驱动，否则进去WinPE无法读取硬盘。\n\n1.进入WinPE系统\n把装有WinPE系统的U盘插进电脑USB口，以戴尔为例，开机按F12。\n成功进入WinPE系统时如下图。\n![](/assets/images/200102_1.png)\n\n2.打开修改密码软件\n软件界面如下图。\n![](/assets/images/200102_2.jpg)\n\n3.将地址栏中盘符修改为新的盘符\n打开我的电脑，看一下你原本的系统盘，现在的盘符，因为盘符可能会变化。把默认盘符换成新的盘符，如果之前没动过这个文件，那其后的地址不变。\n\n5.修改密码\n点击右侧打开，下方会列出磁盘下本地的用户，点击需要修改密码的用户，更改密码，保存更改即可。\n![](/assets/images/200102_3.jpg)\n\n6.完成\n重启，为防止依旧读取WinPE系统，过程中可拔掉U盘，或者通过设置磁盘启动均可。进入系统后输入新密码即可成功登陆。","source":"_posts/通过WinPE修改计算机本地密码.md","raw":"---\nlayout: post\ntitle: 通过WinPE修改计算机本地密码\ncomments: true\ntags: \n  - Windows\ndate: 2020-01-02 19:56:11\n---\n早上刚修改的Windows本地登陆密码，过了一个小时就忘记了，记忆力告急，还好能通过WinPE重置本地密码，不然就完犊子了。\n<!--more-->\n原理还算简单，Windows的本地密码保存在一个系统文件里，我们能够通过装在U盘里的WinPE系统，进入一个能读取本地磁盘的界面，这时候通过WinPE里的修改密码软件，通过直接修改这个系统文件，来达到强制修改本地密码的目的。\n\n注意：\nWinPE系统需要附带修改密码软件的第三方版，纯净版干净到只能用命令行。\n计算机BIOS的硬盘模式需要改，Win7版后的WinPE集成有AHCI驱动，XP版本得选IDE模式，RAID On可能需要自行准备驱动，否则进去WinPE无法读取硬盘。\n\n1.进入WinPE系统\n把装有WinPE系统的U盘插进电脑USB口，以戴尔为例，开机按F12。\n成功进入WinPE系统时如下图。\n![](/assets/images/200102_1.png)\n\n2.打开修改密码软件\n软件界面如下图。\n![](/assets/images/200102_2.jpg)\n\n3.将地址栏中盘符修改为新的盘符\n打开我的电脑，看一下你原本的系统盘，现在的盘符，因为盘符可能会变化。把默认盘符换成新的盘符，如果之前没动过这个文件，那其后的地址不变。\n\n5.修改密码\n点击右侧打开，下方会列出磁盘下本地的用户，点击需要修改密码的用户，更改密码，保存更改即可。\n![](/assets/images/200102_3.jpg)\n\n6.完成\n重启，为防止依旧读取WinPE系统，过程中可拔掉U盘，或者通过设置磁盘启动均可。进入系统后输入新密码即可成功登陆。","slug":"通过WinPE修改计算机本地密码","published":1,"updated":"2021-11-28T14:50:17.281Z","photos":[],"link":"","_id":"cl4kyqfw9001g20r59402g0ix","content":"<p>早上刚修改的Windows本地登陆密码，过了一个小时就忘记了，记忆力告急，还好能通过WinPE重置本地密码，不然就完犊子了。</p>\n<span id=\"more\"></span>\n<p>原理还算简单，Windows的本地密码保存在一个系统文件里，我们能够通过装在U盘里的WinPE系统，进入一个能读取本地磁盘的界面，这时候通过WinPE里的修改密码软件，通过直接修改这个系统文件，来达到强制修改本地密码的目的。</p>\n<p>注意：<br>WinPE系统需要附带修改密码软件的第三方版，纯净版干净到只能用命令行。<br>计算机BIOS的硬盘模式需要改，Win7版后的WinPE集成有AHCI驱动，XP版本得选IDE模式，RAID On可能需要自行准备驱动，否则进去WinPE无法读取硬盘。</p>\n<p>1.进入WinPE系统<br>把装有WinPE系统的U盘插进电脑USB口，以戴尔为例，开机按F12。<br>成功进入WinPE系统时如下图。<br><img src=\"/assets/images/200102_1.png\"></p>\n<p>2.打开修改密码软件<br>软件界面如下图。<br><img src=\"/assets/images/200102_2.jpg\"></p>\n<p>3.将地址栏中盘符修改为新的盘符<br>打开我的电脑，看一下你原本的系统盘，现在的盘符，因为盘符可能会变化。把默认盘符换成新的盘符，如果之前没动过这个文件，那其后的地址不变。</p>\n<p>5.修改密码<br>点击右侧打开，下方会列出磁盘下本地的用户，点击需要修改密码的用户，更改密码，保存更改即可。<br><img src=\"/assets/images/200102_3.jpg\"></p>\n<p>6.完成<br>重启，为防止依旧读取WinPE系统，过程中可拔掉U盘，或者通过设置磁盘启动均可。进入系统后输入新密码即可成功登陆。</p>\n","site":{"data":{}},"excerpt":"<p>早上刚修改的Windows本地登陆密码，过了一个小时就忘记了，记忆力告急，还好能通过WinPE重置本地密码，不然就完犊子了。</p>","more":"<p>原理还算简单，Windows的本地密码保存在一个系统文件里，我们能够通过装在U盘里的WinPE系统，进入一个能读取本地磁盘的界面，这时候通过WinPE里的修改密码软件，通过直接修改这个系统文件，来达到强制修改本地密码的目的。</p>\n<p>注意：<br>WinPE系统需要附带修改密码软件的第三方版，纯净版干净到只能用命令行。<br>计算机BIOS的硬盘模式需要改，Win7版后的WinPE集成有AHCI驱动，XP版本得选IDE模式，RAID On可能需要自行准备驱动，否则进去WinPE无法读取硬盘。</p>\n<p>1.进入WinPE系统<br>把装有WinPE系统的U盘插进电脑USB口，以戴尔为例，开机按F12。<br>成功进入WinPE系统时如下图。<br><img src=\"/assets/images/200102_1.png\"></p>\n<p>2.打开修改密码软件<br>软件界面如下图。<br><img src=\"/assets/images/200102_2.jpg\"></p>\n<p>3.将地址栏中盘符修改为新的盘符<br>打开我的电脑，看一下你原本的系统盘，现在的盘符，因为盘符可能会变化。把默认盘符换成新的盘符，如果之前没动过这个文件，那其后的地址不变。</p>\n<p>5.修改密码<br>点击右侧打开，下方会列出磁盘下本地的用户，点击需要修改密码的用户，更改密码，保存更改即可。<br><img src=\"/assets/images/200102_3.jpg\"></p>\n<p>6.完成<br>重启，为防止依旧读取WinPE系统，过程中可拔掉U盘，或者通过设置磁盘启动均可。进入系统后输入新密码即可成功登陆。</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cl4kyqfrx000120r5e62f4ue9","tag_id":"cl4kyqfsg000320r5cxsp0e1i","_id":"cl4kyqft5000820r50w1918ab"},{"post_id":"cl4kyqfs9000220r56m6zfc7d","tag_id":"cl4kyqft3000720r571eehpub","_id":"cl4kyqfth000d20r50unl4mxg"},{"post_id":"cl4kyqfsn000420r5bcek3zd2","tag_id":"cl4kyqftd000b20r5bg4hh742","_id":"cl4kyqftp000g20r5depk0a15"},{"post_id":"cl4kyqfst000520r52inkg81g","tag_id":"cl4kyqftl000e20r55gi46hth","_id":"cl4kyqftw000k20r57mes6qwb"},{"post_id":"cl4kyqfsx000620r51pcva3iq","tag_id":"cl4kyqfts000i20r5gbkfh0d8","_id":"cl4kyqfua000o20r52wahfq6o"},{"post_id":"cl4kyqft6000920r53dugfins","tag_id":"cl4kyqfts000i20r5gbkfh0d8","_id":"cl4kyqfuj000s20r56g131mo9"},{"post_id":"cl4kyqfuj000t20r512fj77oa","tag_id":"cl4kyqftd000b20r5bg4hh742","_id":"cl4kyqfv3000w20r5hklhck60"},{"post_id":"cl4kyqfta000a20r5fwux1822","tag_id":"cl4kyqfuh000r20r54n00fk21","_id":"cl4kyqfv7000y20r5277n6d5k"},{"post_id":"cl4kyqftf000c20r5dk5ggczg","tag_id":"cl4kyqfuh000r20r54n00fk21","_id":"cl4kyqfvg001220r5h9e2gqff"},{"post_id":"cl4kyqftm000f20r5fpx3arvw","tag_id":"cl4kyqfvb001020r5hu1s1a7v","_id":"cl4kyqfvq001620r50vwlahxe"},{"post_id":"cl4kyqftp000h20r59feh90ar","tag_id":"cl4kyqfvl001420r5at4pd9ac","_id":"cl4kyqfvz001a20r5eco1bpel"},{"post_id":"cl4kyqftt000j20r52j5a16ne","tag_id":"cl4kyqfvl001420r5at4pd9ac","_id":"cl4kyqfw5001e20r5dzjpgiei"},{"post_id":"cl4kyqfw5001f20r55ww80fqf","tag_id":"cl4kyqftd000b20r5bg4hh742","_id":"cl4kyqfwc001i20r59io2gp1m"},{"post_id":"cl4kyqftx000l20r5agepgmqx","tag_id":"cl4kyqfw1001c20r5aoxj6tu8","_id":"cl4kyqfwd001j20r5hfho8y8r"},{"post_id":"cl4kyqftz000m20r58bu618ab","tag_id":"cl4kyqfwb001h20r56vrmashn","_id":"cl4kyqfwe001l20r58eecfzrv"},{"post_id":"cl4kyqfub000p20r5h9zb9i2q","tag_id":"cl4kyqfwd001k20r52hu59asr","_id":"cl4kyqfwg001n20r5al6cfe79"},{"post_id":"cl4kyqfuf000q20r57chbc2gh","tag_id":"cl4kyqfwd001k20r52hu59asr","_id":"cl4kyqfwh001p20r5f1t6bjq4"},{"post_id":"cl4kyqfum000u20r59a6t5sms","tag_id":"cl4kyqfwg001o20r59gfv7lxe","_id":"cl4kyqfwi001r20r5hh190gvn"},{"post_id":"cl4kyqfv4000x20r5aizz7dmn","tag_id":"cl4kyqfwg001o20r59gfv7lxe","_id":"cl4kyqfwk001t20r55n386q2j"},{"post_id":"cl4kyqfv8000z20r55b0p9y5d","tag_id":"cl4kyqfwg001o20r59gfv7lxe","_id":"cl4kyqfwl001v20r5bkvf25bj"},{"post_id":"cl4kyqfvd001120r57joh2z6x","tag_id":"cl4kyqfwg001o20r59gfv7lxe","_id":"cl4kyqfwm001x20r5g0uhg0dk"},{"post_id":"cl4kyqfvh001320r559io8l04","tag_id":"cl4kyqfwg001o20r59gfv7lxe","_id":"cl4kyqfwo001z20r5645ya20d"},{"post_id":"cl4kyqfvn001520r5axc2c3ly","tag_id":"cl4kyqfwg001o20r59gfv7lxe","_id":"cl4kyqfwr002120r5f57mfjir"},{"post_id":"cl4kyqfvr001720r530j4bm22","tag_id":"cl4kyqfwp002020r575kfcc59","_id":"cl4kyqfws002320r51b702tvv"},{"post_id":"cl4kyqfvv001920r54qg5463p","tag_id":"cl4kyqfwr002220r521nm6ju6","_id":"cl4kyqfwu002520r56ayf57jv"},{"post_id":"cl4kyqfvz001b20r54yzqfhrq","tag_id":"cl4kyqfwp002020r575kfcc59","_id":"cl4kyqfwv002720r535098x3x"},{"post_id":"cl4kyqfw2001d20r53dmycp2c","tag_id":"cl4kyqfwp002020r575kfcc59","_id":"cl4kyqfwx002920r5fdcp2ae4"},{"post_id":"cl4kyqfw9001g20r59402g0ix","tag_id":"cl4kyqfwb001h20r56vrmashn","_id":"cl4kyqfwx002a20r5644w0fxp"}],"Tag":[{"name":"教程","_id":"cl4kyqfsg000320r5cxsp0e1i"},{"name":"GitHub","_id":"cl4kyqft3000720r571eehpub"},{"name":"Hexo","_id":"cl4kyqftd000b20r5bg4hh742"},{"name":"Manjaro","_id":"cl4kyqftl000e20r55gi46hth"},{"name":"shadowsock","_id":"cl4kyqfts000i20r5gbkfh0d8"},{"name":"VBA","_id":"cl4kyqfuh000r20r54n00fk21"},{"name":"MatLab","_id":"cl4kyqfvb001020r5hu1s1a7v"},{"name":"交换机","_id":"cl4kyqfvl001420r5at4pd9ac"},{"name":"VPS","_id":"cl4kyqfw1001c20r5aoxj6tu8"},{"name":"Windows","_id":"cl4kyqfwb001h20r56vrmashn"},{"name":"工程","_id":"cl4kyqfwd001k20r52hu59asr"},{"name":"深度学习","_id":"cl4kyqfwg001o20r59gfv7lxe"},{"name":"算法","_id":"cl4kyqfwp002020r575kfcc59"},{"name":"McAfee","_id":"cl4kyqfwr002220r521nm6ju6"}]}}